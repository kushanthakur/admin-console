var Sr=Object.create;var pe=Object.defineProperty;var wr=Object.getOwnPropertyDescriptor;var Hr=Object.getOwnPropertyNames;var Lr=Object.getPrototypeOf,Nr=Object.prototype.hasOwnProperty;var Er=(e,r)=>{for(var a in r)pe(e,a,{get:r[a],enumerable:!0})},Qe=(e,r,a,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let u of Hr(r))!Nr.call(e,u)&&u!==a&&pe(e,u,{get:()=>r[u],enumerable:!(n=wr(r,u))||n.enumerable});return e};var b=(e,r,a)=>(a=e!=null?Sr(Lr(e)):{},Qe(r||!e||!e.__esModule?pe(a,"default",{value:e,enumerable:!0}):a,e)),Vr=e=>Qe(pe({},"__esModule",{value:!0}),e);var gt={};Er(gt,{ChakraUICreateInferencer:()=>ke,ChakraUICreateRenderer:()=>Ke,ChakraUIEditInferencer:()=>Ie,ChakraUIEditRenderer:()=>_e,ChakraUIInferencer:()=>ft,ChakraUIListInferencer:()=>he,ChakraUIListRenderer:()=>je,ChakraUIShowInferencer:()=>ye,ChakraUIShowRenderer:()=>Ue});module.exports=Vr(gt);var me=b(require("react")),Rr=require("@refinedev/core");var Xr=b(require("@refinedev/chakra-ui")),Yr=b(require("@chakra-ui/react"));var O=b(require("react")),ze=require("@refinedev/core");var Br=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,$e=(e,r)=>{let a=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];Br.test(e)&&a.unshift("url");let n=a.find(u=>u in r&&!!r[u]);if(n)return n==="firstName"&&"lastName"in r?["firstName","lastName"]:n};var Xe=require("@refinedev/core");function Fe(e,r,a){if(r)return r;let n=a==null?void 0:a.find(s=>s.name===e),u=(0,Xe.pickNotDeprecated)(n==null?void 0:n.meta,n==null?void 0:n.options);return u!=null&&u.dataProviderName?u.dataProviderName:"default"}var se=e=>{var r;return(r=e==null?void 0:e.options)==null?void 0:r.dataProviderName};var be=e=>{let r=[...e].filter(Boolean).sort((a,n)=>(n.priority||0)-(a.priority||0))[0];return r||null};var Ye=b(require("prettier/standalone")),Je=b(require("prettier/parser-typescript")),xe=e=>{try{return Ye.default.format(e,{parser:"typescript",plugins:[Je.default],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(r){return console.warn("Formatting error in inferencer",r),e}};var Ce=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var ve=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,er=(e,r)=>{let a=ve.test(e),n=typeof r=="string"||typeof r=="number",u=Array.isArray(r)&&r.every(s=>typeof s=="string"||typeof s=="number");return a&&n||a&&u?{key:e,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var M=e=>e.replace(ve,"");var h=e=>M(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(m=>m.charAt(0).toUpperCase()+m.slice(1)).join(" ");var Ae=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var rr=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Mr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,Dr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,Re=(e,r={})=>{let a=e.matchAll(rr),n=new Set;for(let u of a){let[,s,m,k,d]=u;if(d in r){let I=r[d];if(d==="react")continue;s&&n.add(`const { default: ${s} } = ${I};`),m&&n.add(`const${m.replace(Dr,"$1: $3$4")} = ${I};`),k&&n.add(`const ${k} = ${I};`)}}return Ce(`
    ${Array.from(n).join(`
`)}
    ${e.replace(rr,"").replace(Mr,"")}
    `)};var ie=b(require("pluralize"));var Te=(e,r)=>e?r.find(n=>{let u=M(e.key);return n.name===u||n.name===(ie.default.isPlural(u)?u:ie.default.plural(u))||n.name===(ie.default.isSingular(u)?u:ie.default.singular(u))}):void 0;var tr=b(require("pluralize"));var z=(e,r,a="Inferred")=>{let n=e.replace(/[^a-zA-Z0-9]/g," "),u=tr.default.singular(n),m=h(u).replace(/ /g,"")||a,k=r.charAt(0).toUpperCase()+r.slice(1);return/^[a-zA-Z]/.test(m)?`${m}${k}`:`${k}${m}`};var Pr=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",g=(e,...r)=>e.reduce((n,u,s)=>`${n}${u}${Pr(r[s])}`,"").trim();var Se=(e,r)=>`
    ${e!=null?e:""}
    
    render(typeof ${r} !== "undefined" ? <${r} /> : <></>);
    `;var we=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var zr=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,He=e=>zr.test(e);function Le(e,r,a){let n=`${e}`;return r&&(n+="?.",He(r)?n+=r:n+=`['${r}']`),a&&(n+="?.",He(a)?n+=a:n+=`['${a}']`),n}function Or(e,r,a){return(a!=null?a:[]).map(u=>Le(e,r,u))}var l=(e,r,a,n=' + " " + ')=>Array.isArray(a)?n?Or(e,r,a).join(n):Le(e,r,a[0]):Le(e,r,a),B=(e,r,a)=>{let n=e;return r&&(n+=`.${r}`),a&&(Array.isArray(a)?n+=`.${a[0]}`:n+=`.${a}`),n};var j=e=>{let r=e.reduce((n,[u,s,m])=>(n[s]||(n[s]=[]),n[s].includes(u)||(m?n[s].push([u,!0]):n[s].push(u)),n),{});return Object.entries(r).map(([n,u])=>{let s=u.find(I=>Array.isArray(I)&&I[1]),m=u.filter(I=>typeof I=="string"),k=s?`${s[0]}`:"",d=m.length?`{ ${m.join(", ")} }`:"";return`import ${k}${k&&d?", ":""}${d} from "${n}";`})};var Ne=b(require("pluralize")),U=(e="")=>Ne.default.isSingular(e)?e:Ne.default.singular(e);var Ee=b(require("pluralize")),re=(e="")=>Ee.default.isPlural(e)?e:Ee.default.plural(e);var Ur=/^id$/i,ce=e=>Ur.test(e);var ue=e=>e.relationInfer&&e.relationInfer.accessor?Array.isArray(e.relationInfer.accessor)?`optionLabel: "${e.relationInfer.accessor[0]}",`:e.relationInfer.accessor!=="title"?`optionLabel: "${e.relationInfer.accessor}",`:"":"";var K=e=>{};var A=(e,r="")=>{if(Number.isInteger(Number(e)))return r.charAt(0).toLowerCase()+r.slice(1)+e;let n=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=h(n).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${r.charAt(0).toUpperCase()+r.slice(1)}`};var nr=e=>{let r=(a,n,u,s=r)=>{let m=e.map(d=>d(a,n,u,s));return be(m)};return r};var or=e=>(a,n,u,s,m)=>e.reduce((k,d)=>d(k,n,u,s,m),a);var ar=(e,r,a,n)=>{let u=Array.isArray(r),s=Array.isArray(r)&&r.every(m=>typeof m=="string"||typeof m=="number");if(u){if(!s){let k=n(e,r[0],a,n);return k?{...k,key:e,multiple:!0,priority:1}:!1}let m=n(e,r[0],a,n)||{type:"string"};return{key:e,multiple:!0,priority:1,type:m==null?void 0:m.type}}return!1};var sr=(e,r)=>typeof r=="boolean"?{key:e,type:"boolean"}:!1;var Ve=b(require("dayjs")),jr=/(_at|_on|At|On|AT|ON)(\[\])?$/,Kr=["/",":","-","."],ir=(e,r)=>{let a=jr.test(e)&&(0,Ve.default)(r).isValid(),n=typeof r=="string"&&(0,Ve.default)(r).isValid();return typeof r=="string"&&Kr.some(s=>r.includes(s))&&(a||n)?{key:e,type:"date",priority:1}:!1};var _r=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,cr=(e,r)=>typeof r=="string"&&_r.test(r)?{key:e,type:"email",priority:1}:!1;var qr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,ur=(e,r)=>typeof r=="string"&&qr.test(r)?{key:e,type:"image",priority:2}:!1;var mr=(e,r)=>typeof r>"u"||r===null?null:!1;var pr=(e,r)=>{let a=typeof r=="string"&&r.length>0,n=!isNaN(r);return a&&n||typeof r=="number"?{key:e,type:"number"}:!1};var Wr=/id$/i,lr=(e,r,a,n)=>{let u=r!==null,s=!Array.isArray(r);if(u&&s&&typeof r=="object"){if(Object.keys(r).length===1&&Wr.test(Object.keys(r)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let d=$e(e,r);if((d?d.length>0:!1)&&d){let C=d&&Array.isArray(d)?d[0]:d,v=n(C,r[C],r,n);if(v){let $=Array.isArray(d)?d.map(c=>v.accessor?`${c}.${Array.isArray(v.accessor)?v.accessor[0]:v.accessor}`:c):v.accessor?Array.isArray(v.accessor)?`${d}.${v.accessor[0]}`:`${d}.${v.accessor}`:d;return{...v,fieldable:!0,key:e,accessor:$,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var dr=(e,r)=>typeof r=="string"&&r.length>100?{key:e,type:"richtext",priority:1}:!1;var fr=(e,r)=>typeof r=="string"?{key:e,type:"text"}:!1;var Gr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,gr=(e,r)=>typeof r=="string"&&Gr.test(r)?{key:e,type:"url",priority:1}:!1;var yr=[ar,sr,ir,cr,ur,mr,pr,lr,er,dr,fr,gr];var hr=(e,r,a,n)=>e.map(s=>{if(!s.relation&&(s.type==="text"||s.type==="richtext"||s.type==="number")&&!s.canRelation){let m=/^[a-z0-9-]+$/,k=$=>m.test(`${$}`),d=s.key.toLowerCase()!=="id";return!(!s.accessor||typeof s.accessor=="string")||!d?s:(s.multiple?n[s.key]:[n[s.key]]).every($=>k(s.accessor?$[s.accessor]:$))?{...s,canRelation:!0}:s}return s});var Zr=/(image|photo|avatar|cover|thumbnail|icon)/i,kr=e=>e.map(a=>a.type==="url"&&Zr.test(a.key)?{...a,type:"image"}:a);var Ir=(e,r)=>e.map(n=>{let u=Te(n,r);return u?{...n,relation:!0,type:"relation",resource:u}:n});var $r=(e,r,a,n,u)=>e.map(m=>{if(m.relation&&m.type==="relation"&&!m.resource){let k=m.accessor?n[m.key][m.accessor]:n[m.key],d=u(m.key,k,n,u);if(d&&d.type!=="relation")return{...m,fieldable:!0,relation:!1,type:d.type,canRelation:!0}}return m});var Fr=[kr,Ir,$r,hr];var _=b(require("react")),le=b(require("prism-react-renderer")),br=b(require("prism-react-renderer/themes/vsDark")),Be=({code:e,wrapperProps:r})=>((0,_.useEffect)(()=>{var n;let a=document.createElement("style");a.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(n=document.getElementById("code-highlight"))==null||n.appendChild(a)},[]),_.default.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...r!=null?r:{}},_.default.createElement(le.default,{...le.defaultProps,theme:br.default,code:e,language:"tsx"},({className:a,style:n,tokens:u,getLineProps:s,getTokenProps:m})=>_.default.createElement("pre",{className:a,style:{...n,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((k,d)=>_.default.createElement("div",{key:d,...s({line:k,key:d})},k.map((I,C)=>_.default.createElement("span",{key:C,...m({token:I,key:C})}))))))));var P=b(require("react")),Qr=b(require("@refinedev/core")),de=require("@aliemir/react-live");var xr=[["react","React",P.default],["@refinedev/core","RefineCore",Qr]],Me=P.default.createContext({}),De=({fetchError:e,code:r,additionalScope:a,errorComponent:n})=>{var k;let u=(k=r&&Ae(Re(r,[...xr,...a!=null?a:[]].reduce((d,[I,C,v,$])=>$?d:{...d,[I]:C},{}))))!=null?k:"",s=P.default.useMemo(()=>({React:P.default,...P.default,...[...xr,...a!=null?a:[]].reduce((d,[I,C,v])=>({...d,[C]:v}),{})}),[a]),m=P.default.useMemo(()=>()=>{let{error:I}=P.default.useContext(Me);return n?P.default.createElement(n,{error:I?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${I}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[n,e]);return P.default.createElement(de.LiveProvider,{Context:Me,code:u,scope:s,noInline:!0},!e&&P.default.createElement(de.LivePreview,{Context:Me}),P.default.createElement(m,null))};var ee=b(require("react")),fe=require("@refinedev/core");var Cr=(e,r,a)=>{let{resource:n,id:u,resources:s}=(0,fe.useResource)(r),m=a!=null?a:u,k=(0,fe.useDataProvider)(),[d,I]=ee.default.useState(void 0),[C,v]=ee.default.useState(void 0),[$,c]=ee.default.useState(!0),[H,p]=ee.default.useState(!1),i=ee.default.useCallback(async R=>{var V,o;let F=(V=se(n))!=null?V:Fe(n==null?void 0:n.name,void 0,s),T=k(F);p(!0),I(void 0);try{if((e==="list"||e==="create")&&n){let t=(o=(await T.getList({resource:n==null?void 0:n.name})).data)==null?void 0:o[0];t||I(`<p>No records/data found for resource "${n==null?void 0:n.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),v(t),setTimeout(()=>{p(!1)},500)}if((e==="edit"||e==="show")&&R&&n){let t=(await T.getOne({resource:n==null?void 0:n.name,id:R})).data;t||I(`<p>No records/data found for resource "${n==null?void 0:n.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),v(t),setTimeout(()=>{p(!1)},500)}}catch(y){console.warn("An error occured while fetching the resource data. Please check the error message below:",y),I(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${n==null?void 0:n.name}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{p(!1)},500)}},[e,k,n,s]);return ee.default.useEffect(()=>{c(!1),!H&&!C&&i(m)},[i,m]),{data:C,loading:H,initial:$,error:d}};var te=b(require("react")),vr=require("@refinedev/core");var Pe=require("lodash"),Ar=({record:e,fields:r,infer:a})=>{let n=(0,vr.useDataProvider)(),[u,s]=te.default.useState([]),[m,k]=te.default.useState(!0),[d,I]=te.default.useState(!1),C=te.default.useCallback(async v=>{console.groupCollapsed("@refinedev/inferencer is trying to detect relations");let $=[];I(!0);try{let c=v.map(async p=>{if(p&&(p.relation||p.canRelation)&&e){let i=se(p.resource),R=n(i),F=Array.isArray(p.accessor)?void 0:p.multiple?e[p.key].map(T=>p.accessor?(0,Pe.get)(T,p.accessor):T)[0]:p.accessor?(0,Pe.get)(e[p.key],p.accessor):e[p.key];if(F&&p.resource)try{let{data:T}=await R.getOne({resource:p.resource.name,id:F});$.push({status:"success",resource:p.resource.name,field:p.key});let V=a("__",T,{},a);return{...p,relationInfer:V}}catch{return $.push({status:"error",resource:p.resource.name,field:p.key}),{...p,relationInfer:null}}if(F){let T,V;try{let{data:t}=await R.getOne({resource:re(M(p.key)),id:F});$.push({status:"success",resource:re(M(p.key)),field:p.key}),T=t,V=!0}catch{$.push({status:"error",resource:re(M(p.key)),field:p.key});try{let{data:x}=await R.getOne({resource:U(M(p.key)),id:F});$.push({status:"success",resource:U(M(p.key)),field:p.key}),T=x,V=!1}catch{return $.push({status:"error",resource:U(M(p.key)),field:p.key}),{...p,relationInfer:null}}}let o=a("__",T,{},a),y=M(p.key);return{...p,relation:!0,type:"relation",resource:{name:V?re(y):U(y)},fieldable:!1,canRelation:void 0,relationInfer:o}}return{...p,relationInfer:null}}return p}),H=await Promise.all(c);s(H.filter(p=>p)),setTimeout(()=>{I(!1)},500)}catch{setTimeout(()=>{I(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${$.length} attempts and succeeded with ${$.filter(c=>c.status==="success").length} attempts.`),console.groupEnd()},500)},[n,e]);return te.default.useEffect(()=>{k(!1),!d&&r&&r.length>0&&u.length===0&&C(r)},[C,d,r,C]),{fields:u,loading:d,initial:m}};var q=({type:e,additionalScope:r=[],customElements:a=[],fieldTransformers:n=[],renderer:u,loadingComponent:s,errorComponent:m,codeViewerComponent:k})=>{let d=nr([...yr,...a]),I=or([...Fr,...n]),C=({resourceName:$,fieldTransformer:c,id:H})=>{var N,S,D,J,oe,qe;let{resource:p,resources:i}=(0,ze.useResource)($),{resource:R}=(0,ze.useResource)(),{data:F,loading:T,initial:V,error:o}=Cr(e,$!=null?$:p==null?void 0:p.name,H),y=O.default.useMemo(()=>{if(F){let Tr=Object.keys(F).map(ae=>{let We=F[ae];return d(ae,We,F,d)}).filter(Boolean);if(p){let ae=I(Tr,i,p,F,d);return c?ae.flatMap(Ge=>{let Ze=c(Ge);return Ze?[Ze]:[]}):ae}return[]}return[]},[F,i,p,c]),{fields:t,loading:x}=Ar({record:F,fields:y,infer:d}),L=O.default.useMemo(()=>!T&&!x&&!V&&p?u({resource:p,resources:i,fields:t,infer:d,isCustomPage:p.name!==(R==null?void 0:R.name),id:H}):"",[p,i,t,T,x]);return O.default.createElement(O.default.Fragment,null,s&&(T||x)&&O.default.createElement(s,null),!T&&!x&&O.default.createElement(O.default.Fragment,null,O.default.createElement(De,{fetchError:!T&&o?o:!T&&!V&&!F,code:Se(L,z((qe=(oe=(J=(D=(N=p==null?void 0:p.meta)==null?void 0:N.label)!=null?D:(S=p==null?void 0:p.options)==null?void 0:S.label)!=null?J:p==null?void 0:p.label)!=null?oe:p==null?void 0:p.name)!=null?qe:"Resource",e)),errorComponent:m,additionalScope:r}),k&&O.default.createElement(k,{code:we(L),loading:T||x})))};return({name:$,resource:c,fieldTransformer:H,id:p})=>O.default.createElement(C,{fieldTransformer:H,resourceName:c!=null?c:$,key:c!=null?c:$,id:p})};var ne=b(require("react")),W=require("@chakra-ui/react"),G=({error:e})=>e?ne.default.createElement(W.Center,{style:{minHeight:300}},ne.default.createElement(W.Alert,{status:"error",variant:"subtle",flexDirection:"column",alignItems:"center",justifyContent:"center",textAlign:"center",height:"200px",maxWidth:"700px"},ne.default.createElement(W.AlertIcon,{boxSize:"40px",mr:0}),ne.default.createElement(W.AlertDescription,{mt:4,maxWidth:"sm"},ne.default.createElement("div",{dangerouslySetInnerHTML:{__html:e!=null?e:""}})))):null;var Oe=b(require("react")),ge=require("@chakra-ui/react"),Z=()=>Oe.default.createElement(ge.Box,{position:"relative",bg:"chakra-body-bg",minH:120},Oe.default.createElement(ge.Spinner,{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}));var w=b(require("react")),E=require("@chakra-ui/react"),Q=require("@tabler/icons");var X=({code:e,loading:r})=>{let a=w.default.useMemo(()=>xe(e!=null?e:""),[e]),n=w.default.useRef(null),[u,s]=w.default.useState(!1),{isOpen:m,onOpen:k,onClose:d}=(0,E.useDisclosure)();if(r)return null;let I=()=>{var C,v,$,c;(C=n==null?void 0:n.current)==null||C.select(),(v=n==null?void 0:n.current)==null||v.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((c=($=n==null?void 0:n.current)==null?void 0:$.value)!=null?c:""),s(!0),setTimeout(()=>{s(!1)},1e3))};return a?w.default.createElement(w.default.Fragment,null,w.default.createElement(E.Box,{position:"fixed",bottom:"12px",right:"60px"},w.default.createElement(E.HStack,{spacing:4},w.default.createElement(E.Button,{variant:"solid",colorScheme:"green",leftIcon:w.default.createElement(Q.IconCode,{size:18}),onClick:k},"Show Code"),w.default.createElement(E.Button,{colorScheme:"gray",variant:"solid",leftIcon:w.default.createElement(Q.IconMessageCircle,{size:18}),as:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046"},"Give Feedback"))),w.default.createElement("div",{style:{height:"50px"}}),w.default.createElement(E.Modal,{size:"4xl",isOpen:m,onClose:d},w.default.createElement(E.ModalOverlay,null),w.default.createElement(E.ModalContent,null,w.default.createElement(E.ModalCloseButton,{sx:{position:"absolute",right:0,top:0,height:"56px",width:"56px",color:"#666b7a"}}),w.default.createElement(E.ModalBody,{sx:{padding:0}},w.default.createElement(Be,{code:a}),w.default.createElement("textarea",{ref:n,defaultValue:(a!=null?a:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}})),w.default.createElement(E.Button,{sx:{position:"absolute",bottom:"12px",right:"12px",width:100},key:"copy",leftIcon:u?w.default.createElement(Q.IconCheck,{size:18,style:{color:"green"}}):w.default.createElement(Q.IconCopy,{size:18}),onClick:I},u?"Copied":"Copy")))):null};var Ue=({resource:e,fields:r,isCustomPage:a,id:n})=>{var V;let u=z((V=e.label)!=null?V:e.name,"show"),s="record",m=[["useShow","@refinedev/core"],["Show","@refinedev/chakra-ui"],["Heading","@chakra-ui/react"]],d=r.filter(o=>(o==null?void 0:o.relation)&&!(o!=null&&o.fieldable)&&(o==null?void 0:o.resource)).filter(Boolean).map(o=>{if((o==null?void 0:o.relation)&&!o.fieldable&&o.resource){if(o.multiple){m.push(["useMany","@refinedev/core"]);let y=l(s,o.key);return o.accessor&&(y=`${l(s,o.key)}?.map((item: any) => ${l("item",void 0,o.accessor)})`),`
                const { data: ${A(o.key,"Data")}, isLoading: ${A(o.key,"IsLoading")} } =
                useMany({
                    resource: "${o.resource.name}",
                    ids: ${y} || [],
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
                `}return m.push(["useOne","@refinedev/core"]),`
                const { data: ${A(o.key,"Data")}, isLoading: ${A(o.key,"IsLoading")} } =
                useOne({
                    resource: "${o.resource.name}",
                    id: ${l(s,o.key,o.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
            `}}).filter(Boolean),I=o=>{if(o.relation&&o.resource){let y=A(o.key,"Data"),t=A(o.key,"IsLoading");return o.multiple?(m.push(["TagField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                {${t} ? <>Loading...</> : (
                    <>
                    ${(()=>{var x;if(o.relationInfer)if((x=o.relationInfer)!=null&&x.accessor){if(Array.isArray(o.relationInfer.accessor))return"Not Handled.";{let L=A(o.key),N=l(L,void 0,o.relationInfer.accessor);return`<HStack spacing="12px">{${y}?.data?.map((${L}: any) => <TagField key={${N}} value={${N}} />)}</HStack>`}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                {${t} ? <>Loading...</> : (
                    <>
                    ${(()=>{var x;return o.relationInfer?(x=o.relationInfer)!=null&&x.accessor?Array.isArray(o.relationInfer.accessor)?`{${l(`${y}?.data`,void 0,o.relationInfer.accessor,' + " " + ')}}`:`{${y}?.data?.${o.relationInfer.accessor}}`:`{${y}?.data}`:`{${y}?.data?.id}`})()}
                    </>
                )}
                
                `}},C=o=>{if(o.type==="text"){if(m.push(["TagField","@refinedev/chakra-ui"],["TextField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <TextField value={${l(s,o.key,o.accessor)}} />
            `}},v=o=>{if(o.type==="image"){if(m.push(["Image","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                {${l(s,o.key)}?.map((item: any) => (
                    <Image sx={{ maxWidth: 200 }} src={${y}} key={${y}} />
                ))}
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <Image sx={{ maxWidth: 200 }} src={${l(s,o.key,o.accessor," + ")}} />
                `}},$=o=>{if(o.type==="email"){if(m.push(["TagField","@refinedev/chakra-ui"],["EmailField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <EmailField value={${l(s,o.key,o.accessor," + ")}} />
            `}},c=o=>{if(o.type==="url"){if(m.push(["TagField","@refinedev/chakra-ui"],["UrlField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <UrlField value={${l(s,o.key,o.accessor," + ")}} />
            `}},H=o=>{if(o.type==="boolean"){if(m.push(["TagField","@refinedev/chakra-ui"],["BooleanField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <BooleanField value={${l(s,o.key,o.accessor," && ")}} />
            `}},p=o=>{if(o.type==="date"){if(m.push(["DateField","@refinedev/chakra-ui"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                {${l(s,o.key)}?.map((item: any) => (
                    <DateField value={${y}} key={${y}} />
                ))}
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <DateField value={${l(s,o.key,o.accessor," + ' ' + ")}} />
            `}},i=o=>{if(o.type==="richtext")return m.push(["MarkdownField","@refinedev/chakra-ui"]),g`
                <Heading as="h5" size="sm" mt={4}>${h(o.key)}</Heading>
                <MarkdownField value={${l(s,o.key,o.accessor,' + " " + ')}} />
            `},R=o=>{if(o.type==="number"){if(m.push(["NumberField","@refinedev/chakra-ui"],["TagField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${h(o.key)}</Heading>
                <NumberField value={${l(s,o.key,o.accessor,' + " " + ')} ?? ""} />
            `}},F=o=>{if(o)return g`
                ${o}
            `},T=r.map(o=>{switch(o==null?void 0:o.type){case"text":return F(C(o));case"number":return F(R(o));case"richtext":return F(i(o));case"email":return F($(o));case"image":return F(v(o));case"date":return F(p(o));case"boolean":return F(H(o));case"url":return F(c(o));case"relation":return F(I(o));default:return}});return K(m),g`
    ${j(m)}
    
    export const ${u} = () => {
        const { queryResult } = useShow(${a?`{ 
                    resource: "${e.name}", 
                    id: ${n}
                }`:""});
        const { data, isLoading } = queryResult;

        const ${s} = data?.data;
    
        ${d}

        return (
            <Show isLoading={isLoading}>
                ${T.join("")}
            </Show>
        );
    };
    `},ye=q({type:"show",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",Xr],["@chakra-ui/react","ChakraUI",Yr]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:Ue});var Jr=b(require("@refinedev/chakra-ui")),et=b(require("@chakra-ui/react")),rt=b(require("@refinedev/react-table")),tt=b(require("@tanstack/react-table")),nt=b(require("@tabler/icons"));var Y=e=>Array.isArray(e.accessor)||e.multiple?`accessorKey: "${e.key}"`:e.accessor?`accessorKey: "${B(e.key,void 0,e.accessor)}"`:`accessorKey: "${e.key}"`,je=({resource:e,fields:r,isCustomPage:a})=>{var y;let n=z((y=e.label)!=null?y:e.name,"list"),u="tableData?.data",s=[["IResourceComponentsProps","@refinedev/core"],["useTable","@refinedev/react-table"],["ColumnDef","@tanstack/react-table"],["flexRender","@tanstack/react-table"],["List","@refinedev/chakra-ui"],["TableContainer","@chakra-ui/react"],["Table","@chakra-ui/react"],["Thead","@chakra-ui/react"],["Tr","@chakra-ui/react"],["Th","@chakra-ui/react"],["Tbody","@chakra-ui/react"],["Tr","@chakra-ui/react"],["Td","@chakra-ui/react"],["HStack","@chakra-ui/react"],["Button","@chakra-ui/react"],["IconButton","@chakra-ui/react"],["usePagination","@refinedev/chakra-ui"],["Box","@chakra-ui/react"],["IconChevronRight","@tabler/icons"],["IconChevronLeft","@tabler/icons"]],m=r.filter(t=>(t==null?void 0:t.relation)&&!(t!=null&&t.fieldable)&&(t==null?void 0:t.resource)),k=m.filter(Boolean).map(t=>{if((t==null?void 0:t.relation)&&!t.fieldable&&t.resource){s.push(["GetManyResponse","@refinedev/core"]),s.push(["useMany","@refinedev/core"]);let x="";return t.multiple?x=`[].concat(...(${u}?.map((item) => ${l("item",t.key,t.accessor,!1)}) ?? []))`:x=`${u}?.map((item) => ${l("item",t.key,t.accessor,!1)}) ?? []`,`
                const { data: ${A(t.key,"Data")} } =
                useMany({
                    resource: "${t.resource.name}",
                    ids: ${x},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),d=m==null?void 0:m.map(t=>{if(t&&t.resource)return A(t.key,"Data")}).filter(Boolean),I=t=>{var x;if(t.relation&&t.resource){let L=`${A(t.key,"Data")}?.data`;if(Array.isArray(t.accessor))return;let N=`id: "${t.key}"`,S=`header: "${h(t.key)}"`,D=Y(t),J="";if(t.multiple){s.push(["TagField","@refinedev/chakra-ui"]);let oe="item";t!=null&&t.relationInfer&&(oe=l("item",void 0,t.relationInfer.accessor)),J=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${A(t.key,"Data")}: GetManyResponse;
                    };

                    const ${A(t.key,"")} = getValue<any[]>()?.map((item) => {
                        return meta.${A(t.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${l("item",void 0,t.accessor)}
                        );
                    })


                    return (
                        <HStack>
                            {${A(t.key,"")}?.map((item, index) => (
                                <TagField key={index} value={${oe}} />
                            ))}
                        </HStack>
                    )
                }
            `}else t!=null&&t.relationInfer?J=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${A(t.key,"Data")}: GetManyResponse;
                        };

                        const ${A(t.key,"")} = meta.${L}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${l(A(t.key),void 0,(x=t==null?void 0:t.relationInfer)==null?void 0:x.accessor)} ?? "Loading...";
                    },`:J="";return`
                {
                    ${N},
                    ${S},
                    ${D},
                    ${J}
                }
            `}},C=t=>{if(t.type==="image"){s.push(["Image","@chakra-ui/react"]);let x=`id: "${t.key}"`,L=Y(t),N=`header: "${h(t.key)}"`,S=g`
                cell: function render({ getValue }) {
                    ${t!=null&&t.accessor?"try {":""}
                        return <Image sx={{ maxWidth: "100px" }} src={${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0," + ")}} />
                    ${t!=null&&t.accessor?" } catch (error) { return null; }":""}
                }
            `;if(t.multiple){let D=l("item",void 0,t.accessor," + ");S=`
                    cell: function render({ getValue }) {
                        ${t!=null&&t.accessor?"try {":""}
                            return (
                                <HStack>
                                    {getValue<any[]>()?.map((item, index) => (
                                        <Image src={${D}} key={index} sx={{ height: "50px", maxWidth: "100px" }} />
                                    ))}
                                </HStack>
                            )
                        ${t!=null&&t.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${x},
                    ${L},
                    ${N},
                    ${S}
                }
            `}},v=t=>{if(t.type==="email"){s.push(["EmailField","@refinedev/chakra-ui"]);let x=`id: "${t.key}"`,L=Y(t),N=`header: "${h(t.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <EmailField value={${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0,' + " " + ')}} />
                }
            `;return t.multiple&&(s.push(["TagField","@refinedev/chakra-ui"]),S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,t.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${x},
                    ${L},
                    ${N},
                    ${S}
                }
            `}},$=t=>{if(t.type==="url"){s.push(["UrlField","@refinedev/chakra-ui"]);let x=`id: "${t.key}"`,L=Y(t),N=`header: "${h(t.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <UrlField value={${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0," + ")}} />
                }
            `;return t.multiple&&(s.push(["TagField","@refinedev/chakra-ui"]),S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,t.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${x},
                    ${L},
                    ${N},
                    ${S}
                }
            `}},c=t=>{if((t==null?void 0:t.type)==="boolean"){s.push(["BooleanField","@refinedev/chakra-ui"]);let x=`id: "${t.key}"`,L=Y(t),N=`header: "${h(t.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <BooleanField value={${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0," + ")}} />
                }
            `;return t.multiple&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <BooleanField value={${l("item",void 0,t.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${x},
                    ${L},
                    ${N},
                    ${S}
                }
            `}},H=t=>{if(t.type==="date"){s.push(["DateField","@refinedev/chakra-ui"]);let x=`id: "${t.key}"`,L=Y(t),N=`header: "${h(t.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <DateField value={${l("getValue<any>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0,' + " " + ')}} />
                }
            `;return t.multiple&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <DateField value={${l("item",void 0,t.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${x},
                    ${L},
                    ${N},
                    ${S}
                }
            `}},p=t=>{if((t==null?void 0:t.type)==="richtext"){s.push(["MarkdownField","@refinedev/chakra-ui"]);let x=`id: "${t.key}"`,L=Y(t),N=`header: "${h(t.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <MarkdownField value={(${l("getValue<string>()",void 0,Array.isArray(t.accessor)?t.accessor:void 0)})?.slice(0, 80) + "..." } />
                }
            `;return t.multiple&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<string[]>()?.map((item, index) => (
                                    <MarkdownField value={${l("item",void 0,t.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${x},
                    ${L},
                    ${N},
                    ${S}
                }
            `}},i=t=>{if(t&&(t.type==="text"||t.type==="number")){let x=`id: "${t.key}"`,L=Y(t),N=`header: "${h(t.key)}"`,S="";return t.multiple&&(s.push(["TagField","@refinedev/chakra-ui"]),S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,t.accessor,' + " " + ')}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),!t.multiple&&Array.isArray(t.accessor)&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${l("getValue<any>()",t.key,t.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${x},
                    ${L},
                    ${N},
                    ${S}
                }
            `}},{canEdit:R,canShow:F,canDelete:T}=e!=null?e:{};R&&s.push(["EditButton","@refinedev/chakra-ui"]),F&&s.push(["ShowButton","@refinedev/chakra-ui"]),T&&s.push(["DeleteButton","@refinedev/chakra-ui"]);let V=R||F||T?g`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <HStack>
                ${F?g`
                    <ShowButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${R?g`
                    <EditButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${T?g`
                    <DeleteButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                </HStack>
            );
        },
    },
        `:"",o=r.map(t=>{switch(t==null?void 0:t.type){case"text":case"number":return i(t);case"richtext":return p(t);case"email":return v(t);case"image":return C(t);case"date":return H(t);case"boolean":return c(t);case"url":return $(t);case"relation":return I(t);default:return}});return K(s),g`
    import React from "react";
    ${j(s)}
    
    export const ${n}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...o,V].filter(Boolean).join(",")}
        ], []);

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                setCurrent,
                pageCount,
                current,
                tableQueryResult: { data: tableData },
            },
        } = useTable({
            columns,
            ${a?`
            refineCoreProps: {
                resource: "${e.name}",
            }
            `:""}
            
        });

        ${k}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${d.join(", ")}
            },
        }));

        return (
            <List>
                <TableContainer whiteSpace="pre-line">
                    <Table variant="simple">
                        <Thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <Tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <Th key={header.id}>
                                            {!header.isPlaceholder && (
                                                flexRender(
                                                    header.column.columnDef
                                                        .header,
                                                    header.getContext(),
                                                )
                                            )}
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody>
                            {getRowModel().rows.map((row) => (
                                <Tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <Td key={cell.id}>
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </Td>
                                    ))}
                                </Tr>
                            ))}
                        </Tbody>
                    </Table>
                </TableContainer>
                <Pagination
                    current={current}
                    pageCount={pageCount}
                    setCurrent={setCurrent}
                />
            </List>   
        );
    };

    type PaginationProps = {
        current: number;
        pageCount: number;
        setCurrent: (page: number) => void;
    };

    const Pagination: React.FC<PaginationProps> = ({
        current,
        pageCount,
        setCurrent,
    }) => {
        const pagination = usePagination({
            current,
            pageCount,
        });
    
        return (
            <Box display="flex" justifyContent="flex-end">
                <HStack my="3" spacing="1">
                    {pagination?.prev && (
                        <IconButton
                            aria-label="previous page"
                            onClick={() => setCurrent(current - 1)}
                            disabled={!pagination?.prev}
                            variant="outline"
                        >
                            <IconChevronLeft size="18" />
                        </IconButton>
                    )}
    
                    {pagination?.items.map((page) => {
                        if (typeof page === "string")
                            return <span key={page}>...</span>;
    
                        return (
                            <Button
                                key={page}
                                onClick={() => setCurrent(page)}
                                variant={page === current ? "solid" : "outline"}
                            >
                                {page}
                            </Button>
                        );
                    })}
                    {pagination?.next && (
                        <IconButton
                            aria-label="next page"
                            onClick={() => setCurrent(current + 1)}
                            variant="outline"
                        >
                            <IconChevronRight size="18" />
                        </IconButton>
                    )}
                </HStack>
            </Box>
        );
    };
    `},he=q({type:"list",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",Jr],["@refinedev/react-table","RefineReactTable",rt],["@tabler/icons","TablerIcons",nt],["@chakra-ui/react","ChakraUI",et],["@tanstack/react-table","TanstackReactTable",tt]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:je});var ot=b(require("@refinedev/core")),at=b(require("@refinedev/chakra-ui")),st=b(require("@chakra-ui/react")),it=b(require("@refinedev/react-hook-form")),ct=b(require("react-hook-form"));var Ke=({resource:e,fields:r,isCustomPage:a})=>{var $;let n=z(($=e.label)!=null?$:e.name,"create"),u=[["Create","@refinedev/chakra-ui"],["FormControl","@chakra-ui/react"],["FormLabel","@chakra-ui/react"],["FormErrorMessage","@chakra-ui/react"],["useForm","@refinedev/react-hook-form"]],m=r.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{if((c==null?void 0:c.relation)&&!c.fieldable&&c.resource)return u.push(["useSelect","@refinedev/core"]),`
                const { options: ${A(c.key,"Options")} } =
                useSelect({
                    resource: "${c.resource.name}",
                    ${ue(c)}
                });
            `}).filter(Boolean),k=c=>{if(c.relation&&c.resource){u.push(["useSelect","@refinedev/core"]),u.push(["Select","@chakra-ui/react"]);let H=A(c.key,"Options");return g`
            <FormControl mb="3" isInvalid={!!errors?.${B(c.key,void 0)}}>
                <FormLabel>${h(c.key)}</FormLabel>
                <Select
                    placeholder="Select ${U(c.resource.name)}"
                    {...register("${B(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${H}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${l("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},d=c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext")return ce(c.key)||(u.push(["Input","@chakra-ui/react"]),c.multiple)?void 0:g`
                <FormControl mb="3" isInvalid={!!${l("(errors as any)",c.key,c.accessor,!1)}}>
                    <FormLabel>${h(c.key)}</FormLabel>
                    <Input
                        ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                        {...register("${B(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                            ${c.type==="number"?"valueAsNumber: true,":""}
                        })}
                    />
                    <FormErrorMessage>
                        {${l("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `},I=c=>{if(c.type==="boolean")return u.push(["Checkbox","@chakra-ui/react"]),c.multiple?void 0:g`
                <FormControl mb="3" isInvalid={!!${l("errors",c.key,c.accessor,!1)}}>
                    <FormLabel>${h(c.key)}</FormLabel>
                    <Checkbox
                        {...register("${B(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${l("errors",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `},C=c=>{if(c.type==="date"){let H=d(c);return`
                {/* 
                    DatePicker component is not included in "@refinedev/chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${H!=null?H:""}
                `}},v=r.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return d(c);case"date":return C(c);case"boolean":return I(c);case"relation":return k(c);default:return}});return K(u),g`
    ${j(u)}
    
    export const ${n} = () => {
        const {
            refineCore: { formLoading },
            saveButtonProps,
            register,
            formState: { errors },
        } = useForm(
            ${a?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${m}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${v.join("")}
            </Create>
        );
    };
    `},ke=q({type:"create",additionalScope:[["@refinedev/core","RefineCore",ot],["@refinedev/chakra-ui","RefineChakraUI",at],["@refinedev/react-hook-form","RefineReactHookForm",it],["@chakra-ui/react","ChakraUI",st],["react-hook-form","ReactHookForm",ct]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:Ke});var ut=b(require("@refinedev/core")),mt=b(require("@refinedev/chakra-ui")),pt=b(require("@chakra-ui/react")),lt=b(require("@refinedev/react-hook-form")),dt=b(require("react-hook-form"));var _e=({resource:e,fields:r,isCustomPage:a,id:n})=>{var H,p;let u=z((H=e.label)!=null?H:e.name,"edit"),s=A((p=e.label)!=null?p:e.name,"Data"),m=[["React","react",!0],["Edit","@refinedev/chakra-ui"],["FormControl","@chakra-ui/react"],["FormLabel","@chakra-ui/react"],["FormErrorMessage","@chakra-ui/react"],["useForm","@refinedev/react-hook-form"]],d=r.filter(i=>(i==null?void 0:i.relation)&&!(i!=null&&i.fieldable)&&(i==null?void 0:i.resource)).filter(Boolean).map(i=>{if((i==null?void 0:i.relation)&&!i.fieldable&&i.resource){m.push(["useSelect","@refinedev/core"]);let R=l(s,i.key,i.accessor,!1);return i.multiple&&i.accessor&&(R=`${l(s,i.key)}?.map((item: any) => ${l("item",void 0,i.accessor)})`),`
                const { options: ${A(i.key,"Options")} } =
                useSelect({
                    resource: "${i.resource.name}",
                    defaultValue: ${R},
                    ${ue(i)}
                });

                React.useEffect(() => {
                    resetField("${B(i.key,void 0,i.accessor)}");
                }, [${A(i.key,"Options")}]);
            `}}).filter(Boolean),I=i=>{if(i.relation&&i.resource){m.push(["useSelect","@refinedev/core"]),m.push(["Select","@chakra-ui/react"]);let R=A(i.key,"Options");return g`
            <FormControl mb="3" isInvalid={!!errors?.${B(i.key,void 0)}}>
                <FormLabel>${h(i.key)}</FormLabel>
                <Select
                    placeholder="Select ${U(i.resource.name)}"
                    {...register("${B(i.key,void 0,i.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${R}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${l("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},C=i=>{if(i.type==="text"||i.type==="url"||i.type==="email"||i.type==="number"||i.type==="date"||i.type==="richtext"){if(m.push(["Input","@chakra-ui/react"]),i.multiple){let R=B(i.key,"${index}",i.accessor),F=l(l("(errors as any)",i.key,void 0,!1)+"?.[index]",void 0,i.accessor);return`
                    <>
                        {${l(s,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${F}}>
                                <FormLabel>${h(i.key)} #{index + 1}</FormLabel>
                                <Input
                                    {...register(\`${R}\`, {
                                        required: "This field is required",
                                        ${i.type==="number"?"valueAsNumber: true,":""}
                                    })}
                                />
                                <FormErrorMessage>
                                    {${l(F,"message")} as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return g`
                <FormControl mb="3" isInvalid={!!${l("(errors as any)",i.key,i.accessor,!1)}}>
                    <FormLabel>${h(i.key)}</FormLabel>
                    <Input
                        ${ce(i.key)?"disabled":""}
                        ${i.type!=="date"&&i.type!=="richtext"?`type="${i.type}"`:""}
                        {...register("${B(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                            ${i.type==="number"?"valueAsNumber: true,":""}
                        })}
                    />
                    <FormErrorMessage>
                        {${l("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `}},v=i=>{if(i.type==="boolean"){if(m.push(["Checkbox","@chakra-ui/react"]),i.multiple){let R=B(i.key,void 0,i.accessor),F=l("(errors as any)",i.key,void 0,!1)+"?.[index]";return`
                    <>
                        {${l(s,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${F}}>
                                <FormLabel>${h(i.key)} #{index + 1}</FormLabel>
                                <Checkbox
                                    {...register(\`${R}.\${index}\`, {
                                        required: "This field is required",
                                    })}
                                />
                                <FormErrorMessage>
                                    {${F}?.message as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return g`
                <FormControl mb="3" isInvalid={!!${l("errors",i.key,i.accessor,!1)}}>
                    <FormLabel>${h(i.key)}</FormLabel>
                    <Checkbox
                        {...register("${B(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${l("errors",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `}},$=i=>{if(i.type==="date")return`
                {/* 
                    DatePicker component is not included in "@refinedev/chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${C(i)}
                `},c=r.map(i=>{switch(i==null?void 0:i.type){case"text":case"number":case"email":case"url":case"richtext":return C(i);case"date":return $(i);case"boolean":return v(i);case"relation":return I(i);default:return}});return K(m),g`
    ${j(m)}
    
    export const ${u} = () => {
        const {
            refineCore: { formLoading, queryResult },
            saveButtonProps,
            register,
            resetField,
            formState: { errors },
        } = useForm(
            ${a?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${n},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${s} = queryResult?.data?.data;
    
        ${d}

        return (
            <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${c.join("")}
            </Edit>
        );
    };
    `},Ie=q({type:"edit",additionalScope:[["@refinedev/core","RefineCore",ut],["@refinedev/chakra-ui","RefineChakraUI",mt],["@refinedev/react-hook-form","RefineReactHookForm",lt],["@chakra-ui/react","ChakraUI",pt],["react-hook-form","ReactHookForm",dt]],codeViewerComponent:X,loadingComponent:Z,errorComponent:G,renderer:_e});var ft=({action:e,id:r,...a})=>{let{action:n,id:u}=(0,Rr.useResource)();switch(e!=null?e:n){case"show":return me.default.createElement(ye,{...a,id:r!=null?r:u});case"create":return me.default.createElement(ke,{...a,id:r!=null?r:u});case"edit":return me.default.createElement(Ie,{...a,id:r!=null?r:u});default:return me.default.createElement(he,{...a,id:r!=null?r:u})}};
//# sourceMappingURL=chakra-ui.js.map