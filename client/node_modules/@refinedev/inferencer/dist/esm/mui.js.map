{"version":3,"sources":["../../src/inferencers/mui/index.tsx","../../src/inferencers/mui/show.tsx","../../src/create-inferencer/index.tsx","../../src/utilities/get-fieldable-keys/index.ts","../../src/utilities/pick-data-provider/index.tsx","../../src/utilities/pick-inferred-field/index.ts","../../src/utilities/prettier-format/index.ts","../../src/utilities/pretty-spaces/index.ts","../../src/field-inferencers/relation.ts","../../src/utilities/remove-relation-suffix/index.ts","../../src/utilities/pretty-string/index.ts","../../src/utilities/replace-exports/index.ts","../../src/utilities/replace-imports/index.ts","../../src/utilities/resource-from-inferred/index.ts","../../src/utilities/component-name/index.ts","../../src/utilities/jsx/index.ts","../../src/utilities/prepare-live-code/index.ts","../../src/utilities/remove-hidden-code/index.ts","../../src/utilities/accessor/index.ts","../../src/utilities/print-imports/index.ts","../../src/utilities/to-singular/index.ts","../../src/utilities/to-plural/index.ts","../../src/utilities/is-id-key/index.ts","../../src/utilities/no-op/index.ts","../../src/utilities/get-variable-name/index.ts","../../src/compose-inferencers/index.ts","../../src/compose-transformers/index.ts","../../src/field-inferencers/array.ts","../../src/field-inferencers/boolean.ts","../../src/field-inferencers/date.ts","../../src/field-inferencers/email.ts","../../src/field-inferencers/image.ts","../../src/field-inferencers/nullish.ts","../../src/field-inferencers/number.ts","../../src/field-inferencers/object.ts","../../src/field-inferencers/richtext.ts","../../src/field-inferencers/text.ts","../../src/field-inferencers/url.ts","../../src/field-inferencers/index.ts","../../src/field-transformers/basic-to-relation.ts","../../src/field-transformers/image-by-key.ts","../../src/field-transformers/relation-by-resource.ts","../../src/field-transformers/relation-to-fieldable.ts","../../src/field-transformers/index.ts","../../src/components/code-highlight/index.tsx","../../src/components/live/index.tsx","../../src/use-infer-fetch/index.tsx","../../src/use-relation-fetch/index.ts","../../src/inferencers/mui/error.tsx","../../src/inferencers/mui/loading.tsx","../../src/inferencers/mui/code-viewer.tsx","../../src/inferencers/mui/list.tsx","../../src/inferencers/mui/create.tsx","../../src/inferencers/mui/edit.tsx"],"sourcesContent":["import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\n\nimport { ShowInferencer } from \"./show\";\nimport { ListInferencer } from \"./list\";\nimport { CreateInferencer } from \"./create\";\nimport { EditInferencer } from \"./edit\";\n\nimport type { InferencerComponentProps } from \"../../types\";\n\nconst MuiInferencer: React.FC<InferencerComponentProps> = ({\n    action: actionFromProps,\n    id: idFromProps,\n    ...props\n}) => {\n    const { action, id } = useResource();\n\n    switch (actionFromProps ?? action) {\n        case \"show\":\n            return <ShowInferencer {...props} id={idFromProps ?? id} />;\n        case \"create\":\n            return <CreateInferencer {...props} id={idFromProps ?? id} />;\n        case \"edit\":\n            return <EditInferencer {...props} id={idFromProps ?? id} />;\n        default:\n            return <ListInferencer {...props} id={idFromProps ?? id} />;\n    }\n};\n\nexport { MuiInferencer };\nexport {\n    ShowInferencer as MuiShowInferencer,\n    renderer as MuiShowRenderer,\n} from \"./show\";\nexport {\n    EditInferencer as MuiEditInferencer,\n    renderer as MuiEditRenderer,\n} from \"./edit\";\nexport {\n    ListInferencer as MuiListInferencer,\n    renderer as MuiListRenderer,\n} from \"./list\";\nexport {\n    CreateInferencer as MuiCreateInferencer,\n    renderer as MuiCreateRenderer,\n} from \"./create\";\nexport * from \"../../types\";\n","import * as RefineMui from \"@refinedev/mui\";\nimport * as EmotionReact from \"@emotion/react\";\nimport * as EmotionStyled from \"@emotion/styled\";\nimport * as MuiLab from \"@mui/lab\";\nimport * as MuiMaterial from \"@mui/material\";\nimport * as MuiXDataGrid from \"@mui/x-data-grid\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    noOp,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\n\n/**\n * a renderer function for show page in Material UI\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n    id,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"show\",\n    );\n    const recordName = \"record\";\n    const imports: Array<ImportElement> = [\n        [\"useShow\", \"@refinedev/core\"],\n        [\"Show\", \"@refinedev/mui\"],\n        [\"Typography\", \"@mui/material\"],\n        [\"Stack\", \"@mui/material\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                if (field.multiple) {\n                    imports.push([\"useMany\", \"@refinedev/core\"]);\n\n                    let ids = accessor(recordName, field.key);\n\n                    if (field.accessor) {\n                        ids = `${accessor(\n                            recordName,\n                            field.key,\n                        )}?.map((item: any) => ${accessor(\n                            \"item\",\n                            undefined,\n                            field.accessor,\n                        )})`;\n                    }\n\n                    return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${ids} || [],\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                });\n                `;\n                }\n\n                imports.push([\"useOne\", \"@refinedev/core\"]);\n\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useOne({\n                    resource: \"${field.resource.name}\",\n                    id: ${accessor(\n                        recordName,\n                        field.key,\n                        field.accessor,\n                        false,\n                    )} || \"\",\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const variableName = getVariableName(field.key, \"Data\");\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                {${variableIsLoading} ? (\n                    <>\n                        Loading...\n                    </>\n                    ) : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `Not Handled.`;\n                                } else {\n                                    const mapItemName = getVariableName(\n                                        field.key,\n                                    );\n                                    const val = accessor(\n                                        mapItemName,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                    );\n                                    return `\n                                        <Stack direction=\"row\" spacing={1}>\n                                            {${variableName}?.data?.map((${mapItemName}: any) => (\n                                                <TagField key={${val}} value={${val}} />\n                                            ))}\n                                        </Stack>\n                                    `;\n                                }\n                            } else {\n                                return `Not Handled.`;\n                            }\n                        } else {\n                            return `not-handled - relation with multiple but no resource`;\n                        }\n                    })()}\n                    </>\n                )}\n                `;\n            }\n\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n\n                {${variableIsLoading} ? (\n                    <>Loading...</>\n                ) : (\n                    <>\n                    ${(() => {\n                        if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                                if (\n                                    Array.isArray(field.relationInfer.accessor)\n                                ) {\n                                    return `{${accessor(\n                                        `${variableName}?.data`,\n                                        undefined,\n                                        field.relationInfer.accessor,\n                                        ' + \" \" + ',\n                                    )}}`;\n                                } else {\n                                    return `{${variableName}?.data?.${field.relationInfer.accessor}}`;\n                                }\n                            } else {\n                                return `{${variableName}?.data}`;\n                            }\n                        } else {\n                            return `{${variableName}?.data?.id}`;\n                        }\n                    })()}\n                    </>\n                )}\n                `;\n        }\n        return undefined;\n    };\n\n    const textFields = (field: InferField) => {\n        if (field.type === \"text\") {\n            imports.push([\"TextFieldComponent as TextField\", \"@refinedev/mui\"]);\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <Stack direction=\"row\" spacing={1}>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n                </Stack>\n            `;\n            }\n\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <TextField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <Stack direction=\"row\" spacing={1}>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <img style={{ maxWidth: 200, width: \"100%\", height: 200 }} src={${val}} key={${val}} />\n                ))}\n                </Stack>\n            `;\n            }\n\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <img style={{ maxWidth: 200, width: \"100%\", height: 200 }} src={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n                `;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push([\"EmailField\", \"@refinedev/mui\"]);\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <Stack direction=\"row\" spacing={1}>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n                </Stack>\n            `;\n            }\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <EmailField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push([\"UrlField\", \"@refinedev/mui\"]);\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <Stack direction=\"row\" spacing={1}>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n                </Stack>\n            `;\n            }\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <UrlField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push([\"BooleanField\", \"@refinedev/mui\"]);\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <Stack direction=\"row\" spacing={1}>\n                {${accessor(\n                    recordName,\n                    field.key,\n                )}?.map((item: any, index: number) => (\n                    <TagField value={${val}} key={index} />\n                ))}\n                </Stack>\n            `;\n            }\n\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <BooleanField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" && \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/mui\"]);\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <Stack direction=\"row\" spacing={1}>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <DateField value={${val}} key={${val}} />\n                ))}\n                </Stack>\n            `;\n            }\n\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <DateField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    \" + ' ' + \",\n                )}} />\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/mui\"]);\n\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <MarkdownField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )}} />\n            `;\n        }\n\n        return undefined;\n    };\n\n    const numberFields = (field: InferField) => {\n        if (field.type === \"number\") {\n            imports.push([\"NumberField\", \"@refinedev/mui\"]);\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor);\n\n                return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <Stack direction=\"row\" spacing={1}>\n                {${accessor(recordName, field.key)}?.map((item: any) => (\n                    <TagField value={${val}} key={${val}} />\n                ))}\n                </Stack>\n            `;\n            }\n\n            return jsx`\n                <Typography variant=\"body1\" fontWeight=\"bold\">\n                    ${prettyString(field.key)}\n                </Typography>\n                <NumberField value={${accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    ' + \" \" + ',\n                )} ?? \"\"} />\n            `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n                return textFields(field);\n            case \"number\":\n                return numberFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n\n    export const ${COMPONENT_NAME} = () => {\n        const { queryResult } = useShow(${\n            isCustomPage\n                ? `{ \n                    resource: \"${resource.name}\", \n                    id: ${id}\n                }`\n                : \"\"\n        });\n        const { data, isLoading } = queryResult;\n    \n        const ${recordName} = data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <Show isLoading={isLoading}>\n                <Stack gap={1}>\n                    ${renderedFields.join(\"\")}\n                </Stack>\n            </Show>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ShowInferencer: InferencerResultComponent = createInferencer({\n    type: \"show\",\n    additionalScope: [\n        [\"@refinedev/mui\", \"RefineMui\", RefineMui],\n        [\"@emotion/react\", \"EmotionReact\", EmotionReact],\n        [\"@emotion/styled\", \"EmotionStyled\", EmotionStyled],\n        [\"@mui/lab\", \"MuiLab\", MuiLab],\n        [\"@mui/material\", \"MuiMaterial\", MuiMaterial],\n        [\"@mui/x-data-grid\", \"MuiXDataGrid\", MuiXDataGrid],\n    ],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\n\nimport {\n    CreateInferencer,\n    InferencerComponentProps,\n    InferencerResultComponent,\n    InferField,\n} from \"@/types\";\n\nimport { composeInferencers } from \"@/compose-inferencers\";\nimport { composeTransformers } from \"@/compose-transformers\";\n\nimport { defaultElements } from \"@/field-inferencers\";\nimport { defaultTransformers } from \"@/field-transformers\";\nimport { LiveComponent } from \"@/components\";\nimport { useInferFetch } from \"@/use-infer-fetch\";\nimport { useRelationFetch } from \"@/use-relation-fetch\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"@/utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@refinedev/core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createInferencer: CreateInferencer = ({\n    type,\n    additionalScope = [],\n    customElements = [],\n    fieldTransformers = [],\n    renderer,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    codeViewerComponent: CodeViewerComponent,\n}) => {\n    const infer = composeInferencers([...defaultElements, ...customElements]);\n    const transform = composeTransformers([\n        ...defaultTransformers,\n        ...fieldTransformers,\n    ]);\n\n    const Inferencer = ({\n        resourceName,\n        fieldTransformer,\n        id,\n    }: {\n        resourceName?: string;\n        fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n        id?: string | number;\n    }) => {\n        const { resource, resources } = useResource(resourceName);\n\n        const { resource: resourceFromURL } = useResource();\n\n        const {\n            data: record,\n            loading: recordLoading,\n            initial: isInitialLoad,\n            error: inferError,\n        } = useInferFetch(type, resourceName ?? resource?.name, id);\n\n        const rawResults: InferField[] = React.useMemo(() => {\n            if (record) {\n                const inferred = Object.keys(record)\n                    .map((key) => {\n                        const value = record[key];\n\n                        const inferResult = infer(key, value, record, infer);\n\n                        return inferResult;\n                    })\n                    .filter(Boolean);\n\n                if (resource) {\n                    const transformed = transform(\n                        inferred as InferField[],\n                        resources,\n                        resource,\n                        record,\n                        infer,\n                    );\n\n                    const customTransformedFields = fieldTransformer\n                        ? transformed.flatMap((field) => {\n                              const result = fieldTransformer(field);\n\n                              return result ? [result] : [];\n                          })\n                        : transformed;\n\n                    return customTransformedFields;\n                }\n\n                return [];\n            }\n\n            return [];\n        }, [record, resources, resource, fieldTransformer]);\n\n        const {\n            fields: results,\n            loading: relationLoading,\n            // initial: relationInitial,\n        } = useRelationFetch({\n            record,\n            fields: rawResults,\n            infer,\n        });\n\n        const code = React.useMemo(() => {\n            if (\n                !recordLoading &&\n                !relationLoading &&\n                !isInitialLoad &&\n                resource\n            ) {\n                return renderer({\n                    resource,\n                    resources,\n                    fields: results,\n                    infer,\n                    isCustomPage: resource.name !== resourceFromURL?.name,\n                    id,\n                });\n            }\n            return \"\";\n        }, [resource, resources, results, recordLoading, relationLoading]);\n\n        return (\n            <>\n                {LoadingComponent && (recordLoading || relationLoading) && (\n                    <LoadingComponent />\n                )}\n                {!recordLoading && !relationLoading && (\n                    <>\n                        <LiveComponent\n                            fetchError={\n                                !recordLoading && inferError\n                                    ? inferError\n                                    : !recordLoading &&\n                                      !isInitialLoad &&\n                                      !record\n                            }\n                            code={prepareLiveCode(\n                                code,\n                                componentName(\n                                    resource?.meta?.label ??\n                                        resource?.options?.label ??\n                                        resource?.label ??\n                                        resource?.name ??\n                                        \"Resource\",\n                                    type,\n                                ),\n                            )}\n                            errorComponent={ErrorComponent}\n                            additionalScope={additionalScope}\n                        />\n                        {CodeViewerComponent && (\n                            <CodeViewerComponent\n                                code={removeHiddenCode(code)}\n                                loading={recordLoading || relationLoading}\n                            />\n                        )}\n                    </>\n                )}\n            </>\n        );\n    };\n\n    const InferencerComponent: InferencerResultComponent = ({\n        name,\n        resource,\n        fieldTransformer,\n        id,\n    }) => {\n        return (\n            <Inferencer\n                fieldTransformer={fieldTransformer}\n                resourceName={resource ?? name}\n                key={resource ?? name}\n                id={id}\n            />\n        );\n    };\n\n    return InferencerComponent;\n};\n","const urlLikeKeyRegexp = /(image|photo|avatar|url|logo|cover|thumbnail|icon)/i;\n\n/**\n * Returns a list of keys that are likely to be fieldable.\n * @example getFieldableKeys(\"user\", { id: 1, name: \"John\" }) === \"name\"\n */\nexport const getFieldableKeys = (\n    key: string,\n    data: Record<string, unknown>,\n): string | string[] | undefined => {\n    const fieldableProperties = [\n        \"name\",\n        \"label\",\n        \"title\",\n        \"count\",\n        \"content\",\n        \"username\",\n        \"nickname\",\n        \"login\",\n        \"firstName\",\n        \"lastName\",\n        \"url\",\n    ];\n\n    if (urlLikeKeyRegexp.test(key)) {\n        fieldableProperties.unshift(\"url\");\n    }\n\n    const firstAvailable = fieldableProperties.find(\n        (fkey) => fkey in data && !!data[fkey],\n    );\n\n    if (firstAvailable) {\n        if (firstAvailable === \"firstName\" && \"lastName\" in data) {\n            return [\"firstName\", \"lastName\"];\n        }\n\n        return firstAvailable;\n    }\n\n    return undefined;\n};\n","import { IResourceItem } from \"@refinedev/core\";\nimport { pickNotDeprecated } from \"@refinedev/core\";\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n */\nexport function pickDataProvider(\n    resourceName?: string,\n    dataProviderName?: string,\n    resources?: IResourceItem[],\n) {\n    if (dataProviderName) {\n        return dataProviderName;\n    }\n\n    const resource = resources?.find((item) => item.name === resourceName);\n\n    const meta = pickNotDeprecated(resource?.meta, resource?.options);\n    if (meta?.dataProviderName) {\n        return meta.dataProviderName;\n    }\n\n    return \"default\";\n}\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n * This is a simpler version of the above function which works with the resource item instead of the resource name and additional arguments.\n */\nexport const dataProviderFromResource = (resource?: IResourceItem) => {\n    return resource?.options?.dataProviderName;\n};\n","import { InferField } from \"@/types\";\n\n/**\n * Each field inferencer will run with every property of a record and output a result.\n * In these outputs, one with the highest priority will be picked as the inferred field.\n */\nexport const pickInferredField = (\n    inferredFields: Array<InferField | null | false>,\n): InferField | null => {\n    // filter out null and false values and sort by priority then return the first one\n    // priority is a number, the higher the number the higher the priority\n    // if there is no priority, it will be 0\n    const field = (\n        [...inferredFields].filter(Boolean) as Array<InferField>\n    ).sort((a, b) => (b.priority || 0) - (a.priority || 0))[0];\n\n    if (!field) {\n        return null;\n    }\n\n    return field;\n};\n","import prettier from \"prettier/standalone\";\nimport tsParser from \"prettier/parser-typescript\";\n\n/**\n * Standalone prettier formatter with typescript parser\n * to format the generated code.\n */\nexport const prettierFormat = (code: string) => {\n    try {\n        const formatted = prettier.format(code, {\n            parser: \"typescript\",\n            plugins: [tsParser],\n            arrowParens: \"always\",\n            trailingComma: \"all\",\n            semi: true,\n            tabWidth: 4,\n            printWidth: 80,\n        });\n\n        return formatted;\n    } catch (error) {\n        console.warn(\"Formatting error in inferencer\", error);\n        return code;\n    }\n};\n","/**\n * This helper removes the recurring spaces from the code.\n */\nexport const prettySpaces = (content: string): string => {\n    return content.replace(/ {2,}/g, \" \").replace(/\\n{2,}/g, \"\\n\");\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const relationRegexp = /(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\\[\\])?$/;\n\nexport const relationInfer: FieldInferencer = (key, value) => {\n    const isRelation = relationRegexp.test(key);\n    const isBasicValue = typeof value === \"string\" || typeof value === \"number\";\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if ((isRelation && isBasicValue) || (isRelation && isBasicArray)) {\n        return {\n            key,\n            relation: true,\n            multiple: isBasicArray ? true : false,\n            type: \"relation\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { relationRegexp } from \"@/field-inferencers/relation\";\n\n/**\n * Removes the relation suffix from a string.\n * @example removeRelationSuffix(\"category_id\") === \"category\"\n */\nexport const removeRelationSuffix = (key: string) => {\n    return key.replace(relationRegexp, \"\");\n};\n","import { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * This helper will prettify the string.\n */\nexport const prettyString = (str: string) => {\n    const clean = removeRelationSuffix(str);\n    // Convert camelCase to camel Case\n    const camelCase = clean.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n    // Convert snake_case to snake case\n    const snakeCase = camelCase.replace(/_/g, \" \");\n    // Convert kebab-case to kebab case\n    const kebabCase = snakeCase.replace(/-/g, \" \");\n    // Capitalize the string\n    const capitalized = kebabCase\n        .split(\" \")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n\n    return capitalized;\n};\n","/**\n * `react-live` does not support `export` statements in the code.\n * This function will remove the `export` statements from the code.\n */\nexport const replaceExports = (code: string) => {\n    // remove export statements from the code but keep the variables\n    const newCode = code.replace(\n        /export\\s+(const|let|var|type|interface|function|class)\\s+(\\w+)\\s*(=|:)\\s*/g,\n        \"$1 $2 = \",\n    );\n\n    // remove default exports, check line by line, lines can be indented so ignore the tabs and spaces at the beginning\n    const lines = newCode.split(\"\\n\");\n    const newLines = lines.filter(\n        (line) => !line.trim().startsWith(\"export default\"),\n    );\n\n    return newLines.join(\"\\n\");\n};\n","import { prettySpaces } from \"../pretty-spaces\";\n\nconst packageRegex =\n    /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst sideEffectRegex = /import[ \\n\\t](?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\n/**\n * This function will replace the imports in the code since `react-live` does not support `import` statements.\n * `modules` is an object with keys as `package name` and values as `variable name`.\n */\nexport const replaceImports = (\n    content: string,\n    modules: Record<string, string> = {},\n): string => {\n    const matches = content.matchAll(packageRegex);\n\n    const imports = new Set();\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    for (const match of matches) {\n        const [, defaultImport, namedImports, namespaceImport, packageName] =\n            match;\n\n        if (packageName in modules) {\n            const importName = modules[packageName];\n\n            /**\n             * React and its exports are already available in the scope of the code.\n             * Restructuring them in import statements will cause errors.\n             * To avoid that, we are not replacing the import statements for React.\n             * This way, generated code can have \"react\" imports without any errors.\n             */\n            if (packageName === \"react\") {\n                continue;\n            }\n\n            if (defaultImport) {\n                imports.add(\n                    `const { default: ${defaultImport} } = ${importName};`,\n                );\n            }\n\n            if (namedImports) {\n                imports.add(\n                    `const${namedImports.replace(\n                        nameChangeRegex,\n                        `$1: $3$4`,\n                    )} = ${importName};`,\n                );\n            }\n\n            if (namespaceImport) {\n                imports.add(`const ${namespaceImport} = ${importName};`);\n            }\n        }\n    }\n\n    return prettySpaces(`\n    ${Array.from(imports).join(\"\\n\")}\n    ${content.replace(packageRegex, \"\").replace(sideEffectRegex, \"\")}\n    `);\n};\n","import pluralize from \"pluralize\";\nimport { IResourceItem } from \"@refinedev/core\";\n\nimport { InferField } from \"@/types\";\n\nimport { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * Checks if the given property can be relation by checking the existing resources.\n */\nexport const resourceFromInferred = (\n    field: InferField | false | null,\n    resources: IResourceItem[],\n): IResourceItem | undefined => {\n    if (!field) {\n        return undefined;\n    }\n\n    const resource = resources.find((el) => {\n        const stripped = removeRelationSuffix(field.key);\n\n        return (\n            el.name === stripped ||\n            el.name ===\n                (pluralize.isPlural(stripped)\n                    ? stripped\n                    : pluralize.plural(stripped)) ||\n            el.name ===\n                (pluralize.isSingular(stripped)\n                    ? stripped\n                    : pluralize.singular(stripped))\n        );\n    });\n\n    return resource;\n};\n","import pluralize from \"pluralize\";\nimport { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the component name based on the resource name and inferencer type.\n * @example componentName(\"users\", \"list\") === \"UserList\"\n */\nexport const componentName = (\n    resourceName: string,\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    fallbackResourceName = \"Inferred\",\n) => {\n    // replace all non-alphanumeric characters with a space\n    const sanitized = resourceName.replace(/[^a-zA-Z0-9]/g, \" \");\n    // convert to singular\n    const singular = pluralize.singular(sanitized);\n    // prettify the string without spaces\n    const prettified = prettyString(singular).replace(/ /g, \"\");\n    // if prettified is empty, return the fallbackResourceName\n    const resourceComponentName = prettified || fallbackResourceName;\n    // get pretty type name\n    const prettyType = type.charAt(0).toUpperCase() + type.slice(1);\n\n    // if resourceName is not starting with an alphabetical character, return Type + resourceName\n    // e.g. \"123users\" => \"List123Users\"\n    if (!/^[a-zA-Z]/.test(resourceComponentName)) {\n        return `${prettyType}${resourceComponentName}`;\n    }\n    // e.g. \"users\" => \"UserList\"\n    return `${resourceComponentName}${prettyType}`;\n};\n","const handleExpression = (expression: unknown) => {\n    if (!expression) {\n        return \"\";\n    }\n\n    if (Array.isArray(expression)) {\n        return expression.join(\"\");\n    }\n\n    if (typeof expression === \"string\") {\n        return expression;\n    }\n\n    if (typeof expression === \"object\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"function\") {\n        return expression.toString();\n    }\n\n    if (typeof expression === \"number\") {\n        return String(expression);\n    }\n\n    if (typeof expression === \"boolean\" && expression) {\n        return \"true\";\n    }\n\n    return expression;\n};\n\n/**\n * This is a hacky helper to allow syntax highlighting to work in the template literals. (`renderer` function in inferencers)\n * Additionally, it parses expressions like jsx does.\n */\nexport const jsx = (\n    strings: TemplateStringsArray,\n    ...expressions: unknown[]\n) => {\n    const parsed = strings.reduce(\n        (result, currentString, i) =>\n            `${result}${currentString}${handleExpression(expressions[i])}`,\n        \"\",\n    );\n\n    return parsed.trim();\n};\n","/**\n * Code will be generated to be ready to copy and paste into a live environment.\n * But, `react-live` with `noInline={true}` will not work with this code and require `render` method to be called with the component.\n * This function will use the component name and the code and append the `render` method to the code.\n */\nexport const prepareLiveCode = (code?: string, componentName?: string) => {\n    return `\n    ${code ?? \"\"}\n    \n    render(typeof ${componentName} !== \"undefined\" ? <${componentName} /> : <></>);\n    `;\n};\n","export const removeHiddenCode = (code?: string) => {\n    // hidden blocks are wrapped in `/* hidden-start */` and `/* hidden-end */`\n    // these blocks can present multiple times in the code\n\n    return code?.replace(\n        /(\\/\\* hidden-start \\*\\/)(.|\\n)*?(\\/\\* hidden-end \\*\\/)/g,\n        \"\",\n    );\n};\n","import { InferField } from \"@/types\";\n\nconst dotAccessableRegex = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nexport const shouldDotAccess = (property: string) => {\n    return dotAccessableRegex.test(property);\n};\n\nfunction accessorSingle(variableName: string, key?: string, accessor?: string) {\n    let base = `${variableName}`;\n\n    if (key) {\n        base += \"?.\";\n        if (shouldDotAccess(key)) {\n            base += key;\n        } else {\n            base += `['${key}']`;\n        }\n    }\n\n    if (accessor) {\n        base += `?.`;\n        if (shouldDotAccess(accessor)) {\n            base += accessor;\n        } else {\n            base += `['${accessor}']`;\n        }\n    }\n\n    return base;\n}\n\nfunction accessorMultiple(variable: string, key?: string, accessor?: string[]) {\n    const all = (accessor ?? []).map((a) => accessorSingle(variable, key, a));\n\n    return all;\n}\n\n/**\n * Returns a string that can be used to access the given field.\n * @example accessor(\"myVar\", \"some\", \"thing\") === \"myVar?.some?.thing\"\n * @example accessor(\"myVar\", \"so-me\", th.ing\") === \"myVar?.['so-me']['th.ing']\"\n */\nexport const accessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n    joiner: string | false = ' + \" \" + ',\n): string => {\n    if (Array.isArray(accessor)) {\n        if (joiner) {\n            return accessorMultiple(variable, key, accessor).join(joiner);\n        } else {\n            return accessorSingle(variable, key, accessor[0]);\n        }\n    } else {\n        return accessorSingle(variable, key, accessor);\n    }\n};\n\nexport const dotAccessor = (\n    variable: string,\n    key?: string,\n    accessor?: string | string[],\n) => {\n    let str = variable;\n\n    if (key) {\n        str += `.${key}`;\n    }\n\n    if (accessor) {\n        if (Array.isArray(accessor)) {\n            str += `.${accessor[0]}`;\n        } else {\n            str += `.${accessor}`;\n        }\n    }\n\n    return str;\n};\n\nexport const getAccessorKey = (field: InferField) => {\n    return Array.isArray(field.accessor) || field.multiple\n        ? `accessorKey: \"${field.key}\"`\n        : field.accessor\n        ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n        : `accessorKey: \"${field.key}\"`;\n};\n","import { ImportElement } from \"@/types\";\n\nexport const printImports = (imports: Array<ImportElement>) => {\n    const byModule = imports.reduce((acc, [element, module, isDefault]) => {\n        if (!acc[module]) {\n            acc[module] = [] as Array<\n                string | [variable: string, isDefault?: boolean]\n            >;\n        }\n\n        if (!acc[module].includes(element)) {\n            if (isDefault) {\n                acc[module].push([element, true]);\n            } else {\n                acc[module].push(element);\n            }\n        }\n\n        return acc;\n    }, {} as Record<string, Array<string | [variable: string, isDefault?: boolean]>>);\n\n    const lines = Object.entries(byModule).map(([module, elements]) => {\n        const defaultImport = elements.find((e) => Array.isArray(e) && e[1]);\n        const named = elements.filter((e) => typeof e === \"string\");\n        const defaultStr = defaultImport ? `${defaultImport[0]}` : \"\";\n        const namedStr = named.length ? `{ ${named.join(\", \")} }` : \"\";\n        return `import ${defaultStr}${\n            defaultStr && namedStr ? \", \" : \"\"\n        }${namedStr} from \"${module}\";`;\n    });\n\n    return lines;\n};\n","import pluralize from \"pluralize\";\n\nexport const toSingular = (str = \"\") => {\n    return pluralize.isSingular(str) ? str : pluralize.singular(str);\n};\n","import pluralize from \"pluralize\";\n\nexport const toPlural = (str = \"\") => {\n    return pluralize.isPlural(str) ? str : pluralize.plural(str);\n};\n","const identifierRegexp = /^id$/i;\n\nexport const isIDKey = (key: string): boolean => identifierRegexp.test(key);\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noOp = (arg1: any) => {};\n","import { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the valid variable name for the given string and the given suffixOrPrefix.\n * @example getVariableName(\"user\", \"data\") === \"usersData\"\n * @example getVariableName(\"1234\", \"data\") === \"data1234\"\n * @example getVariableName(\"users-account\", \"selectProps\") === \"usersAccountSelectProps\"\n */\nexport const getVariableName = (fieldKey: string, suffixOrPrefix = \"\") => {\n    // if fieldKey is number, return with prefix\n    // e.g. (12345, Data) => \"data12345\"\n    if (Number.isInteger(Number(fieldKey))) {\n        const lowerCaseFirstLetter =\n            suffixOrPrefix.charAt(0).toLowerCase() + suffixOrPrefix.slice(1);\n        return lowerCaseFirstLetter + fieldKey;\n    }\n\n    // if fieldKey is start with numbers, replace the numbers with empty string\n    // e.g. 123users => \"users\"\n    const fieldKeyWithoutNumbers = fieldKey.replace(/^\\d+/, \"\");\n\n    // if fieldKeyWithoutNumbers has invalid characters, replace them with \"-\"\n    // e.g. \"users/account\" => \"users-account\"\n    const fieldKeyWithoutInvalidCharacters = fieldKeyWithoutNumbers.replace(\n        /[^a-zA-Z0-9]/g,\n        \"-\",\n    );\n\n    // Convert to PascalCase\n    const prettyPluralVariableName = prettyString(\n        fieldKeyWithoutInvalidCharacters,\n    ).replace(/ /g, \"\");\n\n    const variableName = `${\n        prettyPluralVariableName.charAt(0).toLowerCase() +\n        prettyPluralVariableName.slice(1)\n    }${suffixOrPrefix.charAt(0).toUpperCase() + suffixOrPrefix.slice(1)}`;\n\n    return variableName;\n};\n","import { FieldInferencer } from \"@/types\";\nimport { pickInferredField } from \"@/utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n    inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n    const fieldInferencer: FieldInferencer = (\n        key,\n        value,\n        record,\n        infer = fieldInferencer,\n    ) => {\n        const inferences = inferencers.map((inferencer) =>\n            inferencer(key, value, record, infer),\n        );\n        const picked = pickInferredField(inferences);\n\n        return picked;\n    };\n\n    return fieldInferencer;\n};\n","import { FieldTransformer } from \"@/types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n    transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n    const fieldTransformer: FieldTransformer = (\n        fields,\n        resources,\n        resource,\n        record,\n        infer,\n    ) => {\n        return transformers.reduce((acc, transformer) => {\n            return transformer(acc, resources, resource, record, infer);\n        }, fields);\n    };\n\n    return fieldTransformer;\n};\n","import { FieldInferencer, InferType } from \"@/types\";\n\nexport const arrayInfer: FieldInferencer = (key, value, record, infer) => {\n    const isArray = Array.isArray(value);\n    const isBasicArray =\n        Array.isArray(value) &&\n        value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n    if (isArray) {\n        if (!isBasicArray) {\n            const inferredInnerType = infer(key, value[0], record, infer);\n            if (inferredInnerType) {\n                return {\n                    ...inferredInnerType,\n                    key,\n                    multiple: true,\n                    priority: 1,\n                };\n            } else {\n                return false;\n            }\n        }\n        const basicType = infer(key, value[0], record, infer) || {\n            type: \"string\" as InferType,\n        };\n\n        return {\n            key,\n            multiple: true,\n            priority: 1,\n            type: basicType?.type,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const booleanInfer: FieldInferencer = (key, value) => {\n    const isBoolean = typeof value === \"boolean\";\n\n    if (isBoolean) {\n        return {\n            key,\n            type: \"boolean\",\n        };\n    }\n\n    return false;\n};\n","import dayjs from \"dayjs\";\nimport { FieldInferencer } from \"@/types\";\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nconst dateSeparators = [\"/\", \":\", \"-\", \".\"];\n\nexport const dateInfer: FieldInferencer = (key, value) => {\n    const isDateField =\n        dateSuffixRegexp.test(key) && dayjs(value as string).isValid();\n\n    const isValidDateString =\n        typeof value === \"string\" && dayjs(value).isValid();\n\n    const hasDateSeparator =\n        typeof value === \"string\" &&\n        dateSeparators.some((s) => value.includes(s));\n\n    if (hasDateSeparator && (isDateField || isValidDateString)) {\n        return {\n            key,\n            type: \"date\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nconst emailRegexp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const emailInfer: FieldInferencer = (key, value) => {\n    const isValidEmail = typeof value === \"string\" && emailRegexp.test(value);\n\n    if (isValidEmail) {\n        return {\n            key,\n            type: \"email\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nconst imageRegexp = /\\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i;\n\nexport const imageInfer: FieldInferencer = (key, value) => {\n    const isImageURI = typeof value === \"string\" && imageRegexp.test(value);\n\n    if (isImageURI) {\n        return {\n            key,\n            type: \"image\",\n            priority: 2,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const nullishInfer: FieldInferencer = (key, value) => {\n    const isUndefined = typeof value === \"undefined\";\n    const isNull = value === null;\n\n    if (isUndefined || isNull) {\n        return null;\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const numberInfer: FieldInferencer = (key, value) => {\n    const isNonEmptyString = typeof value === \"string\" && value.length > 0;\n    const isNotNaN = !isNaN(value as number);\n\n    const isNumericString = isNonEmptyString && isNotNaN;\n    const isNumber = typeof value === \"number\";\n\n    const isNumeric = isNumericString || isNumber;\n\n    if (isNumeric) {\n        return {\n            key,\n            type: \"number\",\n        };\n    }\n\n    return false;\n};\n","import { getFieldableKeys } from \"@/utilities\";\nimport { FieldInferencer } from \"@/types\";\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (key, value, record, infer) => {\n    const isNotNull = value !== null;\n    const isNotArray = !Array.isArray(value);\n    const isObject = typeof value === \"object\";\n\n    if (isNotNull && isNotArray && isObject) {\n        const onlyHasId =\n            Object.keys(value).length === 1 &&\n            idPropertyRegexp.test(Object.keys(value)[0]);\n\n        if (onlyHasId) {\n            return {\n                key,\n                type: \"relation\",\n                relation: true,\n                accessor: \"id\",\n                priority: 1,\n            };\n        }\n\n        const fieldableKeys = getFieldableKeys(\n            key,\n            value as Record<string, unknown>,\n        );\n\n        const hasFieldableKeys = fieldableKeys\n            ? fieldableKeys.length > 0\n            : false;\n\n        if (hasFieldableKeys && fieldableKeys) {\n            const innerFieldKey =\n                fieldableKeys && Array.isArray(fieldableKeys)\n                    ? fieldableKeys[0]\n                    : fieldableKeys;\n\n            const innerFieldType = infer(\n                innerFieldKey,\n                (value as Record<string, unknown>)[innerFieldKey],\n                value as Record<string, unknown>,\n                infer,\n            );\n\n            if (innerFieldType) {\n                const accessor = Array.isArray(fieldableKeys)\n                    ? fieldableKeys.map((el) => {\n                          if (innerFieldType.accessor) {\n                              return `${el}.${\n                                  Array.isArray(innerFieldType.accessor)\n                                      ? innerFieldType.accessor[0]\n                                      : innerFieldType.accessor\n                              }`;\n                          } else {\n                              return el;\n                          }\n                      })\n                    : innerFieldType.accessor\n                    ? Array.isArray(innerFieldType.accessor)\n                        ? `${fieldableKeys}.${innerFieldType.accessor[0]}`\n                        : `${fieldableKeys}.${innerFieldType.accessor}`\n                    : fieldableKeys;\n\n                return {\n                    ...innerFieldType,\n                    fieldable: true,\n                    key,\n                    accessor: accessor,\n                    priority: 1,\n                };\n            }\n        }\n\n        return {\n            key,\n            fieldable: false,\n            type: \"object\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n    const isLongText = typeof value === \"string\" && value.length > 100;\n\n    if (isLongText) {\n        return {\n            key,\n            type: \"richtext\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nexport const textInfer: FieldInferencer = (key, value) => {\n    const isText = typeof value === \"string\";\n\n    if (isText) {\n        return {\n            key,\n            type: \"text\",\n        };\n    }\n\n    return false;\n};\n","import { FieldInferencer } from \"@/types\";\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n    const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n    if (isValidURL) {\n        return {\n            key,\n            type: \"url\",\n            priority: 1,\n        };\n    }\n\n    return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n    arrayInfer,\n    booleanInfer,\n    dateInfer,\n    emailInfer,\n    imageInfer,\n    nullishInfer,\n    numberInfer,\n    objectInfer,\n    relationInfer,\n    richtextInfer,\n    textInfer,\n    urlInfer,\n];\n","import { FieldTransformer, InferField } from \"@/types\";\n\nexport const basicToRelation: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (\n            !field.relation &&\n            (field.type === \"text\" ||\n                field.type === \"richtext\" ||\n                field.type === \"number\") &&\n            !field.canRelation\n        ) {\n            // check if value is a valid id (regex)\n            // if multiple, check value by value\n            // take accessor into account (should be single only)\n            // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n            const validUUIdRegex = /^[a-z0-9-]+$/;\n\n            const isValidUUID = (value: unknown) => {\n                return validUUIdRegex.test(`${value}`);\n            };\n\n            const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n            const singleOrNoAccessor =\n                !field.accessor || typeof field.accessor === \"string\";\n\n            // in case of multiple accessors, we can't infer a relation\n            // or if the field is the id field\n            if (!singleOrNoAccessor || !isNotSelf) {\n                return field;\n            }\n\n            const valuesToCheck = field.multiple\n                ? (record[field.key] as unknown[])\n                : [record[field.key]];\n\n            const allValid = valuesToCheck.every((value) => {\n                return isValidUUID(\n                    field.accessor\n                        ? (value as Record<string, unknown>)[\n                              field.accessor as string\n                          ]\n                        : value,\n                );\n            });\n\n            if (allValid) {\n                return {\n                    ...field,\n                    canRelation: true,\n                };\n            }\n\n            return field;\n        }\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"@/types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n            return {\n                ...field,\n                type: \"image\",\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { resourceFromInferred } from \"@/utilities\";\nimport { FieldTransformer, InferField } from \"@/types\";\n\nexport const relationByResource: FieldTransformer = (\n    fields,\n    resources,\n    // resource,\n    // record,\n    // infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        const inferResource = resourceFromInferred(field, resources);\n\n        if (inferResource) {\n            return {\n                ...field,\n                relation: true,\n                type: \"relation\",\n                resource: inferResource,\n            };\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { FieldTransformer, InferField } from \"@/types\";\n\nexport const relationToFieldable: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n) => {\n    const mapped: Array<InferField> = fields.map((field) => {\n        if (field.relation && field.type === \"relation\" && !field.resource) {\n            const value = field.accessor\n                ? (record[field.key] as any)[field.accessor as string]\n                : record[field.key];\n\n            const inferredType = infer(field.key, value, record, infer);\n\n            if (inferredType && inferredType.type !== \"relation\") {\n                return {\n                    ...field,\n                    fieldable: true,\n                    relation: false,\n                    type: inferredType.type,\n                    canRelation: true,\n                };\n            }\n        }\n\n        return field;\n    });\n\n    return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n    imageByKey,\n    relationByResource,\n    relationToFieldable,\n    basicToRelation,\n];\n","import React, { useEffect } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/vsDark\";\n\n/**\n * CodeHighlight component renders the code in a pretty way with `prism-react-renderer` library.\n * By default, code overflowing 50vh will be scrollable; this can be adjusted with the `wrapperProps` prop.\n */\nexport const CodeHighlight: React.FC<{\n    code: string;\n    wrapperProps?: React.ComponentProps<\"div\">;\n}> = ({ code, wrapperProps }) => {\n    useEffect(() => {\n        const styleElement = document.createElement(\"style\");\n        styleElement.appendChild(\n            document.createTextNode(\n                `\n                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}\n                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}\n                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}\n                `,\n            ),\n        );\n        document.getElementById(\"code-highlight\")?.appendChild(styleElement);\n    }, []);\n\n    return (\n        <div\n            id=\"code-highlight\"\n            style={{\n                maxHeight: \"75vh\",\n                height: \"100%\",\n                overflow: \"auto\",\n                backgroundColor: \"rgb(30, 30, 30)\",\n            }}\n            {...(wrapperProps ?? {})}\n        >\n            <Highlight\n                {...defaultProps}\n                theme={theme}\n                code={code}\n                language=\"tsx\"\n            >\n                {({\n                    className,\n                    style,\n                    tokens,\n                    getLineProps,\n                    getTokenProps,\n                }) => (\n                    <pre\n                        className={className}\n                        style={{\n                            ...style,\n                            padding: \"14px 14px 14px 14px\",\n                            margin: \"0\",\n                            width: \"100%\",\n                            boxSizing: \"border-box\",\n                        }}\n                    >\n                        {tokens.map((line, i) => (\n                            <div key={i} {...getLineProps({ line, key: i })}>\n                                {line.map((token, key) => (\n                                    <span\n                                        key={key}\n                                        {...getTokenProps({ token, key })}\n                                    />\n                                ))}\n                            </div>\n                        ))}\n                    </pre>\n                )}\n            </Highlight>\n        </div>\n    );\n};\n","import React from \"react\";\nimport * as RefineCore from \"@refinedev/core\";\n\nimport { LivePreview, LiveProvider, ContextProps } from \"@aliemir/react-live\";\n\nimport { replaceImports, replaceExports } from \"@/utilities\";\nimport { AdditionalScopeType, LiveComponentProps } from \"@/types\";\n\nconst defaultScope: Array<AdditionalScopeType> = [\n    [\"react\", \"React\", React],\n    [\"@refinedev/core\", \"RefineCore\", RefineCore],\n];\n\nconst InferencerLiveContext = React.createContext<ContextProps>(\n    {} as ContextProps,\n);\n\n/**\n * Live Component will render the code with `react-live`.\n * Errors will be handled by `ErrorComponent`.\n */\nexport const LiveComponent: React.FC<LiveComponentProps> = ({\n    fetchError,\n    code,\n    additionalScope,\n    errorComponent: ErrorComponent,\n}) => {\n    const sanitized =\n        (code &&\n            replaceExports(\n                replaceImports(\n                    code,\n                    [...defaultScope, ...(additionalScope ?? [])].reduce(\n                        (\n                            acc,\n                            [\n                                packageName,\n                                variableName,\n                                _module,\n                                ignoreReplacement,\n                            ],\n                        ) => {\n                            if (ignoreReplacement) {\n                                return acc;\n                            }\n                            return {\n                                ...acc,\n                                [packageName]: variableName,\n                            };\n                        },\n                        {},\n                    ),\n                ),\n            )) ??\n        \"\";\n\n    const scope = React.useMemo(() => {\n        return {\n            React,\n            ...React,\n            ...[...defaultScope, ...(additionalScope ?? [])].reduce(\n                (acc, [_packageName, variableName, packageContent]) => {\n                    return {\n                        ...acc,\n                        [variableName]: packageContent,\n                    };\n                },\n                {},\n            ),\n        };\n    }, [additionalScope]);\n\n    const ErrorComponentWithError = React.useMemo(() => {\n        const LiveErrorComponent = () => {\n            const { error } = React.useContext(InferencerLiveContext);\n\n            if (ErrorComponent) {\n                return (\n                    <ErrorComponent\n                        error={\n                            error\n                                ? `<p>An error occured while rendering the generated component.You can check the generated code from the below \"Show Code\" button and fix the error manually.</p>\n                                    <p>If you think this is a bug, please report the issue at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/refinedev/refine/issues\">https://github.com/refinedev/refine/issues</a></p>\n                                    <p>Exception:</p>\n                                    <code>${error}</code>`\n                                : typeof fetchError === \"string\"\n                                ? fetchError\n                                : fetchError\n                                ? `<p>Something went wrong while fetching the resource data.</p>\n                                    <p>To learn more about the Inferencer, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`\n                                : undefined\n                        }\n                    />\n                );\n            }\n\n            return null;\n        };\n\n        return LiveErrorComponent;\n    }, [ErrorComponent, fetchError]);\n\n    return (\n        <LiveProvider\n            Context={InferencerLiveContext}\n            code={sanitized}\n            scope={scope}\n            noInline\n        >\n            {!fetchError && <LivePreview Context={InferencerLiveContext} />}\n            <ErrorComponentWithError />\n        </LiveProvider>\n    );\n};\n","import React from \"react\";\nimport { useDataProvider, useResource, BaseKey } from \"@refinedev/core\";\n\nimport { pickDataProvider, dataProviderFromResource } from \"@/utilities\";\n\n/**\n * This hook will handle the data fetching for the inferencer with `loading` and `initial` states.\n * Data provider functions will be used respectively for the `list`, `show` and `edit` types.\n */\nexport const useInferFetch = (\n    type: \"list\" | \"show\" | \"edit\" | \"create\",\n    resourceNameOrRouteName?: string,\n    idFromProps?: string | number,\n) => {\n    const {\n        resource,\n        id: idFromURL,\n        resources,\n    } = useResource(resourceNameOrRouteName);\n\n    const id = idFromProps ?? idFromURL;\n\n    const dataProvider = useDataProvider();\n\n    const [error, setError] = React.useState<string | undefined>(undefined);\n\n    const [data, setData] = React.useState<Record<string, unknown> | undefined>(\n        undefined,\n    );\n    const [initial, setInitial] = React.useState<boolean>(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (recordItemId: BaseKey | undefined) => {\n            const dataProviderName =\n                dataProviderFromResource(resource) ??\n                pickDataProvider(resource?.name, undefined, resources);\n            const dp = dataProvider(dataProviderName);\n\n            setLoading(true);\n            setError(undefined);\n\n            try {\n                if (type === \"list\" || type === \"create\") {\n                    if (resource) {\n                        const response = await dp.getList({\n                            resource: resource?.name,\n                        });\n                        const r = response.data?.[0];\n\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n                if ((type === \"edit\" || type === \"show\") && recordItemId) {\n                    if (resource) {\n                        const response = await dp.getOne({\n                            resource: resource?.name,\n                            id: recordItemId,\n                        });\n                        const r = response.data;\n                        if (!r) {\n                            setError(\n                                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                            );\n                        }\n                        setData(r);\n                        setTimeout(() => {\n                            setLoading(false);\n                        }, 500);\n                    }\n                }\n            } catch (error) {\n                console.warn(\n                    \"An error occured while fetching the resource data. Please check the error message below:\",\n                    error,\n                );\n                setError(\n                    `<p>Something went wrong while fetching the resource data.</p>\n                    <p>Please check your data provider and API for resource \"${resource?.name}\".</p>\n                    <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n                );\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n        },\n        [type, dataProvider, resource, resources],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (!loading && !data) {\n            resolver(id);\n        }\n    }, [resolver, id]);\n\n    return {\n        data,\n        loading,\n        initial,\n        error,\n    };\n};\n","import React from \"react\";\nimport { useDataProvider } from \"@refinedev/core\";\n\nimport {\n    dataProviderFromResource,\n    removeRelationSuffix,\n    toPlural,\n    toSingular,\n} from \"@/utilities\";\nimport { FieldInferencer, InferField, ResourceInferenceAttempt } from \"@/types\";\nimport { get } from \"lodash\";\n\ntype UseRelationFetchProps = {\n    record?: Record<string, unknown>;\n    fields?: (InferField | null | false)[];\n    infer: FieldInferencer;\n};\n\nexport const useRelationFetch = ({\n    record,\n    fields,\n    infer,\n}: UseRelationFetchProps) => {\n    const dataProvider = useDataProvider();\n\n    const [updatedFields, setUpdatedFields] = React.useState<InferField[]>([]);\n\n    const [initial, setInitial] = React.useState(true);\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    const resolver = React.useCallback(\n        async (allFields: (InferField | false | null)[]) => {\n            console.groupCollapsed(\n                \"@refinedev/inferencer is trying to detect relations\",\n            );\n            const attempts: Array<ResourceInferenceAttempt> = [];\n            setLoading(true);\n            try {\n                const promises = allFields.map(async (field) => {\n                    if (field && (field.relation || field.canRelation)) {\n                        if (record) {\n                            const dataProviderName = dataProviderFromResource(\n                                field.resource,\n                            );\n                            const dp = dataProvider(dataProviderName);\n\n                            const requestId = Array.isArray(field.accessor)\n                                ? undefined\n                                : field.multiple\n                                ? (record[field.key] as Array<unknown>).map(\n                                      (el) => {\n                                          return field.accessor\n                                              ? get(el, field.accessor)\n                                              : el;\n                                      },\n                                  )[0]\n                                : field.accessor\n                                ? get(record[field.key], field.accessor)\n                                : record[field.key];\n\n                            if (requestId && field.resource) {\n                                try {\n                                    const { data } = await dp.getOne({\n                                        resource: field.resource.name,\n                                        id: requestId,\n                                    });\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n\n                                    const relationInfer = infer(\n                                        \"__\",\n                                        data,\n                                        {},\n                                        infer,\n                                    );\n\n                                    return {\n                                        ...field,\n                                        relationInfer,\n                                    };\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: field.resource.name,\n                                        field: field.key,\n                                    });\n                                    return {\n                                        ...field,\n                                        relationInfer: null,\n                                    };\n                                }\n                            }\n\n                            if (requestId) {\n                                let responseData;\n                                let isPlural;\n\n                                try {\n                                    const { data } = await dp.getOne({\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        id: requestId,\n                                    });\n\n                                    attempts.push({\n                                        status: \"success\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    responseData = data;\n                                    isPlural = true;\n                                } catch (error) {\n                                    attempts.push({\n                                        status: \"error\",\n                                        resource: toPlural(\n                                            removeRelationSuffix(field.key),\n                                        ),\n                                        field: field.key,\n                                    });\n\n                                    try {\n                                        const { data } = await dp.getOne({\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            id: requestId,\n                                        });\n\n                                        attempts.push({\n                                            status: \"success\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        responseData = data;\n                                        isPlural = false;\n                                    } catch (error) {\n                                        attempts.push({\n                                            status: \"error\",\n                                            resource: toSingular(\n                                                removeRelationSuffix(field.key),\n                                            ),\n                                            field: field.key,\n                                        });\n\n                                        return {\n                                            ...field,\n                                            relationInfer: null,\n                                        };\n                                    }\n                                }\n\n                                const relationInfer = infer(\n                                    \"__\",\n                                    responseData,\n                                    {},\n                                    infer,\n                                );\n\n                                const resourceNameWithoutRelationSuffix =\n                                    removeRelationSuffix(field.key);\n\n                                return {\n                                    ...field,\n                                    relation: true,\n                                    type: \"relation\",\n                                    resource: {\n                                        name: isPlural\n                                            ? toPlural(\n                                                  resourceNameWithoutRelationSuffix,\n                                              )\n                                            : toSingular(\n                                                  resourceNameWithoutRelationSuffix,\n                                              ),\n                                    },\n                                    fieldable: false,\n                                    canRelation: undefined,\n                                    relationInfer,\n                                };\n                            }\n\n                            return {\n                                ...field,\n                                relationInfer: null,\n                            };\n                        }\n                    }\n                    return field;\n                });\n\n                const results = await Promise.all(promises);\n\n                setUpdatedFields(results.filter((el) => el) as InferField[]);\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            } catch (error) {\n                setTimeout(() => {\n                    setLoading(false);\n                }, 500);\n            }\n            setTimeout(() => {\n                console.log(\n                    `Tried to detect relations with ${\n                        attempts.length\n                    } attempts and succeeded with ${\n                        attempts.filter((el) => el.status === \"success\").length\n                    } attempts.`,\n                );\n                console.groupEnd();\n            }, 500);\n        },\n        [dataProvider, record],\n    );\n\n    React.useEffect(() => {\n        setInitial(false);\n        if (\n            !loading &&\n            fields &&\n            fields.length > 0 &&\n            updatedFields.length === 0\n        ) {\n            resolver(fields);\n        }\n    }, [resolver, loading, fields, resolver]);\n\n    return {\n        fields: updatedFields,\n        loading,\n        initial,\n    };\n};\n","import React from \"react\";\n\nimport { Alert, AlertTitle, Box } from \"@mui/material\";\n\nimport { CreateInferencerConfig } from \"@/types\";\n\nexport const ErrorComponent: CreateInferencerConfig[\"errorComponent\"] = ({\n    error,\n}) => {\n    if (error) {\n        return (\n            <Box\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    minHeight: \"200px\",\n                }}\n            >\n                <Alert severity=\"error\">\n                    <AlertTitle>Error</AlertTitle>\n                    <div dangerouslySetInnerHTML={{ __html: error ?? \"\" }} />\n                </Alert>\n            </Box>\n        );\n    }\n\n    return null;\n};\n","import React from \"react\";\n\nimport { Box, CircularProgress } from \"@mui/material\";\n\nimport { CreateInferencerConfig } from \"@/types\";\n\nexport const LoadingComponent: CreateInferencerConfig[\"loadingComponent\"] =\n    () => {\n        return (\n            <Box\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    minHeight: \"300px\",\n                }}\n            >\n                <CircularProgress size=\"large\" />\n            </Box>\n        );\n    };\n","import React from \"react\";\nimport { Button, Box, Modal, IconButton } from \"@mui/material\";\nimport {\n    IconCode,\n    IconMessageCircle,\n    IconX,\n    IconCopy,\n    IconCheck,\n} from \"@tabler/icons\";\n\nimport { prettierFormat } from \"@/utilities\";\nimport { CreateInferencerConfig } from \"@/types\";\nimport { CodeHighlight } from \"@/components\";\n\nexport const CodeViewerComponent: CreateInferencerConfig[\"codeViewerComponent\"] =\n    ({ code: rawCode, loading }) => {\n        const code = React.useMemo(() => {\n            return prettierFormat(rawCode ?? \"\");\n        }, [rawCode]);\n\n        const inputRef = React.useRef<HTMLTextAreaElement>(null);\n\n        const [visible, setVisible] = React.useState(false);\n        const [isCopied, setIsCopied] = React.useState(false);\n\n        if (loading) {\n            return null;\n        }\n\n        const copyCode = () => {\n            inputRef?.current?.select();\n            inputRef?.current?.setSelectionRange(0, 99999);\n            if (typeof navigator !== \"undefined\") {\n                navigator.clipboard.writeText(inputRef?.current?.value ?? \"\");\n                setIsCopied(true);\n                setTimeout(() => {\n                    setIsCopied(false);\n                }, 1000);\n            }\n        };\n\n        if (code) {\n            return (\n                <>\n                    <Box sx={{ position: \"fixed\", bottom: 12, right: 60 }}>\n                        <Box sx={{ display: \"flex\", gap: 2 }}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => setVisible(true)}\n                                startIcon={<IconCode size={18} />}\n                                sx={{\n                                    whiteSpace: \"nowrap\",\n                                }}\n                            >\n                                Show Code\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                component=\"a\"\n                                target=\"_blank\"\n                                href=\"https://github.com/refinedev/refine/discussions/3046\"\n                                startIcon={<IconMessageCircle size={18} />}\n                                sx={{\n                                    whiteSpace: \"nowrap\",\n                                }}\n                            >\n                                Give Feedback\n                            </Button>\n                        </Box>\n                    </Box>\n                    <div style={{ height: \"50px\" }}></div>\n                    <Modal open={visible} onClose={() => setVisible(false)}>\n                        <Box\n                            sx={{\n                                position: \"absolute\",\n                                maxWidth: \"800px\",\n                                width: \"100%\",\n                                top: \"50%\",\n                                left: \"50%\",\n                                transform: \"translate(-50%, -50%)\",\n                                boxShadow: 24,\n                            }}\n                        >\n                            <IconButton\n                                onClick={() => setVisible(false)}\n                                disableRipple\n                                sx={{\n                                    position: \"absolute\",\n                                    right: 0,\n                                    top: 0,\n                                    height: 56,\n                                    width: 56,\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"center\",\n                                }}\n                            >\n                                <IconX size={18} style={{ color: \"#666b7a\" }} />\n                            </IconButton>\n                            <CodeHighlight code={code} />\n                            <textarea\n                                ref={inputRef}\n                                defaultValue={(code ?? \"\").replace(\n                                    /\\\\n/g,\n                                    \"\\r\\n\",\n                                )}\n                                id=\"code-input\"\n                                style={{ display: \"none\" }}\n                            />\n                            <div\n                                style={{\n                                    position: \"absolute\",\n                                    bottom: 12,\n                                    right: 12,\n                                }}\n                            >\n                                <Button\n                                    key=\"copy\"\n                                    sx={{\n                                        textTransform: \"capitalize\",\n                                        width: 100,\n                                    }}\n                                    startIcon={\n                                        isCopied ? (\n                                            <IconCheck\n                                                size={18}\n                                                style={{ color: \"green\" }}\n                                            />\n                                        ) : (\n                                            <IconCopy size={18} />\n                                        )\n                                    }\n                                    color=\"inherit\"\n                                    variant=\"contained\"\n                                    onClick={copyCode}\n                                >\n                                    {isCopied ? \"Copied\" : \"Copy\"}\n                                </Button>\n                            </div>\n                        </Box>\n                    </Modal>\n                </>\n            );\n        }\n\n        return null;\n    };\n","import * as RefineMui from \"@refinedev/mui\";\nimport * as EmotionReact from \"@emotion/react\";\nimport * as EmotionStyled from \"@emotion/styled\";\nimport * as MuiLab from \"@mui/lab\";\nimport * as MuiMaterial from \"@mui/material\";\nimport * as MuiXDataGrid from \"@mui/x-data-grid\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    noOp,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\n\n/**\n * a renderer function for list page in Material UI\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"list\",\n    );\n    const recordName = \"dataGridProps?.rows\";\n    const imports: Array<ImportElement> = [\n        [\"React\", \"react\", true],\n        [\"useDataGrid\", \"@refinedev/mui\"],\n        [\"DataGrid\", \"@mui/x-data-grid\"],\n        [\"GridColumns\", \"@mui/x-data-grid\"],\n        [\"EditButton\", \"@refinedev/mui\"],\n        [\"ShowButton\", \"@refinedev/mui\"],\n        [\"DeleteButton\", \"@refinedev/mui\"],\n        [\"List\", \"@refinedev/mui\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useMany\", \"@refinedev/core\"]);\n\n                let idsString = \"\";\n\n                if (field.multiple) {\n                    idsString = `[].concat(...(${recordName}?.map((item: any) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []))`;\n                } else {\n                    idsString = `${recordName}?.map((item: any) => ${accessor(\n                        \"item\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}) ?? []`;\n                }\n\n                return `\n                const { data: ${getVariableName(\n                    field.key,\n                    \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${idsString},\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                });\n                `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const relationVariableNames = relationFields\n        ?.map((field) => {\n            if (field && field.resource) {\n                return `${getVariableName(field.key, \"Data\")}?.data`;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            const variableName = `${getVariableName(field.key, \"Data\")}?.data`;\n            const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n            if (Array.isArray(field.accessor)) {\n                // not handled - not possible case\n                return undefined;\n            }\n\n            const loadingCondition = `${variableIsLoading} ? <>Loading...</> : `;\n\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            let renderCell = \"\";\n\n            // if multiple, then map it with tagfield\n            // if not, then just show the value\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                let val = \"item\";\n\n                // for multiple\n                if (field?.relationInfer) {\n                    const valSingle = `${variableName}?.find((resourceItems) => resourceItems.id === ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n                    val = valViewableSingle;\n                }\n\n                renderCell = `\n                renderCell: function render({ value }) {\n                    return ${loadingCondition} (\n                        <>\n                            {${accessor(\n                                \"value\",\n                                undefined,\n                            )}?.map((item: any, index: number) => (\n                                <TagField key={index} value={${val}} />\n                            ))}\n                        </>\n                    )\n                }\n                `;\n            } else {\n                if (field?.relationInfer) {\n                    // for single\n                    const valSingle = `${variableName}?.find((item) => item.id === value)`;\n                    const valViewableSingle = accessor(\n                        valSingle,\n                        undefined,\n                        field?.relationInfer?.accessor,\n                    );\n\n                    renderCell = `\n                    renderCell: function render({ value }) {\n                        return ${loadingCondition} ${valViewableSingle};\n                    }\n                    `;\n                } else {\n                    renderCell = \"\";\n                }\n            }\n\n            return `\n                {\n                    ${fieldProperty},\n                    ${headerProperty},${valueGetterProperty}\n                    minWidth: 300,${renderCell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const imageFields = (field: InferField) => {\n        if (field.type === \"image\") {\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            let renderCell = `\n                renderCell: function render({ value }) {\n                    return (\n                        <img src={${accessor(\n                            \"value\",\n                            undefined,\n                            Array.isArray(field.accessor)\n                                ? field.accessor\n                                : undefined,\n                            \" + \",\n                        )}} style={{ height: \"50px\", maxWidth: \"100px\" }} />\n                    )\n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                renderCell = `\n                    renderCell: function render({ value }) {\n                        return (\n                            <>\n                            {value?.map((item: any, index: number) => (\n                                <img src={${val}} key={index} style={{ height: \"50px\", maxWidth: \"100px\" }} />\n                            ))}\n                            </>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${fieldProperty},\n                    ${headerProperty},${valueGetterProperty}\n                    minWidth: 100,${renderCell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const emailFields = (field: InferField) => {\n        if (field.type === \"email\") {\n            imports.push([\"EmailField\", \"@refinedev/mui\"]);\n\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            let renderCell = `\n            renderCell: function render({ value }) {\n                return (\n                    <EmailField value={${accessor(\n                        \"value\",\n                        undefined,\n                        Array.isArray(field.accessor)\n                            ? field.accessor\n                            : undefined,\n                        \" + \",\n                    )}} />\n                )\n            }\n        `;\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                renderCell = `\n                renderCell: function render({ value }) {\n                    return (\n                        <>\n                        {value?.map((item: any, index: number) => (\n                            <TagField value={${val}} key={index} />\n                        ))}\n                        </>\n                    )\n                }\n            `;\n            }\n\n            return `\n            {\n                ${fieldProperty},\n                ${headerProperty},${valueGetterProperty}\n                minWidth: 250,${renderCell}\n            }\n        `;\n        }\n        return undefined;\n    };\n\n    const urlFields = (field: InferField) => {\n        if (field.type === \"url\") {\n            imports.push([\"UrlField\", \"@refinedev/mui\"]);\n\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            let renderCell = `\n                renderCell: function render({ value }) {\n                    return (\n                        <UrlField value={${accessor(\n                            \"value\",\n                            undefined,\n                            Array.isArray(field.accessor)\n                                ? field.accessor\n                                : undefined,\n                            \" + \",\n                        )}} />\n                    )\n                }\n            `;\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n                renderCell = `\n                    renderCell: function render({ value }) {\n                        return (\n                            <>\n                            {value?.map((item: any, index: any) => (\n                                <TagField value={${val}} key={index} />\n                            ))}\n                            </>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${fieldProperty},\n                    ${headerProperty},${valueGetterProperty}\n                    minWidth: 250,${renderCell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field?.type) {\n            imports.push([\"Checkbox\", \"@refinedev/mui\"]);\n\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            let renderCell = `\n                renderCell: function render({ value }) {\n                    return (\n                        <Checkbox checked={!!${accessor(\n                            \"value\",\n                            undefined,\n                            Array.isArray(field.accessor)\n                                ? field.accessor\n                                : undefined,\n                            \" && \",\n                        )}} />\n                    );\n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\"item\", undefined, field.accessor, \" && \");\n\n                renderCell = `\n                    renderCell: function render({ value }) {\n                        return (\n                            <>\n                            {value?.map((item: any, index: number) => (\n                                <Checkbox checked={!!${val}} key={index} />\n                            ))}\n                            </>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${fieldProperty},\n                    ${headerProperty},${valueGetterProperty}\n                    minWidth: 250,${renderCell}\n                }\n            `;\n        }\n\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            imports.push([\"DateField\", \"@refinedev/mui\"]);\n\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            let renderCell = `\n                renderCell: function render({ value }) {\n                    return <DateField value={value} />;\n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                renderCell = `\n                    renderCell: function render({ value }) {\n                        return (\n                            <>\n                            {value?.map((item: any, index: number) => (\n                                <DateField value={${val}} key={index} />\n                            ))}\n                            </>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${fieldProperty},\n                    ${headerProperty},${valueGetterProperty}\n                    minWidth: 250,${renderCell}\n                }\n            `;\n        }\n        return undefined;\n    };\n\n    const richtextFields = (field: InferField) => {\n        if (field?.type === \"richtext\") {\n            imports.push([\"MarkdownField\", \"@refinedev/mui\"]);\n\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            let renderCell = `\n                renderCell: function render({ value }) {\n                    return <MarkdownField value={(value ?? \"\").slice(0, 80) + \"...\"} />;\n                }\n            `;\n\n            if (field.multiple) {\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                renderCell = `\n                    renderCell: function render({ value }) {\n                        return (\n                            <>\n                            {value?.map((item: any, index: number) => (\n                                <MarkdownField value={(${val}).slice(0, 80) + \"...\"} key={index} />\n                            ))}\n                            </>\n                        )\n                    }\n                `;\n            }\n\n            return `\n                {\n                    ${fieldProperty},\n                    ${headerProperty},${valueGetterProperty}\n                    minWidth: 250,${renderCell}\n                }\n            `;\n        }\n\n        return undefined;\n    };\n\n    const basicFields = (field: InferField) => {\n        if (field && (field.type === \"text\" || field.type === \"number\")) {\n            const fieldProperty = `field: \"${field.key}\"`;\n\n            const headerProperty = `headerName: \"${prettyString(field.key)}\"`;\n\n            const valueGetterProperty =\n                field.accessor &&\n                !field.multiple &&\n                !Array.isArray(field.accessor)\n                    ? `valueGetter: ({ row }) => {\n            const value = ${accessor(\"row\", field.key, field.accessor, false)};\n\n            return value;\n        },`\n                    : \"\";\n\n            let renderCell = \"\";\n\n            if (field.multiple) {\n                imports.push([\"TagField\", \"@refinedev/mui\"]);\n\n                const val = accessor(\n                    \"item\",\n                    undefined,\n                    field.accessor,\n                    ' + \" \" + ',\n                );\n                renderCell = `\n                renderCell: function render({ row }) {\n                    return (\n                        <>\n                            {(${accessor(\n                                \"row\",\n                                field.key,\n                            )})?.map((item: any) => (\n                                <TagField value={${val}} key={${val}} />\n                            ))}\n                        </>\n                    )\n                }\n                `;\n            }\n            if (!field.multiple && Array.isArray(field.accessor)) {\n                renderCell = `\n                renderCell: function render({ row }) {\n                    return (\n                        <>{${accessor(\"row\", field.key, field.accessor)}}</>\n                    );\n                }\n                `;\n            }\n\n            return `\n            {\n                ${fieldProperty},\n                ${headerProperty},${valueGetterProperty}${\n                field.type === \"number\" ? \"type: 'number',\" : \"\"\n            }\n                minWidth: ${isIDKey(field.key) ? 50 : 200},${renderCell}\n            }\n            `;\n        }\n        return undefined;\n    };\n\n    const { canEdit, canShow, canDelete } = resource ?? {};\n\n    if (canEdit) {\n        imports.push([\"EditButton\", \"@refinedev/mui\"]);\n    }\n    if (canShow) {\n        imports.push([\"ShowButton\", \"@refinedev/mui\"]);\n    }\n    if (canDelete) {\n        imports.push([\"DeleteButton\", \"@refinedev/mui\"]);\n    }\n\n    const actionButtons =\n        canEdit || canShow || canDelete\n            ? jsx`\n            {\n                field: \"actions\",\n                headerName: \"Actions\",\n                renderCell: function render({ row }) {\n                    return (\n                        <>\n                            ${\n                                canEdit\n                                    ? jsx`<EditButton hideText recordItemId={row.id} />`\n                                    : \"\"\n                            }\n                            ${\n                                canShow\n                                    ? jsx`<ShowButton hideText recordItemId={row.id} />`\n                                    : \"\"\n                            }\n                            ${\n                                canDelete\n                                    ? jsx`<DeleteButton hideText recordItemId={row.id} />`\n                                    : \"\"\n                            }\n                        </>\n                    );\n                },\n                align: \"center\",\n                headerAlign: \"center\",\n                minWidth: 80,\n            },\n    `\n            : \"\";\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n                return basicFields(field);\n            case \"richtext\":\n                return richtextFields(field);\n            case \"email\":\n                return emailFields(field);\n            case \"image\":\n                return imageFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"url\":\n                return urlFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME} = () => {\n        const { dataGridProps } = useDataGrid(\n            ${isCustomPage ? `{ resource: \"${resource.name}\" }` : \"\"} \n        );\n    \n        ${relationHooksCode}\n\n        const columns = React.useMemo<GridColumns<any>>(() => [\n            ${[...renderedFields, actionButtons].filter(Boolean).join(\",\\r\\n\")}\n        ], [${relationVariableNames.join(\",\")}]);\n\n        return (\n            <List>\n                <DataGrid {...dataGridProps} columns={columns} autoHeight />\n            </List>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ListInferencer: InferencerResultComponent = createInferencer({\n    type: \"list\",\n    additionalScope: [\n        [\"@refinedev/mui\", \"RefineMui\", RefineMui],\n        [\"@emotion/react\", \"EmotionReact\", EmotionReact],\n        [\"@emotion/styled\", \"EmotionStyled\", EmotionStyled],\n        [\"@mui/lab\", \"MuiLab\", MuiLab],\n        [\"@mui/material\", \"MuiMaterial\", MuiMaterial],\n        [\"@mui/x-data-grid\", \"MuiXDataGrid\", MuiXDataGrid],\n    ],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import * as RefineMui from \"@refinedev/mui\";\nimport * as RefineReactHookForm from \"@refinedev/react-hook-form\";\nimport * as EmotionReact from \"@emotion/react\";\nimport * as EmotionStyled from \"@emotion/styled\";\nimport * as MuiLab from \"@mui/lab\";\nimport * as MuiMaterial from \"@mui/material\";\nimport * as MuiXDataGrid from \"@mui/x-data-grid\";\nimport * as ReactHookForm from \"react-hook-form\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    dotAccessor,\n    noOp,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\n\n/**\n * a renderer function for create page in Material UI\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"create\",\n    );\n    const imports: Array<ImportElement> = [\n        [\"Create\", \"@refinedev/mui\"],\n        [\"Box\", \"@mui/material\"],\n        [\"useForm\", \"@refinedev/react-hook-form\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useAutocomplete\", \"@refinedev/mui\"]);\n\n                return `\n                const { autocompleteProps: ${getVariableName(\n                    field.key,\n                    \"AutocompleteProps\",\n                )} } =\n                useAutocomplete({\n                    resource: \"${field.resource.name}\",\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push(\n                [\"Autocomplete\", \"@mui/material\"],\n                [\"Controller\", \"react-hook-form\"],\n            );\n            const variableName = getVariableName(\n                field.key,\n                \"AutocompleteProps\",\n            );\n\n            const optionLabelProperty = field.relationInfer\n                ? field.relationInfer.accessor\n                    ? typeof field.relationInfer.accessor === \"string\"\n                        ? field.relationInfer.accessor\n                        : field.relationInfer.accessor[0]\n                    : \"title\"\n                : \"title\";\n\n            // check optionLabelProperty can be accessed via dot notation\n            const isBracketNotation =\n                optionLabelProperty.includes(\".\") ||\n                optionLabelProperty.includes(\"[\") ||\n                optionLabelProperty.includes(\"]\") ||\n                optionLabelProperty.includes(\"-\");\n\n            const optionLabelItemValue = field.accessor\n                ? accessor(\"item\", undefined, field.accessor, false)\n                : \"(item?.id ?? item)\";\n\n            const optionEqualValue = field.accessor\n                ? accessor(\"value\", undefined, field.accessor, false)\n                : \"(value?.id ?? value)\";\n\n            const optionChangeValue = field.accessor\n                ? \"value\"\n                : field.multiple\n                ? \"value?.map((item: any) => item?.id ?? item)\"\n                : \"value?.id ?? value\";\n\n            return jsx`\n                <Controller\n                    control={control}\n                    name=\"${dotAccessor(field.key, undefined)}\"\n                    rules={{ required: \"This field is required\" }}\n                    // eslint-disable-next-line\n                    ${\n                        field.multiple\n                            ? \"defaultValue={[] as any}\"\n                            : \"defaultValue={null as any}\"\n                    }\n                    render={({ field }) => (\n                        <Autocomplete\n                            {...${variableName}}\n                            {...field}\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            onChange={(_, value) => {\n                                field.onChange(${optionChangeValue});\n                            }}\n                            getOptionLabel={(item) => {\n                                return (\n                                    ${variableName}?.options?.find(\n                                        (p) =>\n                                            p?.id?.toString() ===\n                                            ${optionLabelItemValue}?.toString(),\n                                    )?.${\n                                        isBracketNotation\n                                            ? `[\"${optionLabelProperty}\"]`\n                                            : optionLabelProperty\n                                    } ?? \"\"\n                                );\n                            }}\n                            isOptionEqualToValue={(option, value) =>\n                                value === undefined ||\n                                option.id.toString() === ${optionEqualValue}?.toString()\n                            }\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"${prettyString(field.key)}\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    error={!!${accessor(\n                                        \"(errors as any)\",\n                                        field.key,\n                                        field.accessor,\n                                        false,\n                                    )}}\n                                    helperText={${accessor(\n                                        \"(errors as any)\",\n                                        field.key,\n                                        field.accessor,\n                                        false,\n                                    )}?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n            `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\" ||\n            field.type === \"date\" ||\n            field.type === \"richtext\"\n        ) {\n            if (isIDKey(field.key)) {\n                return undefined;\n            }\n\n            imports.push([\"TextField\", \"@mui/material\"]);\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <TextField\n                    {...register(\"${dotAccessor(\n                        field.key,\n                        undefined,\n                        field.accessor,\n                    )}\", {\n                        required: \"This field is required\",\n                        ${field.type === \"number\" ? \"valueAsNumber: true,\" : \"\"}\n                    })}\n                    error={!!${accessor(\n                        \"(errors as any)\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}}\n                    helperText={${accessor(\n                        \"(errors as any)\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}?.message}\n                    margin=\"normal\"\n                    fullWidth\n                    InputLabelProps={{ shrink: true }}\n                    ${\n                        field.type !== \"date\" && field.type !== \"richtext\"\n                            ? `type=\"${field.type}\"`\n                            : \"\"\n                    }\n                    ${field.type === \"richtext\" ? \"multiline\" : \"\"}\n                    label=\"${prettyString(field.key)}\"\n                    name=\"${dotAccessor(field.key, undefined, field.accessor)}\"\n                />\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push(\n                [\"Checkbox\", \"@mui/material\"],\n                [\"FormControlLabel\", \"@mui/material\"],\n                [\"Controller\", \"react-hook-form\"],\n            );\n\n            if (field.multiple) {\n                return undefined;\n            }\n\n            return jsx`\n                <Controller\n                    control={control}\n                    name=\"${dotAccessor(field.key, undefined, field.accessor)}\"\n                    // eslint-disable-next-line\n                    defaultValue={null as any}\n                    render={({ field }) => (\n                        <FormControlLabel label=\"${prettyString(\n                            field.key,\n                        )}\" control={\n                            <Checkbox\n                                {...field}\n                                checked={field.value}\n                                onChange={(event) => {\n                                    field.onChange(event.target.checked);\n                                }}\n                            />\n                        } />\n                    )}\n                />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            const basicRender = basicInputFields(field);\n\n            return `\n                {/*\n                    DatePicker component is not included in \"@refinedev/mui\" package.\n                    To use a <DatePicker> component, you can follow the official documentation for Material UI.\n\n                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage\n                */}\n                ${basicRender ?? \"\"}\n                `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n            case \"richtext\":\n                return basicInputFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n\n    export const ${COMPONENT_NAME} = () => {\n        const {\n            saveButtonProps,\n            refineCore: { formLoading },\n            register,\n            control,\n            formState: { errors },\n        } = useForm(\n            ${\n                isCustomPage\n                    ? `{\n                refineCoreProps: {\n                    resource: \"${resource.name}\",\n                    action: \"create\",\n                }\n            }`\n                    : \"\"\n            }\n        );\n\n        ${relationHooksCode}\n\n        return (\n            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>\n                <Box\n                    component=\"form\"\n                    sx={{ display: \"flex\", flexDirection: \"column\" }}\n                    autoComplete=\"off\"\n                >\n                    ${renderedFields.join(\"\")}\n                </Box>\n            </Create>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const CreateInferencer: InferencerResultComponent = createInferencer({\n    type: \"create\",\n    additionalScope: [\n        [\"@refinedev/mui\", \"RefineMui\", RefineMui],\n        [\n            \"@refinedev/react-hook-form\",\n            \"RefineReactHookForm\",\n            RefineReactHookForm,\n        ],\n        [\"@emotion/react\", \"EmotionReact\", EmotionReact],\n        [\"@emotion/styled\", \"EmotionStyled\", EmotionStyled],\n        [\"@mui/lab\", \"MuiLab\", MuiLab],\n        [\"@mui/material\", \"MuiMaterial\", MuiMaterial],\n        [\"@mui/x-data-grid\", \"MuiXDataGrid\", MuiXDataGrid],\n        [\"react-hook-form\", \"ReactHookForm\", ReactHookForm],\n    ],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n","import * as RefineMui from \"@refinedev/mui\";\nimport * as RefineReactHookForm from \"@refinedev/react-hook-form\";\nimport * as EmotionReact from \"@emotion/react\";\nimport * as EmotionStyled from \"@emotion/styled\";\nimport * as MuiLab from \"@mui/lab\";\nimport * as MuiMaterial from \"@mui/material\";\nimport * as MuiXDataGrid from \"@mui/x-data-grid\";\nimport * as ReactHookForm from \"react-hook-form\";\n\nimport { createInferencer } from \"@/create-inferencer\";\nimport {\n    jsx,\n    componentName,\n    prettyString,\n    accessor,\n    printImports,\n    isIDKey,\n    dotAccessor,\n    noOp,\n    getVariableName,\n} from \"@/utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { CodeViewerComponent } from \"./code-viewer\";\n\nimport {\n    InferencerResultComponent,\n    InferField,\n    ImportElement,\n    RendererContext,\n} from \"@/types\";\n\n/**\n * a renderer function for edit page in Material UI\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n    resource,\n    fields,\n    isCustomPage,\n    id,\n}: RendererContext) => {\n    const COMPONENT_NAME = componentName(\n        resource.label ?? resource.name,\n        \"edit\",\n    );\n    const recordName = getVariableName(resource.label ?? resource.name, \"Data\");\n    const imports: Array<ImportElement> = [\n        [\"Edit\", \"@refinedev/mui\"],\n        [\"Box\", \"@mui/material\"],\n        [\"useForm\", \"@refinedev/react-hook-form\"],\n    ];\n\n    const relationFields: (InferField | null)[] = fields.filter(\n        (field) => field?.relation && !field?.fieldable && field?.resource,\n    );\n\n    const relationHooksCode = relationFields\n        .filter(Boolean)\n        .map((field) => {\n            if (field?.relation && !field.fieldable && field.resource) {\n                imports.push([\"useAutocomplete\", \"@refinedev/mui\"]);\n                let val = accessor(\n                    recordName,\n                    field.key,\n                    field.accessor,\n                    false,\n                );\n\n                if (field.multiple && field.accessor) {\n                    val = `${accessor(\n                        recordName,\n                        field.key,\n                    )}?.map((item: any) => ${accessor(\n                        \"item\",\n                        undefined,\n                        field.accessor,\n                    )})`;\n                }\n\n                return `\n                const { autocompleteProps: ${getVariableName(\n                    field.key,\n                    \"AutocompleteProps\",\n                )} } =\n                useAutocomplete({\n                    resource: \"${field.resource.name}\",\n                    defaultValue: ${val},\n                });\n            `;\n            }\n            return undefined;\n        })\n        .filter(Boolean);\n\n    const renderRelationFields = (field: InferField) => {\n        if (field.relation && field.resource) {\n            imports.push(\n                [\"Autocomplete\", \"@mui/material\"],\n                [\"Controller\", \"react-hook-form\"],\n            );\n            const variableName = getVariableName(\n                field.key,\n                \"AutocompleteProps\",\n            );\n\n            const optionLabelProperty = field.relationInfer\n                ? field.relationInfer.accessor\n                    ? typeof field.relationInfer.accessor === \"string\"\n                        ? field.relationInfer.accessor\n                        : field.relationInfer.accessor[0]\n                    : \"title\"\n                : \"title\";\n\n            // check optionLabelProperty can be accessed via dot notation\n            const isBracketNotation =\n                optionLabelProperty.includes(\".\") ||\n                optionLabelProperty.includes(\"[\") ||\n                optionLabelProperty.includes(\"]\") ||\n                optionLabelProperty.includes(\"-\");\n\n            const optionLabelItemValue = field.accessor\n                ? accessor(\"item\", undefined, field.accessor, false)\n                : \"(item?.id ?? item)\";\n\n            const optionEqualValue = field.accessor\n                ? accessor(\"value\", undefined, field.accessor, false)\n                : \"(value?.id ?? value)\";\n\n            const optionChangeValue = field.accessor\n                ? \"value\"\n                : field.multiple\n                ? \"value?.map((item: any) => item?.id ?? item)\"\n                : \"value?.id ?? value\";\n\n            return jsx`\n                <Controller\n                    control={control}\n                    name=\"${dotAccessor(field.key, undefined)}\"\n                    rules={{ required: \"This field is required\" }}\n                    // eslint-disable-next-line\n                    ${\n                        field.multiple\n                            ? \"defaultValue={[] as any}\"\n                            : \"defaultValue={null as any}\"\n                    }\n                    render={({ field }) => (\n                        <Autocomplete\n                            {...${variableName}}\n                            {...field}\n                            ${field.multiple ? \"multiple\" : \"\"}\n                            onChange={(_, value) => {\n                                field.onChange(${optionChangeValue});\n                            }}\n                            getOptionLabel={(item) => {\n                                return (\n                                    ${variableName}?.options?.find(\n                                        (p) =>\n                                            p?.id?.toString() ===\n                                            ${optionLabelItemValue}?.toString(),\n                                    )?.${\n                                        isBracketNotation\n                                            ? `[\"${optionLabelProperty}\"]`\n                                            : optionLabelProperty\n                                    } ?? \"\"\n                                );\n                            }}\n                            isOptionEqualToValue={(option, value) =>\n                                value === undefined ||\n                                option?.id?.toString() === ${optionEqualValue}?.toString()\n                            }\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"${prettyString(field.key)}\"\n                                    margin=\"normal\"\n                                    variant=\"outlined\"\n                                    error={!!${accessor(\n                                        \"(errors as any)\",\n                                        field.key,\n                                        field.accessor,\n                                        false,\n                                    )}}\n                                    helperText={${accessor(\n                                        \"(errors as any)\",\n                                        field.key,\n                                        field.accessor,\n                                        false,\n                                    )}?.message}\n                                    required\n                                />\n                            )}\n                        />\n                    )}\n                />\n            `;\n        }\n        return undefined;\n    };\n\n    const basicInputFields = (field: InferField) => {\n        if (\n            field.type === \"text\" ||\n            field.type === \"url\" ||\n            field.type === \"email\" ||\n            field.type === \"number\" ||\n            field.type === \"date\" ||\n            field.type === \"richtext\"\n        ) {\n            imports.push([\"TextField\", \"@mui/material\"]);\n\n            if (field.multiple) {\n                imports.push([\"Box\", \"@mui/material\"]);\n\n                const val = dotAccessor(field.key, \"${index}\", field.accessor);\n\n                const errorVal =\n                    accessor(\"(errors as any)\", field.key, undefined, false) +\n                    \"?.[index]\";\n\n                return `\n                    <Box sx={{display: \"flex\", gap: 1}}>\n                        {${accessor(\n                            recordName,\n                            field.key,\n                        )}?.map((item: any, index: number) => (\n                            <TextField\n                                key={index}\n                                {...register(\\`${val}\\`, {\n                                    required: \"This field is required\",\n                                    ${\n                                        field.type === \"number\"\n                                            ? \"valueAsNumber: true,\"\n                                            : \"\"\n                                    }\n                                })}\n                                error={!!${errorVal}}\n                                helperText={${errorVal}?.message as string}\n                                margin=\"normal\"\n                                fullWidth\n                                InputLabelProps={{ shrink: true }}\n                                ${\n                                    field.type !== \"date\" &&\n                                    field.type !== \"richtext\"\n                                        ? `type=\"${field.type}\"`\n                                        : \"\"\n                                }\n                                ${field.type === \"richtext\" ? \"multiline\" : \"\"}\n                                label={\\`${prettyString(\n                                    field.key,\n                                )} \\${index+1}\\`}\n                                name={\\`${dotAccessor(\n                                    field.key,\n                                    undefined,\n                                    field.accessor,\n                                )}.\\${index}\\`}\n                            />\n                        ))}\n                    </Box>\n                `;\n            }\n            return jsx`\n                <TextField\n                    {...register(\"${dotAccessor(\n                        field.key,\n                        undefined,\n                        field.accessor,\n                    )}\", {\n                        required: \"This field is required\",\n                        ${field.type === \"number\" ? \"valueAsNumber: true,\" : \"\"}\n                    })}\n                    error={!!${accessor(\n                        \"(errors as any)\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}}\n                    helperText={${accessor(\n                        \"(errors as any)\",\n                        field.key,\n                        field.accessor,\n                        false,\n                    )}?.message}\n                    margin=\"normal\"\n                    fullWidth\n                    InputLabelProps={{ shrink: true }}\n                    ${\n                        field.type !== \"date\" && field.type !== \"richtext\"\n                            ? `type=\"${field.type}\"`\n                            : \"\"\n                    }\n                    ${field.type === \"richtext\" ? \"multiline\" : \"\"}\n                    label=\"${prettyString(field.key)}\"\n                    name=\"${dotAccessor(field.key, undefined, field.accessor)}\"\n                    ${isIDKey(field.key) ? \"disabled\" : \"\"}\n                />\n            `;\n        }\n        return undefined;\n    };\n\n    const booleanFields = (field: InferField) => {\n        if (field.type === \"boolean\") {\n            imports.push(\n                [\"Checkbox\", \"@mui/material\"],\n                [\"FormControlLabel\", \"@mui/material\"],\n                [\"Controller\", \"react-hook-form\"],\n            );\n\n            if (field.multiple) {\n                imports.push([\"Box\", \"@mui/material\"]);\n\n                const val = dotAccessor(field.key, \"${index}\", field.accessor);\n\n                return `\n                    <Box sx={{display: \"flex\", gap: 1}}>\n                        {${accessor(\n                            recordName,\n                            field.key,\n                        )}?.map((item: any, index: number) => (\n                            <Controller\n                                key={index}\n                                control={control}\n                                name={\\`${val}\\`}\n                                // eslint-disable-next-line\n                                defaultValue={null as any}\n                                render={({ field }) => (\n                                    <FormControlLabel label={\\`${prettyString(\n                                        field.key,\n                                    )} \\${index+1}\\`} control={\n                                        <Checkbox\n                                            {...field}\n                                            checked={field.value}\n                                            onChange={(event) => {\n                                                field.onChange(event.target.checked);\n                                            }}\n                                        />\n                                    } />\n                                )}\n                            />\n                        ))}\n                    </Box>\n                `;\n            }\n\n            return jsx`\n                <Controller\n                    control={control}\n                    name=\"${dotAccessor(field.key, undefined, field.accessor)}\"\n                    // eslint-disable-next-line\n                    defaultValue={null as any}\n                    render={({ field }) => (\n                        <FormControlLabel label=\"${prettyString(\n                            field.key,\n                        )}\" control={\n                            <Checkbox\n                                {...field}\n                                checked={field.value}\n                                onChange={(event) => {\n                                    field.onChange(event.target.checked);\n                                }}\n                            />\n                        } />\n                    )}\n                />\n            `;\n        }\n        return undefined;\n    };\n\n    const dateFields = (field: InferField) => {\n        if (field.type === \"date\") {\n            const basicRender = basicInputFields(field);\n\n            return `\n                {/*\n                    DatePicker component is not included in \"@refinedev/mui\" package.\n                    To use a <DatePicker> component, you can follow the official documentation for Material UI.\n\n                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage\n                */}\n                ${basicRender}\n                `;\n        }\n        return undefined;\n    };\n\n    const renderedFields: Array<string | undefined> = fields.map((field) => {\n        switch (field?.type) {\n            case \"text\":\n            case \"number\":\n            case \"email\":\n            case \"url\":\n            case \"richtext\":\n                return basicInputFields(field);\n            case \"date\":\n                return dateFields(field);\n            case \"boolean\":\n                return booleanFields(field);\n            case \"relation\":\n                return renderRelationFields(field);\n            default:\n                return undefined;\n        }\n    });\n\n    noOp(imports);\n\n    return jsx`\n    ${printImports(imports)}\n\n    export const ${COMPONENT_NAME} = () => {\n        const {\n            saveButtonProps,\n            refineCore: { queryResult },\n            register,\n            control,\n            formState: { errors },\n        } = useForm(\n            ${\n                isCustomPage\n                    ? `{\n                refineCoreProps: {\n                    resource: \"${resource.name}\",\n                    id: ${id},\n                    action: \"edit\",\n                }\n            }`\n                    : \"\"\n            }\n        );\n\n        const ${recordName} = queryResult?.data?.data;\n\n        ${relationHooksCode}\n\n        return (\n            <Edit saveButtonProps={saveButtonProps}>\n                <Box\n                    component=\"form\"\n                    sx={{ display: \"flex\", flexDirection: \"column\" }}\n                    autoComplete=\"off\"\n                >\n                    ${renderedFields.join(\"\")}\n                </Box>\n            </Edit>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const EditInferencer: InferencerResultComponent = createInferencer({\n    type: \"edit\",\n    additionalScope: [\n        [\"@refinedev/mui\", \"RefineMui\", RefineMui],\n        [\n            \"@refinedev/react-hook-form\",\n            \"RefineReactHookForm\",\n            RefineReactHookForm,\n        ],\n        [\"@emotion/react\", \"EmotionReact\", EmotionReact],\n        [\"@emotion/styled\", \"EmotionStyled\", EmotionStyled],\n        [\"@mui/lab\", \"MuiLab\", MuiLab],\n        [\"@mui/material\", \"MuiMaterial\", MuiMaterial],\n        [\"@mui/x-data-grid\", \"MuiXDataGrid\", MuiXDataGrid],\n        [\"react-hook-form\", \"ReactHookForm\", ReactHookForm],\n    ],\n    codeViewerComponent: CodeViewerComponent,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    renderer,\n});\n"],"mappings":"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","names":["React","useResource","RefineMui","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","React","useResource","urlLikeKeyRegexp","getFieldableKeys","key","data","fieldableProperties","firstAvailable","fkey","pickNotDeprecated","pickDataProvider","resourceName","dataProviderName","resources","resource","item","meta","dataProviderFromResource","_a","pickInferredField","inferredFields","field","a","b","prettier","tsParser","prettierFormat","code","error","prettySpaces","content","relationRegexp","relationInfer","key","value","isRelation","isBasicValue","isBasicArray","v","removeRelationSuffix","key","relationRegexp","prettyString","str","removeRelationSuffix","word","replaceExports","code","line","packageRegex","sideEffectRegex","nameChangeRegex","replaceImports","content","modules","matches","imports","match","defaultImport","namedImports","namespaceImport","packageName","importName","prettySpaces","pluralize","resourceFromInferred","field","resources","el","stripped","removeRelationSuffix","pluralize","pluralize","componentName","resourceName","type","fallbackResourceName","sanitized","singular","pluralize","resourceComponentName","prettyString","prettyType","handleExpression","expression","jsx","strings","expressions","result","currentString","i","prepareLiveCode","code","componentName","removeHiddenCode","code","dotAccessableRegex","shouldDotAccess","property","accessorSingle","variableName","key","accessor","base","accessorMultiple","variable","a","joiner","dotAccessor","str","printImports","imports","byModule","acc","element","module","isDefault","elements","defaultImport","e","named","defaultStr","namedStr","pluralize","toSingular","str","pluralize","toPlural","str","identifierRegexp","isIDKey","key","noOp","arg1","getVariableName","fieldKey","suffixOrPrefix","fieldKeyWithoutInvalidCharacters","prettyPluralVariableName","prettyString","composeInferencers","inferencers","fieldInferencer","key","value","record","infer","inferences","inferencer","pickInferredField","composeTransformers","transformers","fields","resources","resource","record","infer","acc","transformer","arrayInfer","key","value","record","infer","isArray","isBasicArray","v","inferredInnerType","basicType","booleanInfer","key","value","dayjs","dateSuffixRegexp","dateSeparators","dateInfer","key","value","isDateField","isValidDateString","emailRegexp","emailInfer","key","value","imageRegexp","imageInfer","key","value","nullishInfer","key","value","numberInfer","key","value","isNonEmptyString","isNotNaN","idPropertyRegexp","objectInfer","key","value","record","infer","isNotNull","isNotArray","fieldableKeys","getFieldableKeys","innerFieldKey","innerFieldType","accessor","el","richtextInfer","key","value","textInfer","key","value","urlRegexp","urlInfer","key","value","defaultElements","arrayInfer","booleanInfer","dateInfer","emailInfer","imageInfer","nullishInfer","numberInfer","objectInfer","relationInfer","richtextInfer","textInfer","urlInfer","basicToRelation","fields","resources","resource","record","field","validUUIdRegex","isValidUUID","value","isNotSelf","imageFieldLikeRegexp","imageByKey","fields","field","relationByResource","fields","resources","field","inferResource","resourceFromInferred","relationToFieldable","fields","resources","resource","record","infer","field","value","inferredType","defaultTransformers","imageByKey","relationByResource","relationToFieldable","basicToRelation","React","useEffect","Highlight","defaultProps","theme","CodeHighlight","code","wrapperProps","_a","styleElement","className","style","tokens","getLineProps","getTokenProps","line","i","token","key","React","RefineCore","LivePreview","LiveProvider","defaultScope","React","RefineCore","InferencerLiveContext","LiveComponent","fetchError","code","additionalScope","ErrorComponent","_a","sanitized","replaceExports","replaceImports","acc","packageName","variableName","_module","ignoreReplacement","scope","_packageName","packageContent","ErrorComponentWithError","error","LiveProvider","LivePreview","React","useDataProvider","useResource","useInferFetch","type","resourceNameOrRouteName","idFromProps","resource","idFromURL","resources","useResource","id","dataProvider","useDataProvider","error","setError","React","data","setData","initial","setInitial","loading","setLoading","resolver","recordItemId","_a","_b","dataProviderName","dataProviderFromResource","pickDataProvider","dp","React","useDataProvider","get","useRelationFetch","record","fields","infer","dataProvider","useDataProvider","updatedFields","setUpdatedFields","React","initial","setInitial","loading","setLoading","resolver","allFields","attempts","promises","field","dataProviderName","dataProviderFromResource","dp","requestId","el","data","relationInfer","responseData","isPlural","toPlural","removeRelationSuffix","toSingular","resourceNameWithoutRelationSuffix","results","createInferencer","type","additionalScope","customElements","fieldTransformers","renderer","LoadingComponent","ErrorComponent","CodeViewerComponent","infer","composeInferencers","defaultElements","transform","composeTransformers","defaultTransformers","Inferencer","resourceName","fieldTransformer","id","_a","_b","_c","_d","_e","_f","resource","resources","useResource","resourceFromURL","record","recordLoading","isInitialLoad","inferError","useInferFetch","rawResults","React","inferred","key","value","transformed","field","result","results","relationLoading","useRelationFetch","code","LiveComponent","prepareLiveCode","componentName","removeHiddenCode","name","React","Alert","AlertTitle","Box","ErrorComponent","error","React","Box","CircularProgress","LoadingComponent","React","Button","Box","Modal","IconButton","IconCode","IconMessageCircle","IconX","IconCopy","IconCheck","CodeViewerComponent","rawCode","loading","code","React","prettierFormat","inputRef","visible","setVisible","isCopied","setIsCopied","copyCode","_a","_b","_c","_d","Box","Button","IconCode","IconMessageCircle","Modal","IconButton","IconX","CodeHighlight","IconCheck","IconCopy","renderer","resource","fields","isCustomPage","id","_a","COMPONENT_NAME","componentName","recordName","imports","relationHooksCode","field","ids","accessor","getVariableName","renderRelationFields","variableName","variableIsLoading","jsx","prettyString","mapItemName","val","textFields","imageFields","emailFields","urlFields","booleanFields","dateFields","richtextFields","numberFields","renderedFields","noOp","printImports","ShowInferencer","createInferencer","RefineMui","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","CodeViewerComponent","LoadingComponent","ErrorComponent","RefineMui","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","renderer","resource","fields","isCustomPage","_a","COMPONENT_NAME","componentName","recordName","imports","relationFields","field","relationHooksCode","idsString","accessor","getVariableName","relationVariableNames","renderRelationFields","_b","variableName","variableIsLoading","loadingCondition","fieldProperty","valueGetterProperty","headerProperty","prettyString","renderCell","val","valSingle","valViewableSingle","imageFields","emailFields","urlFields","booleanFields","dateFields","richtextFields","basicFields","isIDKey","canEdit","canShow","canDelete","actionButtons","jsx","renderedFields","noOp","printImports","ListInferencer","createInferencer","RefineMui","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","CodeViewerComponent","LoadingComponent","ErrorComponent","RefineMui","RefineReactHookForm","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","ReactHookForm","renderer","resource","fields","isCustomPage","_a","COMPONENT_NAME","componentName","imports","relationHooksCode","field","getVariableName","renderRelationFields","variableName","optionLabelProperty","isBracketNotation","optionLabelItemValue","accessor","optionEqualValue","optionChangeValue","jsx","dotAccessor","prettyString","basicInputFields","isIDKey","booleanFields","dateFields","basicRender","renderedFields","noOp","printImports","CreateInferencer","createInferencer","RefineMui","RefineReactHookForm","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","ReactHookForm","CodeViewerComponent","LoadingComponent","ErrorComponent","RefineMui","RefineReactHookForm","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","ReactHookForm","renderer","resource","fields","isCustomPage","id","_a","_b","COMPONENT_NAME","componentName","recordName","getVariableName","imports","relationHooksCode","field","val","accessor","renderRelationFields","variableName","optionLabelProperty","isBracketNotation","optionLabelItemValue","optionEqualValue","optionChangeValue","jsx","dotAccessor","prettyString","basicInputFields","errorVal","isIDKey","booleanFields","dateFields","renderedFields","noOp","printImports","EditInferencer","createInferencer","RefineMui","RefineReactHookForm","EmotionReact","EmotionStyled","MuiLab","MuiMaterial","MuiXDataGrid","ReactHookForm","CodeViewerComponent","LoadingComponent","ErrorComponent","MuiInferencer","actionFromProps","idFromProps","props","action","id","useResource","React","ShowInferencer","CreateInferencer","EditInferencer","ListInferencer"]}