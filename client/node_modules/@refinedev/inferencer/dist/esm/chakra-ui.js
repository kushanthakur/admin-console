import ae from"react";import{useResource as bt}from"@refinedev/core";import*as ot from"@refinedev/chakra-ui";import*as at from"@chakra-ui/react";import z from"react";import{useResource as ar}from"@refinedev/core";var lr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,se=(e,t)=>{let s=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];lr.test(e)&&s.unshift("url");let n=s.find(u=>u in t&&!!t[u]);if(n)return n==="firstName"&&"lastName"in t?["firstName","lastName"]:n};import{pickNotDeprecated as dr}from"@refinedev/core";function ie(e,t,s){if(t)return t;let n=s==null?void 0:s.find(a=>a.name===e),u=dr(n==null?void 0:n.meta,n==null?void 0:n.options);return u!=null&&u.dataProviderName?u.dataProviderName:"default"}var Y=e=>{var t;return(t=e==null?void 0:e.options)==null?void 0:t.dataProviderName};var ce=e=>{let t=[...e].filter(Boolean).sort((s,n)=>(n.priority||0)-(s.priority||0))[0];return t||null};import gr from"prettier/standalone";import yr from"prettier/parser-typescript";var ue=e=>{try{return gr.format(e,{parser:"typescript",plugins:[yr],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(t){return console.warn("Formatting error in inferencer",t),e}};var me=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var pe=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,we=(e,t)=>{let s=pe.test(e),n=typeof t=="string"||typeof t=="number",u=Array.isArray(t)&&t.every(a=>typeof a=="string"||typeof a=="number");return s&&n||s&&u?{key:e,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var E=e=>e.replace(pe,"");var f=e=>E(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(m=>m.charAt(0).toUpperCase()+m.slice(1)).join(" ");var le=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var Le=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,fr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,hr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,de=(e,t={})=>{let s=e.matchAll(Le),n=new Set;for(let u of s){let[,a,m,h,d]=u;if(d in t){let k=t[d];if(d==="react")continue;a&&n.add(`const { default: ${a} } = ${k};`),m&&n.add(`const${m.replace(hr,"$1: $3$4")} = ${k};`),h&&n.add(`const ${h} = ${k};`)}}return me(`
    ${Array.from(n).join(`
`)}
    ${e.replace(Le,"").replace(fr,"")}
    `)};import oe from"pluralize";var ge=(e,t)=>e?t.find(n=>{let u=E(e.key);return n.name===u||n.name===(oe.isPlural(u)?u:oe.plural(u))||n.name===(oe.isSingular(u)?u:oe.singular(u))}):void 0;import kr from"pluralize";var B=(e,t,s="Inferred")=>{let n=e.replace(/[^a-zA-Z0-9]/g," "),u=kr.singular(n),m=f(u).replace(/ /g,"")||s,h=t.charAt(0).toUpperCase()+t.slice(1);return/^[a-zA-Z]/.test(m)?`${m}${h}`:`${h}${m}`};var Ir=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",g=(e,...t)=>e.reduce((n,u,a)=>`${n}${u}${Ir(t[a])}`,"").trim();var ye=(e,t)=>`
    ${e!=null?e:""}
    
    render(typeof ${t} !== "undefined" ? <${t} /> : <></>);
    `;var fe=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var $r=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,he=e=>$r.test(e);function ke(e,t,s){let n=`${e}`;return t&&(n+="?.",he(t)?n+=t:n+=`['${t}']`),s&&(n+="?.",he(s)?n+=s:n+=`['${s}']`),n}function br(e,t,s){return(s!=null?s:[]).map(u=>ke(e,t,u))}var l=(e,t,s,n=' + " " + ')=>Array.isArray(s)?n?br(e,t,s).join(n):ke(e,t,s[0]):ke(e,t,s),N=(e,t,s)=>{let n=e;return t&&(n+=`.${t}`),s&&(Array.isArray(s)?n+=`.${s[0]}`:n+=`.${s}`),n};var O=e=>{let t=e.reduce((n,[u,a,m])=>(n[a]||(n[a]=[]),n[a].includes(u)||(m?n[a].push([u,!0]):n[a].push(u)),n),{});return Object.entries(t).map(([n,u])=>{let a=u.find(k=>Array.isArray(k)&&k[1]),m=u.filter(k=>typeof k=="string"),h=a?`${a[0]}`:"",d=m.length?`{ ${m.join(", ")} }`:"";return`import ${h}${h&&d?", ":""}${d} from "${n}";`})};import Ne from"pluralize";var D=(e="")=>Ne.isSingular(e)?e:Ne.singular(e);import Ee from"pluralize";var G=(e="")=>Ee.isPlural(e)?e:Ee.plural(e);var Fr=/^id$/i,J=e=>Fr.test(e);var ee=e=>e.relationInfer&&e.relationInfer.accessor?Array.isArray(e.relationInfer.accessor)?`optionLabel: "${e.relationInfer.accessor[0]}",`:e.relationInfer.accessor!=="title"?`optionLabel: "${e.relationInfer.accessor}",`:"":"";var U=e=>{};var C=(e,t="")=>{if(Number.isInteger(Number(e)))return t.charAt(0).toLowerCase()+t.slice(1)+e;let n=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=f(n).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${t.charAt(0).toUpperCase()+t.slice(1)}`};var Ve=e=>{let t=(s,n,u,a=t)=>{let m=e.map(d=>d(s,n,u,a));return ce(m)};return t};var Be=e=>(s,n,u,a,m)=>e.reduce((h,d)=>d(h,n,u,a,m),s);var Me=(e,t,s,n)=>{let u=Array.isArray(t),a=Array.isArray(t)&&t.every(m=>typeof m=="string"||typeof m=="number");if(u){if(!a){let h=n(e,t[0],s,n);return h?{...h,key:e,multiple:!0,priority:1}:!1}let m=n(e,t[0],s,n)||{type:"string"};return{key:e,multiple:!0,priority:1,type:m==null?void 0:m.type}}return!1};var De=(e,t)=>typeof t=="boolean"?{key:e,type:"boolean"}:!1;import ze from"dayjs";var xr=/(_at|_on|At|On|AT|ON)(\[\])?$/,Cr=["/",":","-","."],Oe=(e,t)=>{let s=xr.test(e)&&ze(t).isValid(),n=typeof t=="string"&&ze(t).isValid();return typeof t=="string"&&Cr.some(a=>t.includes(a))&&(s||n)?{key:e,type:"date",priority:1}:!1};var vr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,Ue=(e,t)=>typeof t=="string"&&vr.test(t)?{key:e,type:"email",priority:1}:!1;var Ar=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,Pe=(e,t)=>typeof t=="string"&&Ar.test(t)?{key:e,type:"image",priority:2}:!1;var je=(e,t)=>typeof t>"u"||t===null?null:!1;var Ke=(e,t)=>{let s=typeof t=="string"&&t.length>0,n=!isNaN(t);return s&&n||typeof t=="number"?{key:e,type:"number"}:!1};var Sr=/id$/i,_e=(e,t,s,n)=>{let u=t!==null,a=!Array.isArray(t);if(u&&a&&typeof t=="object"){if(Object.keys(t).length===1&&Sr.test(Object.keys(t)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let d=se(e,t);if((d?d.length>0:!1)&&d){let F=d&&Array.isArray(d)?d[0]:d,x=n(F,t[F],t,n);if(x){let I=Array.isArray(d)?d.map(c=>x.accessor?`${c}.${Array.isArray(x.accessor)?x.accessor[0]:x.accessor}`:c):x.accessor?Array.isArray(x.accessor)?`${d}.${x.accessor[0]}`:`${d}.${x.accessor}`:d;return{...x,fieldable:!0,key:e,accessor:I,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var qe=(e,t)=>typeof t=="string"&&t.length>100?{key:e,type:"richtext",priority:1}:!1;var We=(e,t)=>typeof t=="string"?{key:e,type:"text"}:!1;var Tr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,Ge=(e,t)=>typeof t=="string"&&Tr.test(t)?{key:e,type:"url",priority:1}:!1;var Ze=[Me,De,Oe,Ue,Pe,je,Ke,_e,we,qe,We,Ge];var Qe=(e,t,s,n)=>e.map(a=>{if(!a.relation&&(a.type==="text"||a.type==="richtext"||a.type==="number")&&!a.canRelation){let m=/^[a-z0-9-]+$/,h=I=>m.test(`${I}`),d=a.key.toLowerCase()!=="id";return!(!a.accessor||typeof a.accessor=="string")||!d?a:(a.multiple?n[a.key]:[n[a.key]]).every(I=>h(a.accessor?I[a.accessor]:I))?{...a,canRelation:!0}:a}return a});var Rr=/(image|photo|avatar|cover|thumbnail|icon)/i,Xe=e=>e.map(s=>s.type==="url"&&Rr.test(s.key)?{...s,type:"image"}:s);var Ye=(e,t)=>e.map(n=>{let u=ge(n,t);return u?{...n,relation:!0,type:"relation",resource:u}:n});var Je=(e,t,s,n,u)=>e.map(m=>{if(m.relation&&m.type==="relation"&&!m.resource){let h=m.accessor?n[m.key][m.accessor]:n[m.key],d=u(m.key,h,n,u);if(d&&d.type!=="relation")return{...m,fieldable:!0,relation:!1,type:d.type,canRelation:!0}}return m});var er=[Xe,Ye,Je,Qe];import re,{useEffect as Hr}from"react";import wr,{defaultProps as Lr}from"prism-react-renderer";import Nr from"prism-react-renderer/themes/vsDark";var Ie=({code:e,wrapperProps:t})=>(Hr(()=>{var n;let s=document.createElement("style");s.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(n=document.getElementById("code-highlight"))==null||n.appendChild(s)},[]),re.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...t!=null?t:{}},re.createElement(wr,{...Lr,theme:Nr,code:e,language:"tsx"},({className:s,style:n,tokens:u,getLineProps:a,getTokenProps:m})=>re.createElement("pre",{className:s,style:{...n,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((h,d)=>re.createElement("div",{key:d,...a({line:h,key:d})},h.map((k,F)=>re.createElement("span",{key:F,...m({token:k,key:F})}))))))));import M from"react";import*as Er from"@refinedev/core";import{LivePreview as Vr,LiveProvider as Br}from"@aliemir/react-live";var rr=[["react","React",M],["@refinedev/core","RefineCore",Er]],$e=M.createContext({}),be=({fetchError:e,code:t,additionalScope:s,errorComponent:n})=>{var h;let u=(h=t&&le(de(t,[...rr,...s!=null?s:[]].reduce((d,[k,F,x,I])=>I?d:{...d,[k]:F},{}))))!=null?h:"",a=M.useMemo(()=>({React:M,...M,...[...rr,...s!=null?s:[]].reduce((d,[k,F,x])=>({...d,[F]:x}),{})}),[s]),m=M.useMemo(()=>()=>{let{error:k}=M.useContext($e);return n?M.createElement(n,{error:k?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${k}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[n,e]);return M.createElement(Br,{Context:$e,code:u,scope:a,noInline:!0},!e&&M.createElement(Vr,{Context:$e}),M.createElement(m,null))};import Z from"react";import{useDataProvider as Mr,useResource as Dr}from"@refinedev/core";var tr=(e,t,s)=>{let{resource:n,id:u,resources:a}=Dr(t),m=s!=null?s:u,h=Mr(),[d,k]=Z.useState(void 0),[F,x]=Z.useState(void 0),[I,c]=Z.useState(!0),[T,p]=Z.useState(!1),i=Z.useCallback(async v=>{var L,o;let $=(L=Y(n))!=null?L:ie(n==null?void 0:n.name,void 0,a),A=h($);p(!0),k(void 0);try{if((e==="list"||e==="create")&&n){let r=(o=(await A.getList({resource:n==null?void 0:n.name})).data)==null?void 0:o[0];r||k(`<p>No records/data found for resource "${n==null?void 0:n.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),x(r),setTimeout(()=>{p(!1)},500)}if((e==="edit"||e==="show")&&v&&n){let r=(await A.getOne({resource:n==null?void 0:n.name,id:v})).data;r||k(`<p>No records/data found for resource "${n==null?void 0:n.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),x(r),setTimeout(()=>{p(!1)},500)}}catch(y){console.warn("An error occured while fetching the resource data. Please check the error message below:",y),k(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${n==null?void 0:n.name}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{p(!1)},500)}},[e,h,n,a]);return Z.useEffect(()=>{c(!1),!T&&!F&&i(m)},[i,m]),{data:F,loading:T,initial:I,error:d}};import te from"react";import{useDataProvider as zr}from"@refinedev/core";import{get as nr}from"lodash";var or=({record:e,fields:t,infer:s})=>{let n=zr(),[u,a]=te.useState([]),[m,h]=te.useState(!0),[d,k]=te.useState(!1),F=te.useCallback(async x=>{console.groupCollapsed("@refinedev/inferencer is trying to detect relations");let I=[];k(!0);try{let c=x.map(async p=>{if(p&&(p.relation||p.canRelation)&&e){let i=Y(p.resource),v=n(i),$=Array.isArray(p.accessor)?void 0:p.multiple?e[p.key].map(A=>p.accessor?nr(A,p.accessor):A)[0]:p.accessor?nr(e[p.key],p.accessor):e[p.key];if($&&p.resource)try{let{data:A}=await v.getOne({resource:p.resource.name,id:$});I.push({status:"success",resource:p.resource.name,field:p.key});let L=s("__",A,{},s);return{...p,relationInfer:L}}catch{return I.push({status:"error",resource:p.resource.name,field:p.key}),{...p,relationInfer:null}}if($){let A,L;try{let{data:r}=await v.getOne({resource:G(E(p.key)),id:$});I.push({status:"success",resource:G(E(p.key)),field:p.key}),A=r,L=!0}catch{I.push({status:"error",resource:G(E(p.key)),field:p.key});try{let{data:b}=await v.getOne({resource:D(E(p.key)),id:$});I.push({status:"success",resource:D(E(p.key)),field:p.key}),A=b,L=!1}catch{return I.push({status:"error",resource:D(E(p.key)),field:p.key}),{...p,relationInfer:null}}}let o=s("__",A,{},s),y=E(p.key);return{...p,relation:!0,type:"relation",resource:{name:L?G(y):D(y)},fieldable:!1,canRelation:void 0,relationInfer:o}}return{...p,relationInfer:null}}return p}),T=await Promise.all(c);a(T.filter(p=>p)),setTimeout(()=>{k(!1)},500)}catch{setTimeout(()=>{k(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${I.length} attempts and succeeded with ${I.filter(c=>c.status==="success").length} attempts.`),console.groupEnd()},500)},[n,e]);return te.useEffect(()=>{h(!1),!d&&t&&t.length>0&&u.length===0&&F(t)},[F,d,t,F]),{fields:u,loading:d,initial:m}};var P=({type:e,additionalScope:t=[],customElements:s=[],fieldTransformers:n=[],renderer:u,loadingComponent:a,errorComponent:m,codeViewerComponent:h})=>{let d=Ve([...Ze,...s]),k=Be([...er,...n]),F=({resourceName:I,fieldTransformer:c,id:T})=>{var w,S,V,W,Q,Se;let{resource:p,resources:i}=ar(I),{resource:v}=ar(),{data:$,loading:A,initial:L,error:o}=tr(e,I!=null?I:p==null?void 0:p.name,T),y=z.useMemo(()=>{if($){let pr=Object.keys($).map(X=>{let Te=$[X];return d(X,Te,$,d)}).filter(Boolean);if(p){let X=k(pr,i,p,$,d);return c?X.flatMap(Re=>{let He=c(Re);return He?[He]:[]}):X}return[]}return[]},[$,i,p,c]),{fields:r,loading:b}=or({record:$,fields:y,infer:d}),H=z.useMemo(()=>!A&&!b&&!L&&p?u({resource:p,resources:i,fields:r,infer:d,isCustomPage:p.name!==(v==null?void 0:v.name),id:T}):"",[p,i,r,A,b]);return z.createElement(z.Fragment,null,a&&(A||b)&&z.createElement(a,null),!A&&!b&&z.createElement(z.Fragment,null,z.createElement(be,{fetchError:!A&&o?o:!A&&!L&&!$,code:ye(H,B((Se=(Q=(W=(V=(w=p==null?void 0:p.meta)==null?void 0:w.label)!=null?V:(S=p==null?void 0:p.options)==null?void 0:S.label)!=null?W:p==null?void 0:p.label)!=null?Q:p==null?void 0:p.name)!=null?Se:"Resource",e)),errorComponent:m,additionalScope:t}),h&&z.createElement(h,{code:fe(H),loading:A||b})))};return({name:I,resource:c,fieldTransformer:T,id:p})=>z.createElement(F,{fieldTransformer:T,resourceName:c!=null?c:I,key:c!=null?c:I,id:p})};import ne from"react";import{Center as Or,Alert as Ur,AlertIcon as Pr,AlertDescription as jr}from"@chakra-ui/react";var j=({error:e})=>e?ne.createElement(Or,{style:{minHeight:300}},ne.createElement(Ur,{status:"error",variant:"subtle",flexDirection:"column",alignItems:"center",justifyContent:"center",textAlign:"center",height:"200px",maxWidth:"700px"},ne.createElement(Pr,{boxSize:"40px",mr:0}),ne.createElement(jr,{mt:4,maxWidth:"sm"},ne.createElement("div",{dangerouslySetInnerHTML:{__html:e!=null?e:""}})))):null;import sr from"react";import{Box as Kr,Spinner as _r}from"@chakra-ui/react";var K=()=>sr.createElement(Kr,{position:"relative",bg:"chakra-body-bg",minH:120},sr.createElement(_r,{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}));import R from"react";import{Box as qr,Button as Fe,Modal as Wr,HStack as Gr,useDisclosure as Zr,ModalBody as Qr,ModalCloseButton as Xr,ModalContent as Yr,ModalOverlay as Jr}from"@chakra-ui/react";import{IconCode as et,IconMessageCircle as rt,IconCopy as tt,IconCheck as nt}from"@tabler/icons";var _=({code:e,loading:t})=>{let s=R.useMemo(()=>ue(e!=null?e:""),[e]),n=R.useRef(null),[u,a]=R.useState(!1),{isOpen:m,onOpen:h,onClose:d}=Zr();if(t)return null;let k=()=>{var F,x,I,c;(F=n==null?void 0:n.current)==null||F.select(),(x=n==null?void 0:n.current)==null||x.setSelectionRange(0,Number.MAX_SAFE_INTEGER),typeof navigator<"u"&&(navigator.clipboard.writeText((c=(I=n==null?void 0:n.current)==null?void 0:I.value)!=null?c:""),a(!0),setTimeout(()=>{a(!1)},1e3))};return s?R.createElement(R.Fragment,null,R.createElement(qr,{position:"fixed",bottom:"12px",right:"60px"},R.createElement(Gr,{spacing:4},R.createElement(Fe,{variant:"solid",colorScheme:"green",leftIcon:R.createElement(et,{size:18}),onClick:h},"Show Code"),R.createElement(Fe,{colorScheme:"gray",variant:"solid",leftIcon:R.createElement(rt,{size:18}),as:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046"},"Give Feedback"))),R.createElement("div",{style:{height:"50px"}}),R.createElement(Wr,{size:"4xl",isOpen:m,onClose:d},R.createElement(Jr,null),R.createElement(Yr,null,R.createElement(Xr,{sx:{position:"absolute",right:0,top:0,height:"56px",width:"56px",color:"#666b7a"}}),R.createElement(Qr,{sx:{padding:0}},R.createElement(Ie,{code:s}),R.createElement("textarea",{ref:n,defaultValue:(s!=null?s:"").replace(/\\n/g,`\r
`),id:"code-input",style:{padding:0,margin:0,width:0,height:0,opacity:0,border:"none",display:"block"}})),R.createElement(Fe,{sx:{position:"absolute",bottom:"12px",right:"12px",width:100},key:"copy",leftIcon:u?R.createElement(nt,{size:18,style:{color:"green"}}):R.createElement(tt,{size:18}),onClick:k},u?"Copied":"Copy")))):null};var ir=({resource:e,fields:t,isCustomPage:s,id:n})=>{var L;let u=B((L=e.label)!=null?L:e.name,"show"),a="record",m=[["useShow","@refinedev/core"],["Show","@refinedev/chakra-ui"],["Heading","@chakra-ui/react"]],d=t.filter(o=>(o==null?void 0:o.relation)&&!(o!=null&&o.fieldable)&&(o==null?void 0:o.resource)).filter(Boolean).map(o=>{if((o==null?void 0:o.relation)&&!o.fieldable&&o.resource){if(o.multiple){m.push(["useMany","@refinedev/core"]);let y=l(a,o.key);return o.accessor&&(y=`${l(a,o.key)}?.map((item: any) => ${l("item",void 0,o.accessor)})`),`
                const { data: ${C(o.key,"Data")}, isLoading: ${C(o.key,"IsLoading")} } =
                useMany({
                    resource: "${o.resource.name}",
                    ids: ${y} || [],
                    queryOptions: {
                        enabled: !!${a},
                    },
                });
                `}return m.push(["useOne","@refinedev/core"]),`
                const { data: ${C(o.key,"Data")}, isLoading: ${C(o.key,"IsLoading")} } =
                useOne({
                    resource: "${o.resource.name}",
                    id: ${l(a,o.key,o.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${a},
                    },
                });
            `}}).filter(Boolean),k=o=>{if(o.relation&&o.resource){let y=C(o.key,"Data"),r=C(o.key,"IsLoading");return o.multiple?(m.push(["TagField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                {${r} ? <>Loading...</> : (
                    <>
                    ${(()=>{var b;if(o.relationInfer)if((b=o.relationInfer)!=null&&b.accessor){if(Array.isArray(o.relationInfer.accessor))return"Not Handled.";{let H=C(o.key),w=l(H,void 0,o.relationInfer.accessor);return`<HStack spacing="12px">{${y}?.data?.map((${H}: any) => <TagField key={${w}} value={${w}} />)}</HStack>`}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                {${r} ? <>Loading...</> : (
                    <>
                    ${(()=>{var b;return o.relationInfer?(b=o.relationInfer)!=null&&b.accessor?Array.isArray(o.relationInfer.accessor)?`{${l(`${y}?.data`,void 0,o.relationInfer.accessor,' + " " + ')}}`:`{${y}?.data?.${o.relationInfer.accessor}}`:`{${y}?.data}`:`{${y}?.data?.id}`})()}
                    </>
                )}
                
                `}},F=o=>{if(o.type==="text"){if(m.push(["TagField","@refinedev/chakra-ui"],["TextField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(a,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <TextField value={${l(a,o.key,o.accessor)}} />
            `}},x=o=>{if(o.type==="image"){if(m.push(["Image","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                {${l(a,o.key)}?.map((item: any) => (
                    <Image sx={{ maxWidth: 200 }} src={${y}} key={${y}} />
                ))}
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <Image sx={{ maxWidth: 200 }} src={${l(a,o.key,o.accessor," + ")}} />
                `}},I=o=>{if(o.type==="email"){if(m.push(["TagField","@refinedev/chakra-ui"],["EmailField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(a,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <EmailField value={${l(a,o.key,o.accessor," + ")}} />
            `}},c=o=>{if(o.type==="url"){if(m.push(["TagField","@refinedev/chakra-ui"],["UrlField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(a,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <UrlField value={${l(a,o.key,o.accessor," + ")}} />
            `}},T=o=>{if(o.type==="boolean"){if(m.push(["TagField","@refinedev/chakra-ui"],["BooleanField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(a,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <BooleanField value={${l(a,o.key,o.accessor," && ")}} />
            `}},p=o=>{if(o.type==="date"){if(m.push(["DateField","@refinedev/chakra-ui"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                {${l(a,o.key)}?.map((item: any) => (
                    <DateField value={${y}} key={${y}} />
                ))}
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <DateField value={${l(a,o.key,o.accessor," + ' ' + ")}} />
            `}},i=o=>{if(o.type==="richtext")return m.push(["MarkdownField","@refinedev/chakra-ui"]),g`
                <Heading as="h5" size="sm" mt={4}>${f(o.key)}</Heading>
                <MarkdownField value={${l(a,o.key,o.accessor,' + " " + ')}} />
            `},v=o=>{if(o.type==="number"){if(m.push(["NumberField","@refinedev/chakra-ui"],["TagField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),o.multiple){let y=l("item",void 0,o.accessor);return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <HStack spacing="12px">
                {${l(a,o.key)}?.map((item: any) => (
                    <TagField value={${y}} key={${y}} />
                ))}
                </HStack>
            `}return g`
                <Heading as="h5" size="sm" mt={4} >${f(o.key)}</Heading>
                <NumberField value={${l(a,o.key,o.accessor,' + " " + ')} ?? ""} />
            `}},$=o=>{if(o)return g`
                ${o}
            `},A=t.map(o=>{switch(o==null?void 0:o.type){case"text":return $(F(o));case"number":return $(v(o));case"richtext":return $(i(o));case"email":return $(I(o));case"image":return $(x(o));case"date":return $(p(o));case"boolean":return $(T(o));case"url":return $(c(o));case"relation":return $(k(o));default:return}});return U(m),g`
    ${O(m)}
    
    export const ${u} = () => {
        const { queryResult } = useShow(${s?`{ 
                    resource: "${e.name}", 
                    id: ${n}
                }`:""});
        const { data, isLoading } = queryResult;

        const ${a} = data?.data;
    
        ${d}

        return (
            <Show isLoading={isLoading}>
                ${A.join("")}
            </Show>
        );
    };
    `},xe=P({type:"show",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",ot],["@chakra-ui/react","ChakraUI",at]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:ir});import*as st from"@refinedev/chakra-ui";import*as it from"@chakra-ui/react";import*as ct from"@refinedev/react-table";import*as ut from"@tanstack/react-table";import*as mt from"@tabler/icons";var q=e=>Array.isArray(e.accessor)||e.multiple?`accessorKey: "${e.key}"`:e.accessor?`accessorKey: "${N(e.key,void 0,e.accessor)}"`:`accessorKey: "${e.key}"`,cr=({resource:e,fields:t,isCustomPage:s})=>{var y;let n=B((y=e.label)!=null?y:e.name,"list"),u="tableData?.data",a=[["IResourceComponentsProps","@refinedev/core"],["useTable","@refinedev/react-table"],["ColumnDef","@tanstack/react-table"],["flexRender","@tanstack/react-table"],["List","@refinedev/chakra-ui"],["TableContainer","@chakra-ui/react"],["Table","@chakra-ui/react"],["Thead","@chakra-ui/react"],["Tr","@chakra-ui/react"],["Th","@chakra-ui/react"],["Tbody","@chakra-ui/react"],["Tr","@chakra-ui/react"],["Td","@chakra-ui/react"],["HStack","@chakra-ui/react"],["Button","@chakra-ui/react"],["IconButton","@chakra-ui/react"],["usePagination","@refinedev/chakra-ui"],["Box","@chakra-ui/react"],["IconChevronRight","@tabler/icons"],["IconChevronLeft","@tabler/icons"]],m=t.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),h=m.filter(Boolean).map(r=>{if((r==null?void 0:r.relation)&&!r.fieldable&&r.resource){a.push(["GetManyResponse","@refinedev/core"]),a.push(["useMany","@refinedev/core"]);let b="";return r.multiple?b=`[].concat(...(${u}?.map((item) => ${l("item",r.key,r.accessor,!1)}) ?? []))`:b=`${u}?.map((item) => ${l("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${C(r.key,"Data")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${b},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),d=m==null?void 0:m.map(r=>{if(r&&r.resource)return C(r.key,"Data")}).filter(Boolean),k=r=>{var b;if(r.relation&&r.resource){let H=`${C(r.key,"Data")}?.data`;if(Array.isArray(r.accessor))return;let w=`id: "${r.key}"`,S=`header: "${f(r.key)}"`,V=q(r),W="";if(r.multiple){a.push(["TagField","@refinedev/chakra-ui"]);let Q="item";r!=null&&r.relationInfer&&(Q=l("item",void 0,r.relationInfer.accessor)),W=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${C(r.key,"Data")}: GetManyResponse;
                    };

                    const ${C(r.key,"")} = getValue<any[]>()?.map((item) => {
                        return meta.${C(r.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${l("item",void 0,r.accessor)}
                        );
                    })


                    return (
                        <HStack>
                            {${C(r.key,"")}?.map((item, index) => (
                                <TagField key={index} value={${Q}} />
                            ))}
                        </HStack>
                    )
                }
            `}else r!=null&&r.relationInfer?W=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${C(r.key,"Data")}: GetManyResponse;
                        };

                        const ${C(r.key,"")} = meta.${H}?.find(
                            (item) => item.id === getValue<any>(),
                        );

                        return ${l(C(r.key),void 0,(b=r==null?void 0:r.relationInfer)==null?void 0:b.accessor)} ?? "Loading...";
                    },`:W="";return`
                {
                    ${w},
                    ${S},
                    ${V},
                    ${W}
                }
            `}},F=r=>{if(r.type==="image"){a.push(["Image","@chakra-ui/react"]);let b=`id: "${r.key}"`,H=q(r),w=`header: "${f(r.key)}"`,S=g`
                cell: function render({ getValue }) {
                    ${r!=null&&r.accessor?"try {":""}
                        return <Image sx={{ maxWidth: "100px" }} src={${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                }
            `;if(r.multiple){let V=l("item",void 0,r.accessor," + ");S=`
                    cell: function render({ getValue }) {
                        ${r!=null&&r.accessor?"try {":""}
                            return (
                                <HStack>
                                    {getValue<any[]>()?.map((item, index) => (
                                        <Image src={${V}} key={index} sx={{ height: "50px", maxWidth: "100px" }} />
                                    ))}
                                </HStack>
                            )
                        ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${b},
                    ${H},
                    ${w},
                    ${S}
                }
            `}},x=r=>{if(r.type==="email"){a.push(["EmailField","@refinedev/chakra-ui"]);let b=`id: "${r.key}"`,H=q(r),w=`header: "${f(r.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <EmailField value={${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}} />
                }
            `;return r.multiple&&(a.push(["TagField","@refinedev/chakra-ui"]),S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${b},
                    ${H},
                    ${w},
                    ${S}
                }
            `}},I=r=>{if(r.type==="url"){a.push(["UrlField","@refinedev/chakra-ui"]);let b=`id: "${r.key}"`,H=q(r),w=`header: "${f(r.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <UrlField value={${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                }
            `;return r.multiple&&(a.push(["TagField","@refinedev/chakra-ui"]),S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${b},
                    ${H},
                    ${w},
                    ${S}
                }
            `}},c=r=>{if((r==null?void 0:r.type)==="boolean"){a.push(["BooleanField","@refinedev/chakra-ui"]);let b=`id: "${r.key}"`,H=q(r),w=`header: "${f(r.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <BooleanField value={${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                }
            `;return r.multiple&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <BooleanField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${b},
                    ${H},
                    ${w},
                    ${S}
                }
            `}},T=r=>{if(r.type==="date"){a.push(["DateField","@refinedev/chakra-ui"]);let b=`id: "${r.key}"`,H=q(r),w=`header: "${f(r.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <DateField value={${l("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}} />
                }
            `;return r.multiple&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <DateField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${b},
                    ${H},
                    ${w},
                    ${S}
                }
            `}},p=r=>{if((r==null?void 0:r.type)==="richtext"){a.push(["MarkdownField","@refinedev/chakra-ui"]);let b=`id: "${r.key}"`,H=q(r),w=`header: "${f(r.key)}"`,S=g`
                cell: function render({ getValue }) {
                    return <MarkdownField value={(${l("getValue<string>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0)})?.slice(0, 80) + "..." } />
                }
            `;return r.multiple&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<string[]>()?.map((item, index) => (
                                    <MarkdownField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${b},
                    ${H},
                    ${w},
                    ${S}
                }
            `}},i=r=>{if(r&&(r.type==="text"||r.type==="number")){let b=`id: "${r.key}"`,H=q(r),w=`header: "${f(r.key)}"`,S="";return r.multiple&&(a.push(["TagField","@refinedev/chakra-ui"]),S=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${l("item",void 0,r.accessor,' + " " + ')}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),!r.multiple&&Array.isArray(r.accessor)&&(S=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${l("getValue<any>()",r.key,r.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${b},
                    ${H},
                    ${w},
                    ${S}
                }
            `}},{canEdit:v,canShow:$,canDelete:A}=e!=null?e:{};v&&a.push(["EditButton","@refinedev/chakra-ui"]),$&&a.push(["ShowButton","@refinedev/chakra-ui"]),A&&a.push(["DeleteButton","@refinedev/chakra-ui"]);let L=v||$||A?g`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <HStack>
                ${$?g`
                    <ShowButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${v?g`
                    <EditButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${A?g`
                    <DeleteButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                </HStack>
            );
        },
    },
        `:"",o=t.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":return i(r);case"richtext":return p(r);case"email":return x(r);case"image":return F(r);case"date":return T(r);case"boolean":return c(r);case"url":return I(r);case"relation":return k(r);default:return}});return U(a),g`
    import React from "react";
    ${O(a)}
    
    export const ${n}: React.FC<IResourceComponentsProps> = () => {
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...o,L].filter(Boolean).join(",")}
        ], []);

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                setCurrent,
                pageCount,
                current,
                tableQueryResult: { data: tableData },
            },
        } = useTable({
            columns,
            ${s?`
            refineCoreProps: {
                resource: "${e.name}",
            }
            `:""}
            
        });

        ${h}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${d.join(", ")}
            },
        }));

        return (
            <List>
                <TableContainer whiteSpace="pre-line">
                    <Table variant="simple">
                        <Thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <Tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <Th key={header.id}>
                                            {!header.isPlaceholder && (
                                                flexRender(
                                                    header.column.columnDef
                                                        .header,
                                                    header.getContext(),
                                                )
                                            )}
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody>
                            {getRowModel().rows.map((row) => (
                                <Tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <Td key={cell.id}>
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </Td>
                                    ))}
                                </Tr>
                            ))}
                        </Tbody>
                    </Table>
                </TableContainer>
                <Pagination
                    current={current}
                    pageCount={pageCount}
                    setCurrent={setCurrent}
                />
            </List>   
        );
    };

    type PaginationProps = {
        current: number;
        pageCount: number;
        setCurrent: (page: number) => void;
    };

    const Pagination: React.FC<PaginationProps> = ({
        current,
        pageCount,
        setCurrent,
    }) => {
        const pagination = usePagination({
            current,
            pageCount,
        });
    
        return (
            <Box display="flex" justifyContent="flex-end">
                <HStack my="3" spacing="1">
                    {pagination?.prev && (
                        <IconButton
                            aria-label="previous page"
                            onClick={() => setCurrent(current - 1)}
                            disabled={!pagination?.prev}
                            variant="outline"
                        >
                            <IconChevronLeft size="18" />
                        </IconButton>
                    )}
    
                    {pagination?.items.map((page) => {
                        if (typeof page === "string")
                            return <span key={page}>...</span>;
    
                        return (
                            <Button
                                key={page}
                                onClick={() => setCurrent(page)}
                                variant={page === current ? "solid" : "outline"}
                            >
                                {page}
                            </Button>
                        );
                    })}
                    {pagination?.next && (
                        <IconButton
                            aria-label="next page"
                            onClick={() => setCurrent(current + 1)}
                            variant="outline"
                        >
                            <IconChevronRight size="18" />
                        </IconButton>
                    )}
                </HStack>
            </Box>
        );
    };
    `},Ce=P({type:"list",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",st],["@refinedev/react-table","RefineReactTable",ct],["@tabler/icons","TablerIcons",mt],["@chakra-ui/react","ChakraUI",it],["@tanstack/react-table","TanstackReactTable",ut]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:cr});import*as pt from"@refinedev/core";import*as lt from"@refinedev/chakra-ui";import*as dt from"@chakra-ui/react";import*as gt from"@refinedev/react-hook-form";import*as yt from"react-hook-form";var ur=({resource:e,fields:t,isCustomPage:s})=>{var I;let n=B((I=e.label)!=null?I:e.name,"create"),u=[["Create","@refinedev/chakra-ui"],["FormControl","@chakra-ui/react"],["FormLabel","@chakra-ui/react"],["FormErrorMessage","@chakra-ui/react"],["useForm","@refinedev/react-hook-form"]],m=t.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{if((c==null?void 0:c.relation)&&!c.fieldable&&c.resource)return u.push(["useSelect","@refinedev/core"]),`
                const { options: ${C(c.key,"Options")} } =
                useSelect({
                    resource: "${c.resource.name}",
                    ${ee(c)}
                });
            `}).filter(Boolean),h=c=>{if(c.relation&&c.resource){u.push(["useSelect","@refinedev/core"]),u.push(["Select","@chakra-ui/react"]);let T=C(c.key,"Options");return g`
            <FormControl mb="3" isInvalid={!!errors?.${N(c.key,void 0)}}>
                <FormLabel>${f(c.key)}</FormLabel>
                <Select
                    placeholder="Select ${D(c.resource.name)}"
                    {...register("${N(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${T}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${l("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},d=c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext")return J(c.key)||(u.push(["Input","@chakra-ui/react"]),c.multiple)?void 0:g`
                <FormControl mb="3" isInvalid={!!${l("(errors as any)",c.key,c.accessor,!1)}}>
                    <FormLabel>${f(c.key)}</FormLabel>
                    <Input
                        ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                        {...register("${N(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                            ${c.type==="number"?"valueAsNumber: true,":""}
                        })}
                    />
                    <FormErrorMessage>
                        {${l("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `},k=c=>{if(c.type==="boolean")return u.push(["Checkbox","@chakra-ui/react"]),c.multiple?void 0:g`
                <FormControl mb="3" isInvalid={!!${l("errors",c.key,c.accessor,!1)}}>
                    <FormLabel>${f(c.key)}</FormLabel>
                    <Checkbox
                        {...register("${N(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${l("errors",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `},F=c=>{if(c.type==="date"){let T=d(c);return`
                {/* 
                    DatePicker component is not included in "@refinedev/chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${T!=null?T:""}
                `}},x=t.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return d(c);case"date":return F(c);case"boolean":return k(c);case"relation":return h(c);default:return}});return U(u),g`
    ${O(u)}
    
    export const ${n} = () => {
        const {
            refineCore: { formLoading },
            saveButtonProps,
            register,
            formState: { errors },
        } = useForm(
            ${s?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );
    
        ${m}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${x.join("")}
            </Create>
        );
    };
    `},ve=P({type:"create",additionalScope:[["@refinedev/core","RefineCore",pt],["@refinedev/chakra-ui","RefineChakraUI",lt],["@refinedev/react-hook-form","RefineReactHookForm",gt],["@chakra-ui/react","ChakraUI",dt],["react-hook-form","ReactHookForm",yt]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:ur});import*as ft from"@refinedev/core";import*as ht from"@refinedev/chakra-ui";import*as kt from"@chakra-ui/react";import*as It from"@refinedev/react-hook-form";import*as $t from"react-hook-form";var mr=({resource:e,fields:t,isCustomPage:s,id:n})=>{var T,p;let u=B((T=e.label)!=null?T:e.name,"edit"),a=C((p=e.label)!=null?p:e.name,"Data"),m=[["React","react",!0],["Edit","@refinedev/chakra-ui"],["FormControl","@chakra-ui/react"],["FormLabel","@chakra-ui/react"],["FormErrorMessage","@chakra-ui/react"],["useForm","@refinedev/react-hook-form"]],d=t.filter(i=>(i==null?void 0:i.relation)&&!(i!=null&&i.fieldable)&&(i==null?void 0:i.resource)).filter(Boolean).map(i=>{if((i==null?void 0:i.relation)&&!i.fieldable&&i.resource){m.push(["useSelect","@refinedev/core"]);let v=l(a,i.key,i.accessor,!1);return i.multiple&&i.accessor&&(v=`${l(a,i.key)}?.map((item: any) => ${l("item",void 0,i.accessor)})`),`
                const { options: ${C(i.key,"Options")} } =
                useSelect({
                    resource: "${i.resource.name}",
                    defaultValue: ${v},
                    ${ee(i)}
                });

                React.useEffect(() => {
                    resetField("${N(i.key,void 0,i.accessor)}");
                }, [${C(i.key,"Options")}]);
            `}}).filter(Boolean),k=i=>{if(i.relation&&i.resource){m.push(["useSelect","@refinedev/core"]),m.push(["Select","@chakra-ui/react"]);let v=C(i.key,"Options");return g`
            <FormControl mb="3" isInvalid={!!errors?.${N(i.key,void 0)}}>
                <FormLabel>${f(i.key)}</FormLabel>
                <Select
                    placeholder="Select ${D(i.resource.name)}"
                    {...register("${N(i.key,void 0,i.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${v}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${l("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},F=i=>{if(i.type==="text"||i.type==="url"||i.type==="email"||i.type==="number"||i.type==="date"||i.type==="richtext"){if(m.push(["Input","@chakra-ui/react"]),i.multiple){let v=N(i.key,"${index}",i.accessor),$=l(l("(errors as any)",i.key,void 0,!1)+"?.[index]",void 0,i.accessor);return`
                    <>
                        {${l(a,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${$}}>
                                <FormLabel>${f(i.key)} #{index + 1}</FormLabel>
                                <Input
                                    {...register(\`${v}\`, {
                                        required: "This field is required",
                                        ${i.type==="number"?"valueAsNumber: true,":""}
                                    })}
                                />
                                <FormErrorMessage>
                                    {${l($,"message")} as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return g`
                <FormControl mb="3" isInvalid={!!${l("(errors as any)",i.key,i.accessor,!1)}}>
                    <FormLabel>${f(i.key)}</FormLabel>
                    <Input
                        ${J(i.key)?"disabled":""}
                        ${i.type!=="date"&&i.type!=="richtext"?`type="${i.type}"`:""}
                        {...register("${N(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                            ${i.type==="number"?"valueAsNumber: true,":""}
                        })}
                    />
                    <FormErrorMessage>
                        {${l("(errors as any)",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `}},x=i=>{if(i.type==="boolean"){if(m.push(["Checkbox","@chakra-ui/react"]),i.multiple){let v=N(i.key,void 0,i.accessor),$=l("(errors as any)",i.key,void 0,!1)+"?.[index]";return`
                    <>
                        {${l(a,i.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${$}}>
                                <FormLabel>${f(i.key)} #{index + 1}</FormLabel>
                                <Checkbox
                                    {...register(\`${v}.\${index}\`, {
                                        required: "This field is required",
                                    })}
                                />
                                <FormErrorMessage>
                                    {${$}?.message as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return g`
                <FormControl mb="3" isInvalid={!!${l("errors",i.key,i.accessor,!1)}}>
                    <FormLabel>${f(i.key)}</FormLabel>
                    <Checkbox
                        {...register("${N(i.key,void 0,i.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${l("errors",i.key,i.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `}},I=i=>{if(i.type==="date")return`
                {/* 
                    DatePicker component is not included in "@refinedev/chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${F(i)}
                `},c=t.map(i=>{switch(i==null?void 0:i.type){case"text":case"number":case"email":case"url":case"richtext":return F(i);case"date":return I(i);case"boolean":return x(i);case"relation":return k(i);default:return}});return U(m),g`
    ${O(m)}
    
    export const ${u} = () => {
        const {
            refineCore: { formLoading, queryResult },
            saveButtonProps,
            register,
            resetField,
            formState: { errors },
        } = useForm(
            ${s?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${n},
                    action: "edit",
                }
            }`:""}
        );
    
        const ${a} = queryResult?.data?.data;
    
        ${d}

        return (
            <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${c.join("")}
            </Edit>
        );
    };
    `},Ae=P({type:"edit",additionalScope:[["@refinedev/core","RefineCore",ft],["@refinedev/chakra-ui","RefineChakraUI",ht],["@refinedev/react-hook-form","RefineReactHookForm",It],["@chakra-ui/react","ChakraUI",kt],["react-hook-form","ReactHookForm",$t]],codeViewerComponent:_,loadingComponent:K,errorComponent:j,renderer:mr});var Ba=({action:e,id:t,...s})=>{let{action:n,id:u}=bt();switch(e!=null?e:n){case"show":return ae.createElement(xe,{...s,id:t!=null?t:u});case"create":return ae.createElement(ve,{...s,id:t!=null?t:u});case"edit":return ae.createElement(Ae,{...s,id:t!=null?t:u});default:return ae.createElement(Ce,{...s,id:t!=null?t:u})}};export{ve as ChakraUICreateInferencer,ur as ChakraUICreateRenderer,Ae as ChakraUIEditInferencer,mr as ChakraUIEditRenderer,Ba as ChakraUIInferencer,Ce as ChakraUIListInferencer,cr as ChakraUIListRenderer,xe as ChakraUIShowInferencer,ir as ChakraUIShowRenderer};
//# sourceMappingURL=chakra-ui.js.map