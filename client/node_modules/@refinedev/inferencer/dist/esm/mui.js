import se from"react";import{useResource as Ft}from"@refinedev/core";import*as Yr from"@refinedev/mui";import*as Jr from"@emotion/react";import*as Qr from"@emotion/styled";import*as et from"@mui/lab";import*as rt from"@mui/material";import*as tt from"@mui/x-data-grid";import W from"react";import{useResource as ar}from"@refinedev/core";var pr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,ce=(e,t)=>{let i=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"];pr.test(e)&&i.unshift("url");let n=i.find(u=>u in t&&!!t[u]);if(n)return n==="firstName"&&"lastName"in t?["firstName","lastName"]:n};import{pickNotDeprecated as lr}from"@refinedev/core";function ue(e,t,i){if(t)return t;let n=i==null?void 0:i.find(s=>s.name===e),u=lr(n==null?void 0:n.meta,n==null?void 0:n.options);return u!=null&&u.dataProviderName?u.dataProviderName:"default"}var J=e=>{var t;return(t=e==null?void 0:e.options)==null?void 0:t.dataProviderName};var me=e=>{let t=[...e].filter(Boolean).sort((i,n)=>(n.priority||0)-(i.priority||0))[0];return t||null};import dr from"prettier/standalone";import yr from"prettier/parser-typescript";var pe=e=>{try{return dr.format(e,{parser:"typescript",plugins:[yr],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(t){return console.warn("Formatting error in inferencer",t),e}};var le=e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`);var de=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Ne=(e,t)=>{let i=de.test(e),n=typeof t=="string"||typeof t=="number",u=Array.isArray(t)&&t.every(s=>typeof s=="string"||typeof s=="number");return i&&n||i&&u?{key:e,relation:!0,multiple:!!u,type:"relation",priority:1}:!1};var P=e=>e.replace(de,"");var f=e=>P(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(m=>m.charAt(0).toUpperCase()+m.slice(1)).join(" ");var ye=e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(u=>!u.trim().startsWith("export default")).join(`
`);var Le=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,fr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,gr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,fe=(e,t={})=>{let i=e.matchAll(Le),n=new Set;for(let u of i){let[,s,m,y,d]=u;if(d in t){let g=t[d];if(d==="react")continue;s&&n.add(`const { default: ${s} } = ${g};`),m&&n.add(`const${m.replace(gr,"$1: $3$4")} = ${g};`),y&&n.add(`const ${y} = ${g};`)}}return le(`
    ${Array.from(n).join(`
`)}
    ${e.replace(Le,"").replace(fr,"")}
    `)};import oe from"pluralize";var ge=(e,t)=>e?t.find(n=>{let u=P(e.key);return n.name===u||n.name===(oe.isPlural(u)?u:oe.plural(u))||n.name===(oe.isSingular(u)?u:oe.singular(u))}):void 0;import hr from"pluralize";var B=(e,t,i="Inferred")=>{let n=e.replace(/[^a-zA-Z0-9]/g," "),u=hr.singular(n),m=f(u).replace(/ /g,"")||i,y=t.charAt(0).toUpperCase()+t.slice(1);return/^[a-zA-Z]/.test(m)?`${m}${y}`:`${y}${m}`};var $r=e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"",I=(e,...t)=>e.reduce((n,u,s)=>`${n}${u}${$r(t[s])}`,"").trim();var he=(e,t)=>`
    ${e!=null?e:""}
    
    render(typeof ${t} !== "undefined" ? <${t} /> : <></>);
    `;var $e=e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,"");var Ir=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,Ie=e=>Ir.test(e);function xe(e,t,i){let n=`${e}`;return t&&(n+="?.",Ie(t)?n+=t:n+=`['${t}']`),i&&(n+="?.",Ie(i)?n+=i:n+=`['${i}']`),n}function xr(e,t,i){return(i!=null?i:[]).map(u=>xe(e,t,u))}var l=(e,t,i,n=' + " " + ')=>Array.isArray(i)?n?xr(e,t,i).join(n):xe(e,t,i[0]):xe(e,t,i),E=(e,t,i)=>{let n=e;return t&&(n+=`.${t}`),i&&(Array.isArray(i)?n+=`.${i[0]}`:n+=`.${i}`),n};var O=e=>{let t=e.reduce((n,[u,s,m])=>(n[s]||(n[s]=[]),n[s].includes(u)||(m?n[s].push([u,!0]):n[s].push(u)),n),{});return Object.entries(t).map(([n,u])=>{let s=u.find(g=>Array.isArray(g)&&g[1]),m=u.filter(g=>typeof g=="string"),y=s?`${s[0]}`:"",d=m.length?`{ ${m.join(", ")} }`:"";return`import ${y}${y&&d?", ":""}${d} from "${n}";`})};import Me from"pluralize";var X=(e="")=>Me.isSingular(e)?e:Me.singular(e);import Ee from"pluralize";var Z=(e="")=>Ee.isPlural(e)?e:Ee.plural(e);var kr=/^id$/i,q=e=>kr.test(e);var G=e=>{};var R=(e,t="")=>{if(Number.isInteger(Number(e)))return t.charAt(0).toLowerCase()+t.slice(1)+e;let n=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),u=f(n).replace(/ /g,"");return`${u.charAt(0).toLowerCase()+u.slice(1)}${t.charAt(0).toUpperCase()+t.slice(1)}`};var Pe=e=>{let t=(i,n,u,s=t)=>{let m=e.map(d=>d(i,n,u,s));return me(m)};return t};var Be=e=>(i,n,u,s,m)=>e.reduce((y,d)=>d(y,n,u,s,m),i);var De=(e,t,i,n)=>{let u=Array.isArray(t),s=Array.isArray(t)&&t.every(m=>typeof m=="string"||typeof m=="number");if(u){if(!s){let y=n(e,t[0],i,n);return y?{...y,key:e,multiple:!0,priority:1}:!1}let m=n(e,t[0],i,n)||{type:"string"};return{key:e,multiple:!0,priority:1,type:m==null?void 0:m.type}}return!1};var Ve=(e,t)=>typeof t=="boolean"?{key:e,type:"boolean"}:!1;import We from"dayjs";var vr=/(_at|_on|At|On|AT|ON)(\[\])?$/,br=["/",":","-","."],Oe=(e,t)=>{let i=vr.test(e)&&We(t).isValid(),n=typeof t=="string"&&We(t).isValid();return typeof t=="string"&&br.some(s=>t.includes(s))&&(i||n)?{key:e,type:"date",priority:1}:!1};var Cr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,Ge=(e,t)=>typeof t=="string"&&Cr.test(t)?{key:e,type:"email",priority:1}:!1;var Fr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,je=(e,t)=>typeof t=="string"&&Fr.test(t)?{key:e,type:"image",priority:2}:!1;var He=(e,t)=>typeof t>"u"||t===null?null:!1;var _e=(e,t)=>{let i=typeof t=="string"&&t.length>0,n=!isNaN(t);return i&&n||typeof t=="number"?{key:e,type:"number"}:!1};var Ar=/id$/i,ze=(e,t,i,n)=>{let u=t!==null,s=!Array.isArray(t);if(u&&s&&typeof t=="object"){if(Object.keys(t).length===1&&Ar.test(Object.keys(t)[0]))return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let d=ce(e,t);if((d?d.length>0:!1)&&d){let v=d&&Array.isArray(d)?d[0]:d,b=n(v,t[v],t,n);if(b){let $=Array.isArray(d)?d.map(c=>b.accessor?`${c}.${Array.isArray(b.accessor)?b.accessor[0]:b.accessor}`:c):b.accessor?Array.isArray(b.accessor)?`${d}.${b.accessor[0]}`:`${d}.${b.accessor}`:d;return{...b,fieldable:!0,key:e,accessor:$,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1};var qe=(e,t)=>typeof t=="string"&&t.length>100?{key:e,type:"richtext",priority:1}:!1;var Ke=(e,t)=>typeof t=="string"?{key:e,type:"text"}:!1;var Tr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,Ue=(e,t)=>typeof t=="string"&&Tr.test(t)?{key:e,type:"url",priority:1}:!1;var Xe=[De,Ve,Oe,Ge,je,He,_e,ze,Ne,qe,Ke,Ue];var Ze=(e,t,i,n)=>e.map(s=>{if(!s.relation&&(s.type==="text"||s.type==="richtext"||s.type==="number")&&!s.canRelation){let m=/^[a-z0-9-]+$/,y=$=>m.test(`${$}`),d=s.key.toLowerCase()!=="id";return!(!s.accessor||typeof s.accessor=="string")||!d?s:(s.multiple?n[s.key]:[n[s.key]]).every($=>y(s.accessor?$[s.accessor]:$))?{...s,canRelation:!0}:s}return s});var wr=/(image|photo|avatar|cover|thumbnail|icon)/i,Ye=e=>e.map(i=>i.type==="url"&&wr.test(i.key)?{...i,type:"image"}:i);var Je=(e,t)=>e.map(n=>{let u=ge(n,t);return u?{...n,relation:!0,type:"relation",resource:u}:n});var Qe=(e,t,i,n,u)=>e.map(m=>{if(m.relation&&m.type==="relation"&&!m.resource){let y=m.accessor?n[m.key][m.accessor]:n[m.key],d=u(m.key,y,n,u);if(d&&d.type!=="relation")return{...m,fieldable:!0,relation:!1,type:d.type,canRelation:!0}}return m});var er=[Ye,Je,Qe,Ze];import Q,{useEffect as Sr}from"react";import Rr,{defaultProps as Nr}from"prism-react-renderer";import Lr from"prism-react-renderer/themes/vsDark";var ke=({code:e,wrapperProps:t})=>(Sr(()=>{var n;let i=document.createElement("style");i.appendChild(document.createTextNode(`
                #code-highlight::-webkit-scrollbar {-webkit-appearance: none; height: 7px; width: 7px;}
                #code-highlight::-webkit-scrollbar-thumb {background-color: #666b7a;}
                #code-highlight::-webkit-scrollbar-corner {background-color: rgb(30, 30, 30);}
                `)),(n=document.getElementById("code-highlight"))==null||n.appendChild(i)},[]),Q.createElement("div",{id:"code-highlight",style:{maxHeight:"75vh",height:"100%",overflow:"auto",backgroundColor:"rgb(30, 30, 30)"},...t!=null?t:{}},Q.createElement(Rr,{...Nr,theme:Lr,code:e,language:"tsx"},({className:i,style:n,tokens:u,getLineProps:s,getTokenProps:m})=>Q.createElement("pre",{className:i,style:{...n,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},u.map((y,d)=>Q.createElement("div",{key:d,...s({line:y,key:d})},y.map((g,v)=>Q.createElement("span",{key:v,...m({token:g,key:v})}))))))));import D from"react";import*as Mr from"@refinedev/core";import{LivePreview as Er,LiveProvider as Pr}from"@aliemir/react-live";var rr=[["react","React",D],["@refinedev/core","RefineCore",Mr]],ve=D.createContext({}),be=({fetchError:e,code:t,additionalScope:i,errorComponent:n})=>{var y;let u=(y=t&&ye(fe(t,[...rr,...i!=null?i:[]].reduce((d,[g,v,b,$])=>$?d:{...d,[g]:v},{}))))!=null?y:"",s=D.useMemo(()=>({React:D,...D,...[...rr,...i!=null?i:[]].reduce((d,[g,v,b])=>({...d,[v]:b}),{})}),[i]),m=D.useMemo(()=>()=>{let{error:g}=D.useContext(ve);return n?D.createElement(n,{error:g?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${g}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},[n,e]);return D.createElement(Pr,{Context:ve,code:u,scope:s,noInline:!0},!e&&D.createElement(Er,{Context:ve}),D.createElement(m,null))};import Y from"react";import{useDataProvider as Br,useResource as Dr}from"@refinedev/core";var tr=(e,t,i)=>{let{resource:n,id:u,resources:s}=Dr(t),m=i!=null?i:u,y=Br(),[d,g]=Y.useState(void 0),[v,b]=Y.useState(void 0),[$,c]=Y.useState(!0),[T,p]=Y.useState(!1),a=Y.useCallback(async F=>{var o,h;let x=(o=J(n))!=null?o:ue(n==null?void 0:n.name,void 0,s),C=y(x);p(!0),g(void 0);try{if((e==="list"||e==="create")&&n){let r=(h=(await C.getList({resource:n==null?void 0:n.name})).data)==null?void 0:h[0];r||g(`<p>No records/data found for resource "${n==null?void 0:n.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),b(r),setTimeout(()=>{p(!1)},500)}if((e==="edit"||e==="show")&&F&&n){let r=(await C.getOne({resource:n==null?void 0:n.name,id:F})).data;r||g(`<p>No records/data found for resource "${n==null?void 0:n.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),b(r),setTimeout(()=>{p(!1)},500)}}catch(L){console.warn("An error occured while fetching the resource data. Please check the error message below:",L),g(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${n==null?void 0:n.name}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{p(!1)},500)}},[e,y,n,s]);return Y.useEffect(()=>{c(!1),!T&&!v&&a(m)},[a,m]),{data:v,loading:T,initial:$,error:d}};import ee from"react";import{useDataProvider as Vr}from"@refinedev/core";import{get as nr}from"lodash";var or=({record:e,fields:t,infer:i})=>{let n=Vr(),[u,s]=ee.useState([]),[m,y]=ee.useState(!0),[d,g]=ee.useState(!1),v=ee.useCallback(async b=>{console.groupCollapsed("@refinedev/inferencer is trying to detect relations");let $=[];g(!0);try{let c=b.map(async p=>{if(p&&(p.relation||p.canRelation)&&e){let a=J(p.resource),F=n(a),x=Array.isArray(p.accessor)?void 0:p.multiple?e[p.key].map(C=>p.accessor?nr(C,p.accessor):C)[0]:p.accessor?nr(e[p.key],p.accessor):e[p.key];if(x&&p.resource)try{let{data:C}=await F.getOne({resource:p.resource.name,id:x});$.push({status:"success",resource:p.resource.name,field:p.key});let o=i("__",C,{},i);return{...p,relationInfer:o}}catch{return $.push({status:"error",resource:p.resource.name,field:p.key}),{...p,relationInfer:null}}if(x){let C,o;try{let{data:r}=await F.getOne({resource:Z(P(p.key)),id:x});$.push({status:"success",resource:Z(P(p.key)),field:p.key}),C=r,o=!0}catch{$.push({status:"error",resource:Z(P(p.key)),field:p.key});try{let{data:k}=await F.getOne({resource:X(P(p.key)),id:x});$.push({status:"success",resource:X(P(p.key)),field:p.key}),C=k,o=!1}catch{return $.push({status:"error",resource:X(P(p.key)),field:p.key}),{...p,relationInfer:null}}}let h=i("__",C,{},i),L=P(p.key);return{...p,relation:!0,type:"relation",resource:{name:o?Z(L):X(L)},fieldable:!1,canRelation:void 0,relationInfer:h}}return{...p,relationInfer:null}}return p}),T=await Promise.all(c);s(T.filter(p=>p)),setTimeout(()=>{g(!1)},500)}catch{setTimeout(()=>{g(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${$.length} attempts and succeeded with ${$.filter(c=>c.status==="success").length} attempts.`),console.groupEnd()},500)},[n,e]);return ee.useEffect(()=>{y(!1),!d&&t&&t.length>0&&u.length===0&&v(t)},[v,d,t,v]),{fields:u,loading:d,initial:m}};var j=({type:e,additionalScope:t=[],customElements:i=[],fieldTransformers:n=[],renderer:u,loadingComponent:s,errorComponent:m,codeViewerComponent:y})=>{let d=Pe([...Xe,...i]),g=Be([...er,...n]),v=({resourceName:$,fieldTransformer:c,id:T})=>{var N,A,M,re,te,ne;let{resource:p,resources:a}=ar($),{resource:F}=ar(),{data:x,loading:C,initial:o,error:h}=tr(e,$!=null?$:p==null?void 0:p.name,T),L=W.useMemo(()=>{if(x){let K=Object.keys(x).map(V=>{let U=x[V];return d(V,U,x,d)}).filter(Boolean);if(p){let V=g(K,a,p,x,d);return c?V.flatMap(ie=>{let Re=c(ie);return Re?[Re]:[]}):V}return[]}return[]},[x,a,p,c]),{fields:r,loading:k}=or({record:x,fields:L,infer:d}),S=W.useMemo(()=>!C&&!k&&!o&&p?u({resource:p,resources:a,fields:r,infer:d,isCustomPage:p.name!==(F==null?void 0:F.name),id:T}):"",[p,a,r,C,k]);return W.createElement(W.Fragment,null,s&&(C||k)&&W.createElement(s,null),!C&&!k&&W.createElement(W.Fragment,null,W.createElement(be,{fetchError:!C&&h?h:!C&&!o&&!x,code:he(S,B((ne=(te=(re=(M=(N=p==null?void 0:p.meta)==null?void 0:N.label)!=null?M:(A=p==null?void 0:p.options)==null?void 0:A.label)!=null?re:p==null?void 0:p.label)!=null?te:p==null?void 0:p.name)!=null?ne:"Resource",e)),errorComponent:m,additionalScope:t}),y&&W.createElement(y,{code:$e(S),loading:C||k})))};return({name:$,resource:c,fieldTransformer:T,id:p})=>W.createElement(v,{fieldTransformer:T,resourceName:c!=null?c:$,key:c!=null?c:$,id:p})};import ae from"react";import{Alert as Wr,AlertTitle as Or,Box as Gr}from"@mui/material";var H=({error:e})=>e?ae.createElement(Gr,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"200px"}},ae.createElement(Wr,{severity:"error"},ae.createElement(Or,null,"Error"),ae.createElement("div",{dangerouslySetInnerHTML:{__html:e!=null?e:""}}))):null;import sr from"react";import{Box as jr,CircularProgress as Hr}from"@mui/material";var _=()=>sr.createElement(jr,{style:{display:"flex",justifyContent:"center",alignItems:"center",minHeight:"300px"}},sr.createElement(Hr,{size:"large"}));import w from"react";import{Button as Ce,Box as Fe,Modal as _r,IconButton as zr}from"@mui/material";import{IconCode as qr,IconMessageCircle as Kr,IconX as Ur,IconCopy as Xr,IconCheck as Zr}from"@tabler/icons";var z=({code:e,loading:t})=>{let i=w.useMemo(()=>pe(e!=null?e:""),[e]),n=w.useRef(null),[u,s]=w.useState(!1),[m,y]=w.useState(!1);if(t)return null;let d=()=>{var g,v,b,$;(g=n==null?void 0:n.current)==null||g.select(),(v=n==null?void 0:n.current)==null||v.setSelectionRange(0,99999),typeof navigator<"u"&&(navigator.clipboard.writeText(($=(b=n==null?void 0:n.current)==null?void 0:b.value)!=null?$:""),y(!0),setTimeout(()=>{y(!1)},1e3))};return i?w.createElement(w.Fragment,null,w.createElement(Fe,{sx:{position:"fixed",bottom:12,right:60}},w.createElement(Fe,{sx:{display:"flex",gap:2}},w.createElement(Ce,{variant:"contained",color:"primary",onClick:()=>s(!0),startIcon:w.createElement(qr,{size:18}),sx:{whiteSpace:"nowrap"}},"Show Code"),w.createElement(Ce,{variant:"contained",color:"secondary",component:"a",target:"_blank",href:"https://github.com/refinedev/refine/discussions/3046",startIcon:w.createElement(Kr,{size:18}),sx:{whiteSpace:"nowrap"}},"Give Feedback"))),w.createElement("div",{style:{height:"50px"}}),w.createElement(_r,{open:u,onClose:()=>s(!1)},w.createElement(Fe,{sx:{position:"absolute",maxWidth:"800px",width:"100%",top:"50%",left:"50%",transform:"translate(-50%, -50%)",boxShadow:24}},w.createElement(zr,{onClick:()=>s(!1),disableRipple:!0,sx:{position:"absolute",right:0,top:0,height:56,width:56,display:"flex",alignItems:"center",justifyContent:"center"}},w.createElement(Ur,{size:18,style:{color:"#666b7a"}})),w.createElement(ke,{code:i}),w.createElement("textarea",{ref:n,defaultValue:(i!=null?i:"").replace(/\\n/g,`\r
`),id:"code-input",style:{display:"none"}}),w.createElement("div",{style:{position:"absolute",bottom:12,right:12}},w.createElement(Ce,{key:"copy",sx:{textTransform:"capitalize",width:100},startIcon:m?w.createElement(Zr,{size:18,style:{color:"green"}}):w.createElement(Xr,{size:18}),color:"inherit",variant:"contained",onClick:d},m?"Copied":"Copy"))))):null};var ir=({resource:e,fields:t,isCustomPage:i,id:n})=>{var C;let u=B((C=e.label)!=null?C:e.name,"show"),s="record",m=[["useShow","@refinedev/core"],["Show","@refinedev/mui"],["Typography","@mui/material"],["Stack","@mui/material"]],d=t.filter(o=>(o==null?void 0:o.relation)&&!(o!=null&&o.fieldable)&&(o==null?void 0:o.resource)).filter(Boolean).map(o=>{if((o==null?void 0:o.relation)&&!o.fieldable&&o.resource){if(o.multiple){m.push(["useMany","@refinedev/core"]);let h=l(s,o.key);return o.accessor&&(h=`${l(s,o.key)}?.map((item: any) => ${l("item",void 0,o.accessor)})`),`
                const { data: ${R(o.key,"Data")}, isLoading: ${R(o.key,"IsLoading")} } =
                useMany({
                    resource: "${o.resource.name}",
                    ids: ${h} || [],
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
                `}return m.push(["useOne","@refinedev/core"]),`
                const { data: ${R(o.key,"Data")}, isLoading: ${R(o.key,"IsLoading")} } =
                useOne({
                    resource: "${o.resource.name}",
                    id: ${l(s,o.key,o.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${s},
                    },
                });
            `}}).filter(Boolean),g=o=>{if(o.relation&&o.resource){let h=R(o.key,"Data"),L=R(o.key,"IsLoading");return o.multiple?(m.push(["TagField","@refinedev/mui"]),I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                {${L} ? (
                    <>
                        Loading...
                    </>
                    ) : (
                    <>
                    ${(()=>{var r;if(o.relationInfer)if((r=o.relationInfer)!=null&&r.accessor){if(Array.isArray(o.relationInfer.accessor))return"Not Handled.";{let k=R(o.key),S=l(k,void 0,o.relationInfer.accessor);return`
                                        <Stack direction="row" spacing={1}>
                                            {${h}?.data?.map((${k}: any) => (
                                                <TagField key={${S}} value={${S}} />
                                            ))}
                                        </Stack>
                                    `}}else return"Not Handled.";else return"not-handled - relation with multiple but no resource"})()}
                    </>
                )}
                `):I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>

                {${L} ? (
                    <>Loading...</>
                ) : (
                    <>
                    ${(()=>{var r;return o.relationInfer?(r=o.relationInfer)!=null&&r.accessor?Array.isArray(o.relationInfer.accessor)?`{${l(`${h}?.data`,void 0,o.relationInfer.accessor,' + " " + ')}}`:`{${h}?.data?.${o.relationInfer.accessor}}`:`{${h}?.data}`:`{${h}?.data?.id}`})()}
                    </>
                )}
                `}},v=o=>{if(o.type==="text"){if(m.push(["TextFieldComponent as TextField","@refinedev/mui"]),o.multiple){m.push(["TagField","@refinedev/mui"]);let h=l("item",void 0,o.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <TextField value={${l(s,o.key,o.accessor)}} />
            `}},b=o=>{if(o.type==="image"){if(o.multiple){let h=l("item",void 0,o.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(s,o.key)}?.map((item: any) => (
                    <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <img style={{ maxWidth: 200, width: "100%", height: 200 }} src={${l(s,o.key,o.accessor," + ")}} />
                `}},$=o=>{if(o.type==="email"){if(m.push(["EmailField","@refinedev/mui"]),o.multiple){m.push(["TagField","@refinedev/mui"]);let h=l("item",void 0,o.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <EmailField value={${l(s,o.key,o.accessor," + ")}} />
            `}},c=o=>{if(o.type==="url"){if(m.push(["UrlField","@refinedev/mui"]),o.multiple){m.push(["TagField","@refinedev/mui"]);let h=l("item",void 0,o.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <UrlField value={${l(s,o.key,o.accessor," + ")}} />
            `}},T=o=>{if(o.type==="boolean"){if(m.push(["BooleanField","@refinedev/mui"]),o.multiple){m.push(["TagField","@refinedev/mui"]);let h=l("item",void 0,o.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(s,o.key)}?.map((item: any, index: number) => (
                    <TagField value={${h}} key={index} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <BooleanField value={${l(s,o.key,o.accessor," && ")}} />
            `}},p=o=>{if(o.type==="date"){if(m.push(["DateField","@refinedev/mui"]),o.multiple){let h=l("item",void 0,o.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(s,o.key)}?.map((item: any) => (
                    <DateField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <DateField value={${l(s,o.key,o.accessor," + ' ' + ")}} />
            `}},a=o=>{if(o.type==="richtext")return m.push(["MarkdownField","@refinedev/mui"]),I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <MarkdownField value={${l(s,o.key,o.accessor,' + " " + ')}} />
            `},F=o=>{if(o.type==="number"){if(m.push(["NumberField","@refinedev/mui"]),o.multiple){m.push(["TagField","@refinedev/mui"]);let h=l("item",void 0,o.accessor);return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <Stack direction="row" spacing={1}>
                {${l(s,o.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </Stack>
            `}return I`
                <Typography variant="body1" fontWeight="bold">
                    ${f(o.key)}
                </Typography>
                <NumberField value={${l(s,o.key,o.accessor,' + " " + ')} ?? ""} />
            `}},x=t.map(o=>{switch(o==null?void 0:o.type){case"text":return v(o);case"number":return F(o);case"richtext":return a(o);case"email":return $(o);case"image":return b(o);case"date":return p(o);case"boolean":return T(o);case"url":return c(o);case"relation":return g(o);default:return}});return G(m),I`
    ${O(m)}

    export const ${u} = () => {
        const { queryResult } = useShow(${i?`{ 
                    resource: "${e.name}", 
                    id: ${n}
                }`:""});
        const { data, isLoading } = queryResult;
    
        const ${s} = data?.data;
    
        ${d}

        return (
            <Show isLoading={isLoading}>
                <Stack gap={1}>
                    ${x.join("")}
                </Stack>
            </Show>
        );
    };
    `},Ae=j({type:"show",additionalScope:[["@refinedev/mui","RefineMui",Yr],["@emotion/react","EmotionReact",Jr],["@emotion/styled","EmotionStyled",Qr],["@mui/lab","MuiLab",et],["@mui/material","MuiMaterial",rt],["@mui/x-data-grid","MuiXDataGrid",tt]],codeViewerComponent:z,loadingComponent:_,errorComponent:H,renderer:ir});import*as nt from"@refinedev/mui";import*as ot from"@emotion/react";import*as at from"@emotion/styled";import*as st from"@mui/lab";import*as it from"@mui/material";import*as ct from"@mui/x-data-grid";var cr=({resource:e,fields:t,isCustomPage:i})=>{var L;let n=B((L=e.label)!=null?L:e.name,"list"),u="dataGridProps?.rows",s=[["React","react",!0],["useDataGrid","@refinedev/mui"],["DataGrid","@mui/x-data-grid"],["GridColumns","@mui/x-data-grid"],["EditButton","@refinedev/mui"],["ShowButton","@refinedev/mui"],["DeleteButton","@refinedev/mui"],["List","@refinedev/mui"]],m=t.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),y=m.filter(Boolean).map(r=>{if((r==null?void 0:r.relation)&&!r.fieldable&&r.resource){s.push(["useMany","@refinedev/core"]);let k="";return r.multiple?k=`[].concat(...(${u}?.map((item: any) => ${l("item",r.key,r.accessor,!1)}) ?? []))`:k=`${u}?.map((item: any) => ${l("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${R(r.key,"Data")}, isLoading: ${R(r.key,"IsLoading")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${k},
                    queryOptions: {
                        enabled: !!${u},
                    },
                });
                `}}).filter(Boolean),d=m==null?void 0:m.map(r=>{if(r&&r.resource)return`${R(r.key,"Data")}?.data`}).filter(Boolean),g=r=>{var k,S;if(r.relation&&r.resource){let N=`${R(r.key,"Data")}?.data`,A=R(r.key,"IsLoading");if(Array.isArray(r.accessor))return;let M=`${A} ? <>Loading...</> : `,re=`field: "${r.key}"`,te=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",ne=`headerName: "${f(r.key)}"`,K="";if(r.multiple){s.push(["TagField","@refinedev/mui"]);let V="item";if(r!=null&&r.relationInfer){let U=`${N}?.find((resourceItems) => resourceItems.id === ${l("item",void 0,r.accessor)})`;V=l(U,void 0,(k=r==null?void 0:r.relationInfer)==null?void 0:k.accessor)}K=`
                renderCell: function render({ value }) {
                    return ${M} (
                        <>
                            {${l("value",void 0)}?.map((item: any, index: number) => (
                                <TagField key={index} value={${V}} />
                            ))}
                        </>
                    )
                }
                `}else if(r!=null&&r.relationInfer){let V=`${N}?.find((item) => item.id === value)`,U=l(V,void 0,(S=r==null?void 0:r.relationInfer)==null?void 0:S.accessor);K=`
                    renderCell: function render({ value }) {
                        return ${M} ${U};
                    }
                    `}else K="";return`
                {
                    ${re},
                    ${ne},${te}
                    minWidth: 300,${K}
                }
            `}},v=r=>{if(r.type==="image"){let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,N=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return (
                        <img src={${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} style={{ height: "50px", maxWidth: "100px" }} />
                    )
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <img src={${l("item",void 0,r.accessor," + ")}} key={index} style={{ height: "50px", maxWidth: "100px" }} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${N}
                    minWidth: 100,${A}
                }
            `}},b=r=>{if(r.type==="email"){s.push(["EmailField","@refinedev/mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,N=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
            renderCell: function render({ value }) {
                return (
                    <EmailField value={${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                )
            }
        `;return r.multiple&&(s.push(["TagField","@refinedev/mui"]),A=`
                renderCell: function render({ value }) {
                    return (
                        <>
                        {value?.map((item: any, index: number) => (
                            <TagField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                        ))}
                        </>
                    )
                }
            `),`
            {
                ${k},
                ${S},${N}
                minWidth: 250,${A}
            }
        `}},$=r=>{if(r.type==="url"){s.push(["UrlField","@refinedev/mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,N=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return (
                        <UrlField value={${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    )
                }
            `;return r.multiple&&(s.push(["TagField","@refinedev/mui"]),A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: any) => (
                                <TagField value={${l("item",void 0,r.accessor," + ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${N}
                    minWidth: 250,${A}
                }
            `}},c=r=>{if(r!=null&&r.type){s.push(["Checkbox","@refinedev/mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,N=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return (
                        <Checkbox checked={!!${l("value",void 0,Array.isArray(r.accessor)?r.accessor:void 0," && ")}} />
                    );
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <Checkbox checked={!!${l("item",void 0,r.accessor," && ")}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${N}
                    minWidth: 250,${A}
                }
            `}},T=r=>{if(r.type==="date"){s.push(["DateField","@refinedev/mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,N=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return <DateField value={value} />;
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <DateField value={${l("item",void 0,r.accessor,' + " " + ')}} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${N}
                    minWidth: 250,${A}
                }
            `}},p=r=>{if((r==null?void 0:r.type)==="richtext"){s.push(["MarkdownField","@refinedev/mui"]);let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,N=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A=`
                renderCell: function render({ value }) {
                    return <MarkdownField value={(value ?? "").slice(0, 80) + "..."} />;
                }
            `;return r.multiple&&(A=`
                    renderCell: function render({ value }) {
                        return (
                            <>
                            {value?.map((item: any, index: number) => (
                                <MarkdownField value={(${l("item",void 0,r.accessor,' + " " + ')}).slice(0, 80) + "..."} key={index} />
                            ))}
                            </>
                        )
                    }
                `),`
                {
                    ${k},
                    ${S},${N}
                    minWidth: 250,${A}
                }
            `}},a=r=>{if(r&&(r.type==="text"||r.type==="number")){let k=`field: "${r.key}"`,S=`headerName: "${f(r.key)}"`,N=r.accessor&&!r.multiple&&!Array.isArray(r.accessor)?`valueGetter: ({ row }) => {
            const value = ${l("row",r.key,r.accessor,!1)};

            return value;
        },`:"",A="";if(r.multiple){s.push(["TagField","@refinedev/mui"]);let M=l("item",void 0,r.accessor,' + " " + ');A=`
                renderCell: function render({ row }) {
                    return (
                        <>
                            {(${l("row",r.key)})?.map((item: any) => (
                                <TagField value={${M}} key={${M}} />
                            ))}
                        </>
                    )
                }
                `}return!r.multiple&&Array.isArray(r.accessor)&&(A=`
                renderCell: function render({ row }) {
                    return (
                        <>{${l("row",r.key,r.accessor)}}</>
                    );
                }
                `),`
            {
                ${k},
                ${S},${N}${r.type==="number"?"type: 'number',":""}
                minWidth: ${q(r.key)?50:200},${A}
            }
            `}},{canEdit:F,canShow:x,canDelete:C}=e!=null?e:{};F&&s.push(["EditButton","@refinedev/mui"]),x&&s.push(["ShowButton","@refinedev/mui"]),C&&s.push(["DeleteButton","@refinedev/mui"]);let o=F||x||C?I`
            {
                field: "actions",
                headerName: "Actions",
                renderCell: function render({ row }) {
                    return (
                        <>
                            ${F?I`<EditButton hideText recordItemId={row.id} />`:""}
                            ${x?I`<ShowButton hideText recordItemId={row.id} />`:""}
                            ${C?I`<DeleteButton hideText recordItemId={row.id} />`:""}
                        </>
                    );
                },
                align: "center",
                headerAlign: "center",
                minWidth: 80,
            },
    `:"",h=t.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":return a(r);case"richtext":return p(r);case"email":return b(r);case"image":return v(r);case"date":return T(r);case"boolean":return c(r);case"url":return $(r);case"relation":return g(r);default:return}});return G(s),I`
    ${O(s)}
    
    export const ${n} = () => {
        const { dataGridProps } = useDataGrid(
            ${i?`{ resource: "${e.name}" }`:""} 
        );
    
        ${y}

        const columns = React.useMemo<GridColumns<any>>(() => [
            ${[...h,o].filter(Boolean).join(`,\r
`)}
        ], [${d.join(",")}]);

        return (
            <List>
                <DataGrid {...dataGridProps} columns={columns} autoHeight />
            </List>
        );
    };
    `},Te=j({type:"list",additionalScope:[["@refinedev/mui","RefineMui",nt],["@emotion/react","EmotionReact",ot],["@emotion/styled","EmotionStyled",at],["@mui/lab","MuiLab",st],["@mui/material","MuiMaterial",it],["@mui/x-data-grid","MuiXDataGrid",ct]],codeViewerComponent:z,loadingComponent:_,errorComponent:H,renderer:cr});import*as ut from"@refinedev/mui";import*as mt from"@refinedev/react-hook-form";import*as pt from"@emotion/react";import*as lt from"@emotion/styled";import*as dt from"@mui/lab";import*as yt from"@mui/material";import*as ft from"@mui/x-data-grid";import*as gt from"react-hook-form";var ur=({resource:e,fields:t,isCustomPage:i})=>{var $;let n=B(($=e.label)!=null?$:e.name,"create"),u=[["Create","@refinedev/mui"],["Box","@mui/material"],["useForm","@refinedev/react-hook-form"]],m=t.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{if((c==null?void 0:c.relation)&&!c.fieldable&&c.resource)return u.push(["useAutocomplete","@refinedev/mui"]),`
                const { autocompleteProps: ${R(c.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${c.resource.name}",
                });
            `}).filter(Boolean),y=c=>{if(c.relation&&c.resource){u.push(["Autocomplete","@mui/material"],["Controller","react-hook-form"]);let T=R(c.key,"AutocompleteProps"),p=c.relationInfer&&c.relationInfer.accessor?typeof c.relationInfer.accessor=="string"?c.relationInfer.accessor:c.relationInfer.accessor[0]:"title",a=p.includes(".")||p.includes("[")||p.includes("]")||p.includes("-"),F=c.accessor?l("item",void 0,c.accessor,!1):"(item?.id ?? item)",x=c.accessor?l("value",void 0,c.accessor,!1):"(value?.id ?? value)",C=c.accessor?"value":c.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return I`
                <Controller
                    control={control}
                    name="${E(c.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${c.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"}
                    render={({ field }) => (
                        <Autocomplete
                            {...${T}}
                            {...field}
                            ${c.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${C});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${T}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${F}?.toString(),
                                    )?.${a?`["${p}"]`:p} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option.id.toString() === ${x}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label="${f(c.key)}"
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${l("(errors as any)",c.key,c.accessor,!1)}}
                                    helperText={${l("(errors as any)",c.key,c.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},d=c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext")return q(c.key)||(u.push(["TextField","@mui/material"]),c.multiple)?void 0:I`
                <TextField
                    {...register("${E(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                        ${c.type==="number"?"valueAsNumber: true,":""}
                    })}
                    error={!!${l("(errors as any)",c.key,c.accessor,!1)}}
                    helperText={${l("(errors as any)",c.key,c.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                    ${c.type==="richtext"?"multiline":""}
                    label="${f(c.key)}"
                    name="${E(c.key,void 0,c.accessor)}"
                />
            `},g=c=>{if(c.type==="boolean")return u.push(["Checkbox","@mui/material"],["FormControlLabel","@mui/material"],["Controller","react-hook-form"]),c.multiple?void 0:I`
                <Controller
                    control={control}
                    name="${E(c.key,void 0,c.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label="${f(c.key)}" control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `},v=c=>{if(c.type==="date"){let T=d(c);return`
                {/*
                    DatePicker component is not included in "@refinedev/mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.

                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${T!=null?T:""}
                `}},b=t.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return d(c);case"date":return v(c);case"boolean":return g(c);case"relation":return y(c);default:return}});return G(u),I`
    ${O(u)}

    export const ${n} = () => {
        const {
            saveButtonProps,
            refineCore: { formLoading },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${i?`{
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                }
            }`:""}
        );

        ${m}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${b.join("")}
                </Box>
            </Create>
        );
    };
    `},we=j({type:"create",additionalScope:[["@refinedev/mui","RefineMui",ut],["@refinedev/react-hook-form","RefineReactHookForm",mt],["@emotion/react","EmotionReact",pt],["@emotion/styled","EmotionStyled",lt],["@mui/lab","MuiLab",dt],["@mui/material","MuiMaterial",yt],["@mui/x-data-grid","MuiXDataGrid",ft],["react-hook-form","ReactHookForm",gt]],codeViewerComponent:z,loadingComponent:_,errorComponent:H,renderer:ur});import*as ht from"@refinedev/mui";import*as $t from"@refinedev/react-hook-form";import*as It from"@emotion/react";import*as xt from"@emotion/styled";import*as kt from"@mui/lab";import*as vt from"@mui/material";import*as bt from"@mui/x-data-grid";import*as Ct from"react-hook-form";var mr=({resource:e,fields:t,isCustomPage:i,id:n})=>{var T,p;let u=B((T=e.label)!=null?T:e.name,"edit"),s=R((p=e.label)!=null?p:e.name,"Data"),m=[["Edit","@refinedev/mui"],["Box","@mui/material"],["useForm","@refinedev/react-hook-form"]],d=t.filter(a=>(a==null?void 0:a.relation)&&!(a!=null&&a.fieldable)&&(a==null?void 0:a.resource)).filter(Boolean).map(a=>{if((a==null?void 0:a.relation)&&!a.fieldable&&a.resource){m.push(["useAutocomplete","@refinedev/mui"]);let F=l(s,a.key,a.accessor,!1);return a.multiple&&a.accessor&&(F=`${l(s,a.key)}?.map((item: any) => ${l("item",void 0,a.accessor)})`),`
                const { autocompleteProps: ${R(a.key,"AutocompleteProps")} } =
                useAutocomplete({
                    resource: "${a.resource.name}",
                    defaultValue: ${F},
                });
            `}}).filter(Boolean),g=a=>{if(a.relation&&a.resource){m.push(["Autocomplete","@mui/material"],["Controller","react-hook-form"]);let F=R(a.key,"AutocompleteProps"),x=a.relationInfer&&a.relationInfer.accessor?typeof a.relationInfer.accessor=="string"?a.relationInfer.accessor:a.relationInfer.accessor[0]:"title",C=x.includes(".")||x.includes("[")||x.includes("]")||x.includes("-"),o=a.accessor?l("item",void 0,a.accessor,!1):"(item?.id ?? item)",h=a.accessor?l("value",void 0,a.accessor,!1):"(value?.id ?? value)",L=a.accessor?"value":a.multiple?"value?.map((item: any) => item?.id ?? item)":"value?.id ?? value";return I`
                <Controller
                    control={control}
                    name="${E(a.key,void 0)}"
                    rules={{ required: "This field is required" }}
                    // eslint-disable-next-line
                    ${a.multiple?"defaultValue={[] as any}":"defaultValue={null as any}"}
                    render={({ field }) => (
                        <Autocomplete
                            {...${F}}
                            {...field}
                            ${a.multiple?"multiple":""}
                            onChange={(_, value) => {
                                field.onChange(${L});
                            }}
                            getOptionLabel={(item) => {
                                return (
                                    ${F}?.options?.find(
                                        (p) =>
                                            p?.id?.toString() ===
                                            ${o}?.toString(),
                                    )?.${C?`["${x}"]`:x} ?? ""
                                );
                            }}
                            isOptionEqualToValue={(option, value) =>
                                value === undefined ||
                                option?.id?.toString() === ${h}?.toString()
                            }
                            renderInput={(params) => (
                                <TextField
                                    {...params}
                                    label="${f(a.key)}"
                                    margin="normal"
                                    variant="outlined"
                                    error={!!${l("(errors as any)",a.key,a.accessor,!1)}}
                                    helperText={${l("(errors as any)",a.key,a.accessor,!1)}?.message}
                                    required
                                />
                            )}
                        />
                    )}
                />
            `}},v=a=>{if(a.type==="text"||a.type==="url"||a.type==="email"||a.type==="number"||a.type==="date"||a.type==="richtext"){if(m.push(["TextField","@mui/material"]),a.multiple){m.push(["Box","@mui/material"]);let F=E(a.key,"${index}",a.accessor),x=l("(errors as any)",a.key,void 0,!1)+"?.[index]";return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${l(s,a.key)}?.map((item: any, index: number) => (
                            <TextField
                                key={index}
                                {...register(\`${F}\`, {
                                    required: "This field is required",
                                    ${a.type==="number"?"valueAsNumber: true,":""}
                                })}
                                error={!!${x}}
                                helperText={${x}?.message as string}
                                margin="normal"
                                fullWidth
                                InputLabelProps={{ shrink: true }}
                                ${a.type!=="date"&&a.type!=="richtext"?`type="${a.type}"`:""}
                                ${a.type==="richtext"?"multiline":""}
                                label={\`${f(a.key)} \${index+1}\`}
                                name={\`${E(a.key,void 0,a.accessor)}.\${index}\`}
                            />
                        ))}
                    </Box>
                `}return I`
                <TextField
                    {...register("${E(a.key,void 0,a.accessor)}", {
                        required: "This field is required",
                        ${a.type==="number"?"valueAsNumber: true,":""}
                    })}
                    error={!!${l("(errors as any)",a.key,a.accessor,!1)}}
                    helperText={${l("(errors as any)",a.key,a.accessor,!1)}?.message}
                    margin="normal"
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    ${a.type!=="date"&&a.type!=="richtext"?`type="${a.type}"`:""}
                    ${a.type==="richtext"?"multiline":""}
                    label="${f(a.key)}"
                    name="${E(a.key,void 0,a.accessor)}"
                    ${q(a.key)?"disabled":""}
                />
            `}},b=a=>{if(a.type==="boolean"){if(m.push(["Checkbox","@mui/material"],["FormControlLabel","@mui/material"],["Controller","react-hook-form"]),a.multiple){m.push(["Box","@mui/material"]);let F=E(a.key,"${index}",a.accessor);return`
                    <Box sx={{display: "flex", gap: 1}}>
                        {${l(s,a.key)}?.map((item: any, index: number) => (
                            <Controller
                                key={index}
                                control={control}
                                name={\`${F}\`}
                                // eslint-disable-next-line
                                defaultValue={null as any}
                                render={({ field }) => (
                                    <FormControlLabel label={\`${f(a.key)} \${index+1}\`} control={
                                        <Checkbox
                                            {...field}
                                            checked={field.value}
                                            onChange={(event) => {
                                                field.onChange(event.target.checked);
                                            }}
                                        />
                                    } />
                                )}
                            />
                        ))}
                    </Box>
                `}return I`
                <Controller
                    control={control}
                    name="${E(a.key,void 0,a.accessor)}"
                    // eslint-disable-next-line
                    defaultValue={null as any}
                    render={({ field }) => (
                        <FormControlLabel label="${f(a.key)}" control={
                            <Checkbox
                                {...field}
                                checked={field.value}
                                onChange={(event) => {
                                    field.onChange(event.target.checked);
                                }}
                            />
                        } />
                    )}
                />
            `}},$=a=>{if(a.type==="date")return`
                {/*
                    DatePicker component is not included in "@refinedev/mui" package.
                    To use a <DatePicker> component, you can follow the official documentation for Material UI.

                    Docs: https://mui.com/x/react-date-pickers/date-picker/#basic-usage
                */}
                ${v(a)}
                `},c=t.map(a=>{switch(a==null?void 0:a.type){case"text":case"number":case"email":case"url":case"richtext":return v(a);case"date":return $(a);case"boolean":return b(a);case"relation":return g(a);default:return}});return G(m),I`
    ${O(m)}

    export const ${u} = () => {
        const {
            saveButtonProps,
            refineCore: { queryResult },
            register,
            control,
            formState: { errors },
        } = useForm(
            ${i?`{
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${n},
                    action: "edit",
                }
            }`:""}
        );

        const ${s} = queryResult?.data?.data;

        ${d}

        return (
            <Edit saveButtonProps={saveButtonProps}>
                <Box
                    component="form"
                    sx={{ display: "flex", flexDirection: "column" }}
                    autoComplete="off"
                >
                    ${c.join("")}
                </Box>
            </Edit>
        );
    };
    `},Se=j({type:"edit",additionalScope:[["@refinedev/mui","RefineMui",ht],["@refinedev/react-hook-form","RefineReactHookForm",$t],["@emotion/react","EmotionReact",It],["@emotion/styled","EmotionStyled",xt],["@mui/lab","MuiLab",kt],["@mui/material","MuiMaterial",vt],["@mui/x-data-grid","MuiXDataGrid",bt],["react-hook-form","ReactHookForm",Ct]],codeViewerComponent:z,loadingComponent:_,errorComponent:H,renderer:mr});var Ga=({action:e,id:t,...i})=>{let{action:n,id:u}=Ft();switch(e!=null?e:n){case"show":return se.createElement(Ae,{...i,id:t!=null?t:u});case"create":return se.createElement(we,{...i,id:t!=null?t:u});case"edit":return se.createElement(Se,{...i,id:t!=null?t:u});default:return se.createElement(Te,{...i,id:t!=null?t:u})}};export{we as MuiCreateInferencer,ur as MuiCreateRenderer,Se as MuiEditInferencer,mr as MuiEditRenderer,Ga as MuiInferencer,Te as MuiListInferencer,cr as MuiListRenderer,Ae as MuiShowInferencer,ir as MuiShowRenderer};
//# sourceMappingURL=mui.js.map