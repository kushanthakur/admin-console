import { BaseRecord, CrudFilters, HttpError, useTableProps as useTablePropsCore, useTableReturnType as useTableReturnTypeCore, Pagination, Prettify } from "@refinedev/core";
import { DataGridProps } from "@mui/x-data-grid";
declare type DataGridPropsType = Required<Pick<DataGridProps, "rows" | "loading" | "rowCount" | "sortingMode" | "sortModel" | "onSortModelChange" | "filterMode" | "onFilterModelChange" | "sx" | "disableSelectionOnClick" | "onStateChange" | "paginationMode">> & Pick<DataGridProps, "page" | "onPageChange" | "pageSize" | "onPageSizeChange" | "filterModel">;
export declare type UseDataGridProps<TData, TError, TSearchVariables = unknown> = Omit<useTablePropsCore<TData, TError>, "pagination" | "filters"> & {
    onSearch?: (data: TSearchVariables) => CrudFilters | Promise<CrudFilters>;
    pagination?: Prettify<Omit<Pagination, "pageSize"> & {
        /**
         * Initial number of items per page
         * @default 25
         */
        pageSize?: number;
    }>;
    filters?: Prettify<Omit<NonNullable<useTablePropsCore<TData, TError>["filters"]>, "defaultBehavior"> & {
        /**
         * Default behavior of the `setFilters` function
         * @default "replace"
         */
        defaultBehavior?: "replace" | "merge";
    }>;
};
export declare type UseDataGridReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown> = useTableReturnTypeCore<TData, TError> & {
    dataGridProps: DataGridPropsType;
    search: (value: TSearchVariables) => Promise<void>;
};
export declare function useDataGrid<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TSearchVariables = unknown>({ onSearch: onSearchProp, initialCurrent, initialPageSize, pagination, hasPagination, initialSorter, permanentSorter, defaultSetFilterBehavior, initialFilter, permanentFilter, filters: filtersFromProp, sorters: sortersFromProp, syncWithLocation: syncWithLocationProp, resource: resourceFromProp, successNotification, errorNotification, queryOptions, liveMode: liveModeFromProp, onLiveEvent, liveParams, meta, metaData, dataProviderName, }?: UseDataGridProps<TData, TError, TSearchVariables>): UseDataGridReturnType<TData, TError, TSearchVariables>;
export {};
//# sourceMappingURL=index.d.ts.map