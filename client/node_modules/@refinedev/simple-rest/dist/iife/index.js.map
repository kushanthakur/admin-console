{"version":3,"sources":["../../src/index.ts","../../src/provider.ts","../../src/utils/mapOperator.ts","../../src/utils/generateSort.ts","../../src/utils/generateFilter.ts","../../src/utils/axios.ts"],"sourcesContent":["import { stringify } from \"query-string\";\nimport { dataProvider } from \"./provider\";\n\nexport default dataProvider;\n\nexport * from \"./utils\";\n\nexport { stringify };\n","import { AxiosInstance } from \"axios\";\nimport { stringify } from \"query-string\";\nimport { DataProvider } from \"@refinedev/core\";\nimport { axiosInstance, generateSort, generateFilter } from \"./utils\";\n\nexport const dataProvider = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance,\n): Omit<\n    Required<DataProvider>,\n    \"createMany\" | \"updateMany\" | \"deleteMany\"\n> => ({\n    getList: async ({ resource, pagination, filters, sorters }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const {\n            current = 1,\n            pageSize = 10,\n            mode = \"server\",\n        } = pagination ?? {};\n\n        const queryFilters = generateFilter(filters);\n\n        const query: {\n            _start?: number;\n            _end?: number;\n            _sort?: string;\n            _order?: string;\n        } = {};\n\n        if (mode === \"server\") {\n            query._start = (current - 1) * pageSize;\n            query._end = current * pageSize;\n        }\n\n        const generatedSort = generateSort(sorters);\n        if (generatedSort) {\n            const { _sort, _order } = generatedSort;\n            query._sort = _sort.join(\",\");\n            query._order = _order.join(\",\");\n        }\n\n        const { data, headers } = await httpClient.get(\n            `${url}?${stringify(query)}&${stringify(queryFilters)}`,\n        );\n\n        const total = +headers[\"x-total-count\"];\n\n        return {\n            data,\n            total: total || data.length,\n        };\n    },\n\n    getMany: async ({ resource, ids }) => {\n        const { data } = await httpClient.get(\n            `${apiUrl}/${resource}?${stringify({ id: ids })}`,\n        );\n\n        return {\n            data,\n        };\n    },\n\n    create: async ({ resource, variables }) => {\n        const url = `${apiUrl}/${resource}`;\n\n        const { data } = await httpClient.post(url, variables);\n\n        return {\n            data,\n        };\n    },\n\n    update: async ({ resource, id, variables }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await httpClient.patch(url, variables);\n\n        return {\n            data,\n        };\n    },\n\n    getOne: async ({ resource, id }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await httpClient.get(url);\n\n        return {\n            data,\n        };\n    },\n\n    deleteOne: async ({ resource, id, variables }) => {\n        const url = `${apiUrl}/${resource}/${id}`;\n\n        const { data } = await httpClient.delete(url, {\n            data: variables,\n        });\n\n        return {\n            data,\n        };\n    },\n\n    getApiUrl: () => {\n        return apiUrl;\n    },\n\n    custom: async ({\n        url,\n        method,\n        filters,\n        sorters,\n        payload,\n        query,\n        headers,\n    }) => {\n        let requestUrl = `${url}?`;\n\n        if (sorters) {\n            const generatedSort = generateSort(sorters);\n            if (generatedSort) {\n                const { _sort, _order } = generatedSort;\n                const sortQuery = {\n                    _sort: _sort.join(\",\"),\n                    _order: _order.join(\",\"),\n                };\n                requestUrl = `${requestUrl}&${stringify(sortQuery)}`;\n            }\n        }\n\n        if (filters) {\n            const filterQuery = generateFilter(filters);\n            requestUrl = `${requestUrl}&${stringify(filterQuery)}`;\n        }\n\n        if (query) {\n            requestUrl = `${requestUrl}&${stringify(query)}`;\n        }\n\n        if (headers) {\n            httpClient.defaults.headers = {\n                ...httpClient.defaults.headers,\n                ...headers,\n            };\n        }\n\n        let axiosResponse;\n        switch (method) {\n            case \"put\":\n            case \"post\":\n            case \"patch\":\n                axiosResponse = await httpClient[method](url, payload);\n                break;\n            case \"delete\":\n                axiosResponse = await httpClient.delete(url, {\n                    data: payload,\n                });\n                break;\n            default:\n                axiosResponse = await httpClient.get(requestUrl);\n                break;\n        }\n\n        const { data } = axiosResponse;\n\n        return Promise.resolve({ data });\n    },\n});\n","import { CrudOperators } from \"@refinedev/core\";\n\nexport const mapOperator = (operator: CrudOperators): string => {\n    switch (operator) {\n        case \"ne\":\n        case \"gte\":\n        case \"lte\":\n            return `_${operator}`;\n        case \"contains\":\n            return \"_like\";\n        case \"eq\":\n        default:\n            return \"\";\n    }\n};\n","import { CrudSorting } from \"@refinedev/core\";\n\nexport const generateSort = (sorters?: CrudSorting) => {\n    if (sorters && sorters.length > 0) {\n        const _sort: string[] = [];\n        const _order: string[] = [];\n\n        sorters.map((item) => {\n            _sort.push(item.field);\n            _order.push(item.order);\n        });\n\n        return {\n            _sort,\n            _order,\n        };\n    }\n\n    return;\n};\n","import { CrudFilters } from \"@refinedev/core\";\nimport { mapOperator } from \"./mapOperator\";\n\nexport const generateFilter = (filters?: CrudFilters) => {\n    const queryFilters: { [key: string]: string } = {};\n\n    if (filters) {\n        filters.map((filter) => {\n            if (filter.operator === \"or\" || filter.operator === \"and\") {\n                throw new Error(\n                    `[@refinedev/simple-rest]: \\`operator: ${filter.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`,\n                );\n            }\n\n            if (\"field\" in filter) {\n                const { field, operator, value } = filter;\n\n                if (field === \"q\") {\n                    queryFilters[field] = value;\n                    return;\n                }\n\n                const mappedOperator = mapOperator(operator);\n                queryFilters[`${field}${mappedOperator}`] = value;\n            }\n        });\n    }\n\n    return queryFilters;\n};\n","import { HttpError } from \"@refinedev/core\";\nimport axios from \"axios\";\n\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        const customError: HttpError = {\n            ...error,\n            message: error.response?.data?.message,\n            statusCode: error.response?.status,\n        };\n\n        return Promise.reject(customError);\n    },\n);\n\nexport { axiosInstance };\n"],"mappings":"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","names":["import_query_string","import_query_string","mapOperator","operator","generateSort","sorters","_sort","_order","item","generateFilter","filters","queryFilters","filter","field","operator","value","mappedOperator","mapOperator","import_axios","axiosInstance","axios","response","error","_a","_b","_c","customError","dataProvider","apiUrl","httpClient","axiosInstance","resource","pagination","filters","sorters","url","current","pageSize","mode","queryFilters","generateFilter","query","generatedSort","generateSort","_sort","_order","data","headers","total","ids","variables","id","method","payload","requestUrl","sortQuery","filterQuery","axiosResponse","src_default","dataProvider"]}