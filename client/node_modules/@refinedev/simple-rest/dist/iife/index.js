(()=>{var b=Object.create;var O=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var v=(r=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(r,{get:(t,e)=>(typeof require!="undefined"?require:t)[e]}):r)(function(r){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var M=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of k(t))!E.call(r,a)&&a!==e&&O(r,a,{get:()=>t[a],enumerable:!(o=j(t,a))||o.enumerable});return r};var A=(r,t,e)=>(e=r!=null?b(I(r)):{},M(t||!r||!r.__esModule?O(e,"default",{value:r,enumerable:!0}):e,r));var D=v("query-string");var u=v("query-string");var w=r=>{switch(r){case"ne":case"gte":case"lte":return`_${r}`;case"contains":return"_like";case"eq":default:return""}};var $=r=>{if(r&&r.length>0){let t=[],e=[];return r.map(o=>{t.push(o.field),e.push(o.order)}),{_sort:t,_order:e}}};var x=r=>{let t={};return r&&r.map(e=>{if(e.operator==="or"||e.operator==="and")throw new Error(`[@refinedev/simple-rest]: \`operator: ${e.operator}\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`);if("field"in e){let{field:o,operator:a,value:s}=e;if(o==="q"){t[o]=s;return}let n=w(a);t[`${o}${n}`]=s}}),t};var S=A(v("axios")),_=S.default.create();_.interceptors.response.use(r=>r,r=>{var e,o,a;let t={...r,message:(o=(e=r.response)==null?void 0:e.data)==null?void 0:o.message,statusCode:(a=r.response)==null?void 0:a.status};return Promise.reject(t)});var F=(r,t=_)=>({getList:async({resource:e,pagination:o,filters:a,sorters:s})=>{let n=`${r}/${e}`,{current:m=1,pageSize:f=10,mode:c="server"}=o!=null?o:{},p=x(a),i={};c==="server"&&(i._start=(m-1)*f,i._end=m*f);let d=$(s);if(d){let{_sort:q,_order:P}=d;i._sort=q.join(","),i._order=P.join(",")}let{data:g,headers:y}=await t.get(`${n}?${(0,u.stringify)(i)}&${(0,u.stringify)(p)}`),l=+y["x-total-count"];return{data:g,total:l||g.length}},getMany:async({resource:e,ids:o})=>{let{data:a}=await t.get(`${r}/${e}?${(0,u.stringify)({id:o})}`);return{data:a}},create:async({resource:e,variables:o})=>{let a=`${r}/${e}`,{data:s}=await t.post(a,o);return{data:s}},update:async({resource:e,id:o,variables:a})=>{let s=`${r}/${e}/${o}`,{data:n}=await t.patch(s,a);return{data:n}},getOne:async({resource:e,id:o})=>{let a=`${r}/${e}/${o}`,{data:s}=await t.get(a);return{data:s}},deleteOne:async({resource:e,id:o,variables:a})=>{let s=`${r}/${e}/${o}`,{data:n}=await t.delete(s,{data:a});return{data:n}},getApiUrl:()=>r,custom:async({url:e,method:o,filters:a,sorters:s,payload:n,query:m,headers:f})=>{let c=`${e}?`;if(s){let d=$(s);if(d){let{_sort:g,_order:y}=d,l={_sort:g.join(","),_order:y.join(",")};c=`${c}&${(0,u.stringify)(l)}`}}if(a){let d=x(a);c=`${c}&${(0,u.stringify)(d)}`}m&&(c=`${c}&${(0,u.stringify)(m)}`),f&&(t.defaults.headers={...t.defaults.headers,...f});let p;switch(o){case"put":case"post":case"patch":p=await t[o](e,n);break;case"delete":p=await t.delete(e,{data:n});break;default:p=await t.get(c);break}let{data:i}=p;return Promise.resolve({data:i})}});var W=F;})();
//# sourceMappingURL=index.js.map