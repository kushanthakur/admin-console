import { FieldValues } from "react-hook-form";
import { BaseRecord, HttpError } from "@refinedev/core";
import { UseFormProps, UseFormReturnType } from "../useForm";
export declare type UseStepsFormReturnType<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables extends FieldValues = FieldValues, TContext extends object = {}> = UseFormReturnType<TData, TError, TVariables, TContext> & {
    steps: {
        currentStep: number;
        gotoStep: (step: number) => void;
    };
};
export declare type UseStepsFormProps<TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables extends FieldValues = FieldValues, TContext extends object = {}> = UseFormProps<TData, TError, TVariables, TContext> & {
    /**
     * @description Configuration object for the steps.
     * `defaultStep`: Allows you to set the initial step.
     *
     * `isBackValidate`: Whether to validation the current step when going back.
     * @type `{
      defaultStep?: number;
      isBackValidate?: boolean;
      }`
     * @default `defaultStep = 0` `isBackValidate = false`
     */
    stepsProps?: {
        defaultStep?: number;
        isBackValidate?: boolean;
    };
};
export declare const useStepsForm: <TData extends BaseRecord = BaseRecord, TError extends HttpError = HttpError, TVariables extends FieldValues = FieldValues, TContext extends object = {}>({ stepsProps, ...rest }?: UseStepsFormProps<TData, TError, TVariables, TContext>) => UseStepsFormReturnType<TData, TError, TVariables, TContext>;
//# sourceMappingURL=index.d.ts.map